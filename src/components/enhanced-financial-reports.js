import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Badge } from "../components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select";
import { BarChart3, PieChart, TrendingUp, Settings, DollarSign, Calculator, ChartBar, RefreshCw } from "lucide-react";
import { useToast } from "../components/ui/use-toast";
import apiService from "../lib/api";
import { FinancialReportExportDropdown } from "./financial-report-exporter";
import { getCompanyId } from "../lib/config";
export function EnhancedFinancialReports({ selectedCompany: propSelectedCompany, defaultReportType, initialData } = {}) {
    const [selectedCompany, setSelectedCompany] = useState(propSelectedCompany || getCompanyId() || '');
    const [companies, setCompanies] = useState([]);
    const [dateRange, setDateRange] = useState({
        startDate: new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0],
        endDate: new Date().toISOString().split('T')[0]
    });
    const [asOfDate, setAsOfDate] = useState(new Date().toISOString().split('T')[0]);
    const [activeTab, setActiveTab] = useState(defaultReportType || 'balance-sheet');
    const [isLoading, setIsLoading] = useState(false);
    const [balanceSheet, setBalanceSheet] = useState(null);
    const [profitAndLoss, setProfitAndLoss] = useState(null);
    const [cashFlow, setCashFlow] = useState(null);
    const [financialRatios, setFinancialRatios] = useState(null);
    const { toast } = useToast();
    // Load companies on component mount
    useEffect(() => {
        loadCompanies();
    }, []);
    const loadCompanies = async () => {
        try {
            const response = await apiService.getCompanies({ page: 1, pageSize: 50 });
            const companiesData = response?.data || response || [];
            setCompanies(Array.isArray(companiesData) ? companiesData : []);
        }
        catch (err) {
            console.error('Error loading companies:', err);
            // Fallback to current company if loading fails
            const currentCompanyId = getCompanyId();
            if (currentCompanyId) {
                setCompanies([{ id: currentCompanyId, name: 'Current Company' }]);
            }
        }
    };
    // Generate sample data for demonstrational data if provided, but allow it to be overridden
    useEffect(() => {
        if (initialData) {
            if (initialData['balance-sheet'])
                setBalanceSheet(initialData['balance-sheet']);
            if (initialData['profit-loss'])
                setProfitAndLoss(initialData['profit-loss']);
            if (initialData['cash-flow'])
                setCashFlow(initialData['cash-flow']);
        }
    }, [initialData]);
    // Listen for journal entry creation events to auto-refresh reports
    useEffect(() => {
        const handleJournalEntryCreated = () => {
            // Auto-refresh the currently active report
            if (activeTab === 'balance-sheet') {
                generateBalanceSheet();
            }
            else if (activeTab === 'profit-loss') {
                generateProfitAndLoss();
            }
            else if (activeTab === 'cash-flow') {
                generateCashFlow();
            }
        };
        window.addEventListener('journalEntryCreated', handleJournalEntryCreated);
        return () => window.removeEventListener('journalEntryCreated', handleJournalEntryCreated);
    }, [activeTab]);
    const generateBalanceSheet = async () => {
        setIsLoading(true);
        try {
            console.log('Generating balance sheet for company:', selectedCompany, 'as of:', asOfDate);
            const data = await apiService.get(`/api/enhanced-financial-reports/balance-sheet?companyId=${selectedCompany}&asOfDate=${asOfDate}`);
            console.log('Balance sheet data received:', data);
            // Clear any cached data and set fresh data
            const freshData = data?.data || data;
            console.log('Setting fresh balance sheet data:', freshData);
            setBalanceSheet(freshData);
            toast({
                title: "Success",
                description: "Balance sheet generated successfully",
            });
        }
        catch (error) {
            console.error('Balance sheet error:', error);
            toast({
                title: "Error",
                description: `Failed to generate balance sheet: ${error instanceof Error ? error.message : 'Unknown error'}`,
                variant: "destructive",
            });
        }
        finally {
            setIsLoading(false);
        }
    };
    const generateProfitAndLoss = async () => {
        setIsLoading(true);
        try {
            const data = await apiService.get(`/api/enhanced-financial-reports/profit-loss?companyId=${selectedCompany}&startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`);
            setProfitAndLoss(data?.data || data);
            toast({
                title: "Success",
                description: "Profit & Loss statement generated successfully",
            });
        }
        catch (error) {
            console.error('Profit & Loss error:', error);
            toast({
                title: "Error",
                description: "Failed to generate Profit & Loss statement",
                variant: "destructive",
            });
        }
        finally {
            setIsLoading(false);
        }
    };
    const generateCashFlow = async () => {
        setIsLoading(true);
        try {
            const data = await apiService.get(`/api/enhanced-financial-reports/cash-flow?companyId=${selectedCompany}&startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`);
            setCashFlow(data?.data || data);
            toast({
                title: "Success",
                description: "Cash flow statement generated successfully",
            });
        }
        catch (error) {
            console.error('Cash flow error:', error);
            toast({
                title: "Error",
                description: "Failed to generate cash flow statement",
                variant: "destructive",
            });
        }
        finally {
            setIsLoading(false);
        }
    };
    const generateFinancialRatios = async () => {
        setIsLoading(true);
        try {
            const data = await apiService.get(`/api/enhanced-financial-reports/ratios?companyId=${selectedCompany}&asOfDate=${asOfDate}`);
            setFinancialRatios(data?.data?.ratios || data?.ratios || {});
            toast({
                title: "Success",
                description: "Financial ratios calculated successfully",
            });
        }
        catch (error) {
            console.error('Financial ratios error:', error);
            toast({
                title: "Error",
                description: "Failed to calculate financial ratios",
                variant: "destructive",
            });
        }
        finally {
            setIsLoading(false);
        }
    };
    const renderBalanceSheet = () => {
        if (!balanceSheet)
            return _jsx("div", { className: "text-center text-gray-500", children: "Generate a balance sheet to view data" });
        return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-green-600", children: "Total Assets" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", balanceSheet.totalAssets.toLocaleString()] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-red-600", children: "Total Liabilities" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", balanceSheet.totalLiabilities.toLocaleString()] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-blue-600", children: "Total Equity" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", balanceSheet.totalEquity.toLocaleString()] }) })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(PieChart, { className: "h-5 w-5" }), "Assets"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Current Assets" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.assets.totalCurrentAssets.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.assets.currentAssets.map((asset) => (_jsxs("li", { children: [asset.accountName, " (", asset.accountNumber, "): $", asset.balance.toLocaleString()] }, asset.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Fixed Assets" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.assets.totalFixedAssets.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.assets.fixedAssets.map((asset) => (_jsxs("li", { children: [asset.accountName, " (", asset.accountNumber, "): $", asset.balance.toLocaleString()] }, asset.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Other Assets" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.assets.totalOtherAssets.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.assets.otherAssets.map((asset) => (_jsxs("li", { children: [asset.accountName, " (", asset.accountNumber, "): $", asset.balance.toLocaleString()] }, asset.accountId))) })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(BarChart3, { className: "h-5 w-5" }), "Liabilities & Equity"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Current Liabilities" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.liabilities.totalCurrentLiabilities.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.liabilities.currentLiabilities.map((liability) => (_jsxs("li", { children: [liability.accountName, " (", liability.accountNumber, "): $", liability.balance.toLocaleString()] }, liability.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Long-term Liabilities" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.liabilities.totalLongTermLiabilities.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.liabilities.longTermLiabilities.map((liability) => (_jsxs("li", { children: [liability.accountName, " (", liability.accountNumber, "): $", liability.balance.toLocaleString()] }, liability.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-blue-600", children: "Equity" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", balanceSheet.equity.totalContributedCapital.toLocaleString()] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: balanceSheet.equity.contributedCapital.map((equity) => (_jsxs("li", { children: [equity.accountName, " (", equity.accountNumber, "): $", equity.balance.toLocaleString()] }, equity.accountId))) })] })] }) })] })] }), balanceSheet.changes && (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "h-5 w-5" }), "Changes Summary"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Assets Change" }), _jsxs("div", { className: `text-lg font-semibold ${balanceSheet.changes.assetsChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", balanceSheet.changes.assetsChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Liabilities Change" }), _jsxs("div", { className: `text-lg font-semibold ${balanceSheet.changes.liabilitiesChange >= 0 ? 'text-red-600' : 'text-green-600'}`, children: ["$", balanceSheet.changes.liabilitiesChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Equity Change" }), _jsxs("div", { className: `text-lg font-semibold ${balanceSheet.changes.equityChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", balanceSheet.changes.equityChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Working Capital Change" }), _jsxs("div", { className: `text-lg font-semibold ${balanceSheet.changes.workingCapitalChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", balanceSheet.changes.workingCapitalChange?.toLocaleString() || '0'] })] })] }) })] })), balanceSheet.ratios && (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Calculator, { className: "h-5 w-5" }), "Financial Ratios"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Current Ratio" }), _jsx("div", { className: "text-lg font-semibold", children: balanceSheet.ratios.currentRatio?.toFixed(2) || 'N/A' })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Quick Ratio" }), _jsx("div", { className: "text-lg font-semibold", children: balanceSheet.ratios.quickRatio?.toFixed(2) || 'N/A' })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Debt to Equity" }), _jsx("div", { className: "text-lg font-semibold", children: balanceSheet.ratios.debtToEquityRatio?.toFixed(2) || 'N/A' })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Equity Multiplier" }), _jsx("div", { className: "text-lg font-semibold", children: balanceSheet.ratios.equityMultiplier?.toFixed(2) || 'N/A' })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Return on Assets" }), _jsxs("div", { className: "text-lg font-semibold", children: [balanceSheet.ratios.returnOnAssets?.toFixed(2) || 'N/A', "%"] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Return on Equity" }), _jsxs("div", { className: "text-lg font-semibold", children: [balanceSheet.ratios.returnOnEquity?.toFixed(2) || 'N/A', "%"] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Asset Turnover" }), _jsx("div", { className: "text-lg font-semibold", children: balanceSheet.ratios.assetTurnover?.toFixed(2) || 'N/A' })] })] }) })] }))] }));
    };
    const renderProfitAndLoss = () => {
        if (!profitAndLoss)
            return _jsx("div", { className: "text-center text-gray-500", children: "Generate a Profit & Loss statement to view data" });
        return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-green-600", children: "Total Revenue" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", profitAndLoss.revenue?.totalRevenue?.toLocaleString() || '0'] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-orange-600", children: "Gross Profit" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: ["$", profitAndLoss.grossProfit?.toLocaleString() || '0'] }), _jsxs("div", { className: "text-sm text-gray-600", children: [profitAndLoss.margins?.grossMargin?.toFixed(1) || '0', "% margin"] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-blue-600", children: "Operating Income" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: ["$", profitAndLoss.operatingIncome?.toLocaleString() || '0'] }), _jsxs("div", { className: "text-sm text-gray-600", children: [profitAndLoss.margins?.operatingMargin?.toFixed(1) || '0', "% margin"] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-purple-600", children: "Net Income" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: ["$", profitAndLoss.netIncome?.toLocaleString() || '0'] }), _jsxs("div", { className: "text-sm text-gray-600", children: [profitAndLoss.margins?.netMargin?.toFixed(1) || '0', "% margin"] })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "h-5 w-5" }), "Revenue Breakdown"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Sales Revenue" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.revenue?.salesRevenue?.reduce((sum, r) => sum + r.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.revenue?.salesRevenue?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Service Revenue" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.revenue?.serviceRevenue?.reduce((sum, r) => sum + r.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.revenue?.serviceRevenue?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Other Revenue" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.revenue?.otherRevenue?.reduce((sum, r) => sum + r.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.revenue?.otherRevenue?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(BarChart3, { className: "h-5 w-5" }), "Cost of Goods Sold"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Direct Materials" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.costOfGoodsSold?.directMaterials?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.costOfGoodsSold?.directMaterials?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Direct Labor" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.costOfGoodsSold?.directLabor?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.costOfGoodsSold?.directLabor?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Overhead" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.costOfGoodsSold?.overhead?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.costOfGoodsSold?.overhead?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { className: "border-t pt-2", children: [_jsx("div", { className: "font-bold text-red-600", children: "Total COGS" }), _jsxs("div", { className: "text-xl font-bold", children: ["$", profitAndLoss.costOfGoodsSold?.totalCOGS?.toLocaleString() || '0'] })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(PieChart, { className: "h-5 w-5" }), "Operating Expenses"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Selling Expenses" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.operatingExpenses?.sellingExpenses?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.operatingExpenses?.sellingExpenses?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Administrative Expenses" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.operatingExpenses?.administrativeExpenses?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.operatingExpenses?.administrativeExpenses?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Research & Development" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.operatingExpenses?.researchExpenses?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] }), _jsx("ul", { className: "list-disc list-inside text-sm text-gray-700 mt-2 space-y-1", children: profitAndLoss.operatingExpenses?.researchExpenses?.map((item) => (_jsxs("li", { children: [item.accountName, " (", item.accountNumber, "): $", item.balance.toLocaleString()] }, item.accountId))) })] }), _jsxs("div", { className: "border-t pt-2", children: [_jsx("div", { className: "font-bold text-red-600", children: "Total Operating Expenses" }), _jsxs("div", { className: "text-xl font-bold", children: ["$", profitAndLoss.operatingExpenses?.totalOperatingExpenses?.toLocaleString() || '0'] })] })] }) })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "h-5 w-5" }), "Other Income"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Interest Income" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherIncome?.interestIncome?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Investment Income" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherIncome?.investmentIncome?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-green-600", children: "Other Income" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherIncome?.otherIncome?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { className: "border-t pt-2", children: [_jsx("div", { className: "font-bold text-green-600", children: "Total Other Income" }), _jsxs("div", { className: "text-xl font-bold", children: ["$", profitAndLoss.otherIncome?.totalOtherIncome?.toLocaleString() || '0'] })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(BarChart3, { className: "h-5 w-5" }), "Other Expenses"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Interest Expense" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherExpenses?.interestExpense?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Taxes" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherExpenses?.taxes?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "font-medium text-red-600", children: "Other Expenses" }), _jsxs("div", { className: "text-lg font-semibold", children: ["$", profitAndLoss.otherExpenses?.otherExpenses?.reduce((sum, item) => sum + item.balance, 0)?.toLocaleString() || '0'] })] }), _jsxs("div", { className: "border-t pt-2", children: [_jsx("div", { className: "font-bold text-red-600", children: "Total Other Expenses" }), _jsxs("div", { className: "text-xl font-bold", children: ["$", profitAndLoss.otherExpenses?.totalOtherExpenses?.toLocaleString() || '0'] })] })] }) })] })] }), profitAndLoss.changes && (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "h-5 w-5" }), "Period Changes"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Revenue Change" }), _jsxs("div", { className: `text-lg font-semibold ${profitAndLoss.changes.revenueChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", profitAndLoss.changes.revenueChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Expense Change" }), _jsxs("div", { className: `text-lg font-semibold ${profitAndLoss.changes.expenseChange >= 0 ? 'text-red-600' : 'text-green-600'}`, children: ["$", profitAndLoss.changes.expenseChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Net Income Change" }), _jsxs("div", { className: `text-lg font-semibold ${profitAndLoss.changes.netIncomeChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", profitAndLoss.changes.netIncomeChange?.toLocaleString() || '0'] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-gray-600", children: "Gross Profit Change" }), _jsxs("div", { className: `text-lg font-semibold ${profitAndLoss.changes.grossProfitChange >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", profitAndLoss.changes.grossProfitChange?.toLocaleString() || '0'] })] })] }) })] }))] }));
    };
    const renderCashFlow = () => {
        if (!cashFlow)
            return _jsx("div", { className: "text-center text-gray-500", children: "Generate a Cash Flow statement to view data" });
        return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-green-600", children: "Operating Cash Flow" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", cashFlow.operatingActivities.netCashFlow.toLocaleString()] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-blue-600", children: "Investing Cash Flow" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", cashFlow.investingActivities.netCashFlow.toLocaleString()] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-purple-600", children: "Financing Cash Flow" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", cashFlow.financingActivities.netCashFlow.toLocaleString()] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-orange-600", children: "Net Cash Flow" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: ["$", cashFlow.netCashFlow.toLocaleString()] }) })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "h-5 w-5" }), "Operating Activities"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Cash Inflows" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.operatingActivities.inflows.reduce((sum, i) => sum + i.amount, 0).toLocaleString()] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Cash Outflows" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.operatingActivities.outflows.reduce((sum, i) => sum + i.amount, 0).toLocaleString()] })] }), _jsx("div", { className: "border-t pt-2", children: _jsxs("div", { className: "flex justify-between font-bold", children: [_jsx("span", { children: "Net Operating" }), _jsxs("span", { children: ["$", cashFlow.operatingActivities.netCashFlow.toLocaleString()] })] }) })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(BarChart3, { className: "h-5 w-5" }), "Investing Activities"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Cash Inflows" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.investingActivities.inflows.reduce((sum, i) => sum + i.amount, 0).toLocaleString()] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Cash Outflows" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.investingActivities.outflows.reduce((sum, i) => sum + i.amount, 0).toLocaleString()] })] }), _jsx("div", { className: "border-t pt-2", children: _jsxs("div", { className: "flex justify-between font-bold", children: [_jsx("span", { children: "Net Investing" }), _jsxs("span", { children: ["$", cashFlow.investingActivities.netCashFlow.toLocaleString()] })] }) })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(DollarSign, { className: "h-5 w-5" }), "Cash Position"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Beginning Cash" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.beginningCash.toLocaleString()] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm", children: "Net Cash Flow" }), _jsxs("span", { className: "font-semibold", children: ["$", cashFlow.netCashFlow.toLocaleString()] })] }), _jsx("div", { className: "border-t pt-2", children: _jsxs("div", { className: "flex justify-between font-bold", children: [_jsx("span", { children: "Ending Cash" }), _jsxs("span", { children: ["$", cashFlow.endingCash.toLocaleString()] })] }) })] }) })] })] })] }));
    };
    const renderFinancialRatios = () => {
        if (!financialRatios)
            return _jsx("div", { className: "text-center text-gray-500", children: "Calculate financial ratios to view data" });
        return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Current Ratio" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: financialRatios.currentRatio.toFixed(2) }), _jsx("div", { className: "text-sm text-gray-600", children: "Liquidity measure" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Quick Ratio" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: financialRatios.quickRatio.toFixed(2) }), _jsx("div", { className: "text-sm text-gray-600", children: "Acid test ratio" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Debt to Equity" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: financialRatios.debtToEquityRatio.toFixed(2) }), _jsx("div", { className: "text-sm text-gray-600", children: "Leverage ratio" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "ROA" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: [financialRatios.returnOnAssets.toFixed(2), "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Return on assets" })] })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "ROE" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: [financialRatios.returnOnEquity.toFixed(2), "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Return on equity" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Asset Turnover" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: financialRatios.assetTurnover.toFixed(2) }), _jsx("div", { className: "text-sm text-gray-600", children: "Efficiency ratio" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Gross Margin" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: [financialRatios.grossProfitMargin.toFixed(1), "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Profitability" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Net Margin" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: [financialRatios.netProfitMargin.toFixed(1), "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Net profitability" })] })] })] })] }));
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold", children: "Enhanced Financial Reports" }), _jsx("p", { className: "text-gray-600", children: "Advanced financial reporting with real-time analysis and export capabilities" })] }), _jsxs(Badge, { variant: "secondary", className: "flex items-center gap-1", children: [_jsx(ChartBar, { className: "h-3 w-3" }), "Phase 1.1"] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Report Configuration" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "Company" }), _jsxs(Select, { value: selectedCompany, onValueChange: setSelectedCompany, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: companies.length > 0 ? (companies.map((company) => (_jsx(SelectItem, { value: company.id, children: company.name }, company.id)))) : (_jsx(SelectItem, { value: selectedCompany || getCompanyId() || '', children: "Current Company" })) })] })] }), (activeTab === 'balance-sheet' || activeTab === 'ratios') && (_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "As of Date" }), _jsx(Input, { type: "date", value: asOfDate, onChange: (e) => setAsOfDate(e.target.value), placeholder: "Select date" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: activeTab === 'balance-sheet'
                                                ? 'Financial position at this date'
                                                : 'Ratios calculated as of this date' })] })), (activeTab === 'profit-loss' || activeTab === 'cash-flow') && (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "Start Date" }), _jsx(Input, { type: "date", value: dateRange.startDate, onChange: (e) => setDateRange(prev => ({ ...prev, startDate: e.target.value })), placeholder: "Start date" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Period start" })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "End Date" }), _jsx(Input, { type: "date", value: dateRange.endDate, onChange: (e) => setDateRange(prev => ({ ...prev, endDate: e.target.value })), placeholder: "End date" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: activeTab === 'profit-loss' ? 'Income & expenses period' : 'Cash flow period' })] })] })), activeTab === 'custom' && (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "As of Date" }), _jsx(Input, { type: "date", value: asOfDate, onChange: (e) => setAsOfDate(e.target.value), placeholder: "Select date" })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "Start Date" }), _jsx(Input, { type: "date", value: dateRange.startDate, onChange: (e) => setDateRange(prev => ({ ...prev, startDate: e.target.value })), placeholder: "Start date" })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium", children: "End Date" }), _jsx(Input, { type: "date", value: dateRange.endDate, onChange: (e) => setDateRange(prev => ({ ...prev, endDate: e.target.value })), placeholder: "End date" })] })] }))] }) })] }), _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, variant: "pills", children: [_jsxs(TabsList, { variant: "pills", className: "grid w-full grid-cols-5", children: [_jsx(TabsTrigger, { value: "balance-sheet", variant: "pills", icon: _jsx(PieChart, { className: "h-4 w-4" }), children: "Balance Sheet" }), _jsx(TabsTrigger, { value: "profit-loss", variant: "pills", icon: _jsx(BarChart3, { className: "h-4 w-4" }), children: "Profit & Loss" }), _jsx(TabsTrigger, { value: "cash-flow", variant: "pills", icon: _jsx(TrendingUp, { className: "h-4 w-4" }), children: "Cash Flow" }), _jsx(TabsTrigger, { value: "ratios", variant: "pills", icon: _jsx(Calculator, { className: "h-4 w-4" }), children: "Ratios" }), _jsx(TabsTrigger, { value: "custom", variant: "pills", icon: _jsx(Settings, { className: "h-4 w-4" }), children: "Custom" })] }), _jsxs(TabsContent, { value: "balance-sheet", className: "space-y-4", children: [_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { onClick: generateBalanceSheet, disabled: isLoading, children: isLoading ? 'Generating...' : 'Generate Balance Sheet' }), _jsxs(Button, { variant: "outline", onClick: () => { setBalanceSheet(null); generateBalanceSheet(); }, disabled: isLoading, children: [_jsx(RefreshCw, { className: "mr-2 h-4 w-4" }), "Force Refresh"] }), _jsx(FinancialReportExportDropdown, { reportType: "balance-sheet", reportData: balanceSheet, companyId: selectedCompany, disabled: isLoading })] }), renderBalanceSheet()] }), _jsxs(TabsContent, { value: "profit-loss", className: "space-y-4", children: [_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { onClick: generateProfitAndLoss, disabled: isLoading, children: isLoading ? 'Generating...' : 'Generate Profit & Loss' }), _jsxs(Button, { variant: "outline", onClick: () => { setProfitAndLoss(null); generateProfitAndLoss(); }, disabled: isLoading, children: [_jsx(RefreshCw, { className: "mr-2 h-4 w-4" }), "Force Refresh"] }), _jsx(FinancialReportExportDropdown, { reportType: "profit-loss", reportData: profitAndLoss, companyId: selectedCompany, disabled: isLoading })] }), renderProfitAndLoss()] }), _jsxs(TabsContent, { value: "cash-flow", className: "space-y-4", children: [_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { onClick: generateCashFlow, disabled: isLoading, children: isLoading ? 'Generating...' : 'Generate Cash Flow' }), _jsxs(Button, { variant: "outline", onClick: () => { setCashFlow(null); generateCashFlow(); }, disabled: isLoading, children: [_jsx(RefreshCw, { className: "mr-2 h-4 w-4" }), "Force Refresh"] }), _jsx(FinancialReportExportDropdown, { reportType: "cash-flow", reportData: cashFlow, companyId: selectedCompany, disabled: isLoading })] }), renderCashFlow()] }), _jsxs(TabsContent, { value: "ratios", className: "space-y-4", children: [_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { onClick: generateFinancialRatios, disabled: isLoading, children: isLoading ? 'Calculating...' : 'Calculate Ratios' }), _jsx(FinancialReportExportDropdown, { reportType: "ratios", reportData: financialRatios, companyId: selectedCompany, disabled: isLoading })] }), renderFinancialRatios()] }), _jsx(TabsContent, { value: "custom", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Custom Report Builder" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-center text-gray-500 py-8", children: [_jsx(Settings, { className: "h-12 w-12 mx-auto mb-4 text-gray-400" }), _jsx("p", { children: "Custom report builder coming soon..." }), _jsx("p", { className: "text-sm", children: "Drag-and-drop interface for creating custom financial reports" })] }) })] }) })] })] }));
}
