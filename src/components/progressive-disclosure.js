import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { ChevronDown, ChevronRight, Sparkles, Settings, Eye, EyeOff } from "lucide-react";
import { Button } from "../components/ui/button";
import { Badge } from "../components/ui/badge";
import { cn } from "../lib/utils";
const categoryColors = {
    basic: "bg-green-100 text-green-800 border-green-200",
    intermediate: "bg-amber-100 text-amber-800 border-amber-200",
    advanced: "bg-purple-100 text-purple-800 border-purple-200",
};
const categoryIcons = {
    basic: Sparkles,
    intermediate: Settings,
    advanced: Eye,
};
export function ProgressiveDisclosure({ title, description, features, onFeatureToggle, className }) {
    const [expanded, setExpanded] = useState(false);
    const [showAdvanced, setShowAdvanced] = useState(false);
    const visibleFeatures = showAdvanced
        ? features
        : features.filter(f => f.category !== "advanced");
    const basicFeatures = features.filter(f => f.category === "basic");
    const intermediateFeatures = features.filter(f => f.category === "intermediate");
    const advancedFeatures = features.filter(f => f.category === "advanced");
    return (_jsxs("div", { className: cn("border rounded-lg p-4", className), children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-foreground", children: title }), description && (_jsx("p", { className: "text-sm text-muted-foreground mt-1", children: description }))] }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => setExpanded(!expanded), children: expanded ? (_jsx(ChevronDown, { className: "h-4 w-4" })) : (_jsx(ChevronRight, { className: "h-4 w-4" })) })] }), expanded && (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid gap-4 md:grid-cols-3", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Sparkles, { className: "h-4 w-4 text-green-600" }), _jsx("h4", { className: "font-medium text-sm", children: "Basic Features" }), _jsx(Badge, { variant: "outline", className: "text-xs", children: basicFeatures.length })] }), _jsx("div", { className: "space-y-2", children: basicFeatures.map(feature => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-green-50 border border-green-200 rounded", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(feature.icon, { className: "h-3 w-3 text-green-600" }), _jsx("span", { className: "text-xs", children: feature.name })] }), _jsx(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", onClick: () => onFeatureToggle(feature.id, !feature.enabled), children: feature.enabled ? (_jsx(Eye, { className: "h-3 w-3 text-green-600" })) : (_jsx(EyeOff, { className: "h-3 w-3 text-gray-400" })) })] }, feature.id))) })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "h-4 w-4 text-amber-600" }), _jsx("h4", { className: "font-medium text-sm", children: "Intermediate" }), _jsx(Badge, { variant: "outline", className: "text-xs", children: intermediateFeatures.length })] }), _jsx("div", { className: "space-y-2", children: intermediateFeatures.map(feature => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-amber-50 border border-amber-200 rounded", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(feature.icon, { className: "h-3 w-3 text-amber-600" }), _jsx("span", { className: "text-xs", children: feature.name })] }), _jsx(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", onClick: () => onFeatureToggle(feature.id, !feature.enabled), children: feature.enabled ? (_jsx(Eye, { className: "h-3 w-3 text-amber-600" })) : (_jsx(EyeOff, { className: "h-3 w-3 text-gray-400" })) })] }, feature.id))) })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Eye, { className: "h-4 w-4 text-purple-600" }), _jsx("h4", { className: "font-medium text-sm", children: "Advanced" }), _jsx(Badge, { variant: "outline", className: "text-xs", children: advancedFeatures.length })] }), _jsx("div", { className: "space-y-2", children: advancedFeatures.map(feature => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-purple-50 border border-purple-200 rounded", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(feature.icon, { className: "h-3 w-3 text-purple-600" }), _jsx("span", { className: "text-xs", children: feature.name })] }), _jsx(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", onClick: () => onFeatureToggle(feature.id, !feature.enabled), children: feature.enabled ? (_jsx(Eye, { className: "h-3 w-3 text-purple-600" })) : (_jsx(EyeOff, { className: "h-3 w-3 text-gray-400" })) })] }, feature.id))) })] })] }), advancedFeatures.length > 0 && (_jsxs("div", { className: "flex items-center justify-between pt-2 border-t", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium", children: "Advanced Features" }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Show advanced features for power users" })] }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => setShowAdvanced(!showAdvanced), children: showAdvanced ? "Hide Advanced" : "Show Advanced" })] })), _jsxs("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: [_jsx("h4", { className: "font-medium text-blue-800 mb-2 text-sm", children: "\uD83D\uDCA1 Usage Tips" }), _jsxs("ul", { className: "text-xs text-blue-700 space-y-1", children: [_jsx("li", { children: "\u2022 Start with basic features and gradually enable more as you become comfortable" }), _jsx("li", { children: "\u2022 Advanced features are designed for experienced users" }), _jsx("li", { children: "\u2022 You can toggle features on/off at any time" }), _jsx("li", { children: "\u2022 Disabled features won't appear in the interface" })] })] })] }))] }));
}
