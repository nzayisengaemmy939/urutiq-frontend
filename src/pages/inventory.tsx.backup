import { useState } from 'react'
import QRCode from 'qrcode'
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card"
import { Button } from "../components/ui/button"
import { Input } from "../components/ui/input"
import { Badge } from "../components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "../components/ui/dialog"
import { Label } from "../components/ui/label"
import { Textarea } from "../components/ui/textarea"
import { PageLayout } from "../components/page-layout"
import { useToast } from "../hooks/use-toast"
import { useQuery, useQueryClient } from '@tanstack/react-query'
import { useDemoAuth } from "../hooks/useDemoAuth"
import {
  Plus,
  Search,
  Filter,
  Eye,
  Edit,
  Package,
  AlertTriangle,
  TrendingUp,
  BarChart3,
  MapPin,
  QrCode,
  RefreshCw,
  Settings,
  Bell,
  ArrowRightLeft,
  Calendar,
  DollarSign,
  Activity,
  PieChart,
  Check,
  X,
  ArrowRight,
} from "lucide-react"
import { inventoryApi } from '@/lib/api/inventory'
import { categoriesApi } from '@/lib/api/categories'
import BarcodeScanner from '@/components/barcode-scanner'
import InventoryAnalyticsComponent from '@/components/inventory-analytics'
import BulkOperations from '@/components/bulk-operations'
import InventoryOptimization from '@/components/inventory-optimization'
import DemandForecasting from '@/components/demand-forecasting'

export default function InventoryPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [selectedLocation, setSelectedLocation] = useState('all')
  const [selectedStatus, setSelectedStatus] = useState('all')
  const [selectedPeriod] = useState('30d')
  const [selectedForecastHorizon] = useState('3m')
  const [showAddProductDialog, setShowAddProductDialog] = useState(false)
  const [showEditProductDialog, setShowEditProductDialog] = useState(false)
  const [showViewProductDialog, setShowViewProductDialog] = useState(false)
  const [showAddLocationDialog, setShowAddLocationDialog] = useState(false)
  const [showEditLocationDialog, setShowEditLocationDialog] = useState(false)
  const [showViewLocationDialog, setShowViewLocationDialog] = useState(false)
  const [showNewMovementDialog, setShowNewMovementDialog] = useState(false)
  const [showViewMovementDialog, setShowViewMovementDialog] = useState(false)
  const [showQRCodeDialog, setShowQRCodeDialog] = useState(false)
  const [qrCodeImage, setQrCodeImage] = useState<string>('')
  const [showAddCategoryDialog, setShowAddCategoryDialog] = useState(false)
  const [showEditCategoryDialog, setShowEditCategoryDialog] = useState(false)
  const [showViewCategoriesDialog, setShowViewCategoriesDialog] = useState(false)
  const [selectedCategory_, setSelectedCategory_] = useState<any>(null)
  const [selectedProduct, setSelectedProduct] = useState<any>(null)
  const [selectedLocationForDialog, setSelectedLocationForDialog] = useState<any>(null)
  const [selectedMovement, setSelectedMovement] = useState<any>(null)
  const [newLocation, setNewLocation] = useState({
    name: '',
    code: '',
    address: '',
    city: '',
    state: '',
    country: '',
    contactName: '',
    contactPhone: '',
    contactEmail: ''
  })
  const [newMovement, setNewMovement] = useState({
    productId: '',
    movementType: 'INBOUND' as 'INBOUND' | 'OUTBOUND' | 'TRANSFER_IN' | 'TRANSFER_OUT' | 'ADJUSTMENT_IN' | 'ADJUSTMENT_OUT' | 'RETURN_IN' | 'RETURN_OUT' | 'DAMAGE' | 'THEFT' | 'CYCLE_COUNT',
    quantity: 0,
    movementDate: new Date().toISOString().split('T')[0],
    reference: '',
    reason: '',
    unitCost: 0,
    locationId: ''
  })
  const [newProduct, setNewProduct] = useState({
    name: '',
    sku: '',
    description: '',
    unitPrice: 0,
    costPrice: 0,
    stockQuantity: 0,
    category: '',
    categoryId: '',
    status: 'ACTIVE'
  })
  const [newCategory, setNewCategory] = useState({
    name: '',
    description: '',
    color: '#2563eb',
    icon: 'Package'
  })

  // Alert Settings
  const [showAlertSettingsDialog, setShowAlertSettingsDialog] = useState(false)
  const [alertSettings, setAlertSettings] = useState({
    lowStockThreshold: 5,
    overstockThreshold: 100,
    criticalStockThreshold: 1,
    emailNotifications: true,
    smsNotifications: false,
    dashboardAlerts: true,
    autoAcknowledgeDays: 7,
    dailyDigestTime: '09:00',
    weeklySummaryDay: 'MONDAY',
    weeklySummaryTime: '08:00',
    immediateAlerts: true,
    immediateAlertsCriticalOnly: true
  })

  // Transfer Management
  const [showNewTransferDialog, setShowNewTransferDialog] = useState(false)
  const [showViewTransferDialog, setShowViewTransferDialog] = useState(false)
  const [selectedTransfer, setSelectedTransfer] = useState<any>(null)
  const [newTransfer, setNewTransfer] = useState({
    productId: '',
    fromLocationId: '',
    toLocationId: '',
    quantity: 0,
    transferDate: new Date().toISOString().split('T')[0],
    reference: '',
    notes: '',
    requestedBy: ''
  })

  const { toast } = useToast()
  const queryClient = useQueryClient()

  // Setup demo authentication
  const { ready: authReady } = useDemoAuth('inventory')

  // Get company ID from localStorage or use default
  const getCompanyId = () => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('company_id') || localStorage.getItem('companyId') || 'seed-company-1'
    }
    return 'seed-company-1'
  }

  // Get tenant ID from localStorage or use default
  const getTenantId = () => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('tenant_id') || 'tenant_demo'
    }
    return 'tenant_demo'
  }

  const companyId = getCompanyId()

  // Fetch products with enhanced filtering
  const productsQuery = useQuery({
    queryKey: ['products', searchTerm, selectedCategory, selectedLocation, selectedStatus, companyId],
    queryFn: async () => {
      const result = await inventoryApi.getProducts({
        companyId,
        q: searchTerm || undefined,
        category: selectedCategory || undefined,
        status: selectedStatus || undefined,
        locationId: selectedLocation || undefined,
        page: 1,
        pageSize: 50
      })
      return result
    },
    enabled: true
  })

  // Fetch locations
  const locationsQuery = useQuery({
    queryKey: ['locations', companyId],
    queryFn: async () => {
      return await inventoryApi.getLocations(companyId)
    },
    enabled: true
  })

  // Fetch categories
  const categoriesQuery = useQuery({
    queryKey: ['categories', companyId],
    queryFn: async () => {
      return await categoriesApi.getCategories(companyId)
    },
    enabled: true
  })

  // Fetch movements
  const movementsQuery = useQuery({
    queryKey: ['movements', companyId],
    queryFn: async () => {
      const result = await inventoryApi.getMovements({
        companyId,
        page: 1,
        pageSize: 20
      })
      return result
    },
    enabled: true
  })

  // Fetch alerts
  const alertsQuery = useQuery({
    queryKey: ['alerts', companyId],
    queryFn: async () => {
      return await inventoryApi.getAlerts({ companyId })
    },
    enabled: true
  })

  // Fetch alert settings
  useQuery({
    queryKey: ['alertSettings'],
    queryFn: async () => {
      const settings = await inventoryApi.getAlertSettings()
      setAlertSettings(settings)
      return settings
    },
    enabled: true
  })

  // Fetch transfers
  const transfersQuery = useQuery({
    queryKey: ['transfers', companyId],
    queryFn: async () => {
      return await inventoryApi.getTransfers({ companyId })
    },
    enabled: true
  })
  const transfers = transfersQuery.data || []

  // Fetch analytics
  const analyticsQuery = useQuery({
    queryKey: ['analytics', companyId, selectedPeriod],
    queryFn: async () => {
      return await inventoryApi.getAnalytics({
        companyId,
        period: selectedPeriod
      })
    },
    enabled: true
  })

  // Fetch KPIs
  const kpisQuery = useQuery({
    queryKey: ['kpis', companyId, selectedPeriod],
    queryFn: async () => {
      return await inventoryApi.getKPIs({
        companyId,
        period: selectedPeriod
      })
    },
    enabled: true
  })

  // Fetch AI forecasts
  const forecastsQuery = useQuery({
    queryKey: ['forecasts', companyId, selectedPeriod, selectedForecastHorizon],
    queryFn: async () => {
      return await inventoryApi.getForecasts({
        companyId,
        period: selectedPeriod,
        horizon: selectedForecastHorizon
      })
    },
    enabled: true
  })

  // Fetch AI insights
  const insightsQuery = useQuery({
    queryKey: ['insights', companyId, selectedPeriod],
    queryFn: async () => {

      const result = await inventoryApi.getForecastInsights({
        companyId,
        period: selectedPeriod
      });

      return result;
    },
    enabled: true
  })

  // Fetch AI recommendations
  const recommendationsQuery = useQuery({
    queryKey: ['recommendations', companyId, selectedPeriod],
    queryFn: async () => {
      return await inventoryApi.getAIRecommendations({
        companyId,
        period: selectedPeriod
      })
    },
    enabled: true
  })

  // Show loading state if auth is not ready
  if (!authReady) {
    return (
      <PageLayout>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <RefreshCw className="w-8 h-8 animate-spin mx-auto mb-4" />
            <p className="text-muted-foreground">Loading inventory...</p>
          </div>
        </div>
      </PageLayout>
    )
  }

  const allProducts = productsQuery.data?.items || []
  const locations = locationsQuery.data || []
  const categories = categoriesQuery.data || []
  const movements = movementsQuery.data?.items || []
  const alerts = alertsQuery.data || []
  const analytics = analyticsQuery.data
  const kpis = kpisQuery.data
  const forecasts = forecastsQuery.data || []

  const insights = insightsQuery.data
  const recommendations = recommendationsQuery.data





  // Filter products based on search and filters
  const products = allProducts.filter(product => {
    const matchesSearch = !searchTerm ||
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.sku.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesCategory = selectedCategory === 'all' || product.categoryId === selectedCategory
    const matchesLocation = selectedLocation === 'all' ||
      product.locations?.some(loc => loc.locationId === selectedLocation)
    const matchesStatus = selectedStatus === 'all' || product.status === selectedStatus

    return matchesSearch && matchesCategory && matchesLocation && matchesStatus
  })

  const getStatusBadge = (product: any) => {
    const stock = Number(product.stockQuantity)
    if (stock <= 0) {
      return <Badge variant="destructive">Out of Stock</Badge>
    }
    if (stock <= 10) { // Simplified: low stock if <= 10 units
      return <Badge variant="secondary">Low Stock</Badge>
    }
    if (stock >= 100) { // Simplified: overstock if >= 100 units
      return <Badge variant="outline">Overstock</Badge>
    }
    return <Badge variant="default">In Stock</Badge>
  }

  // Product action handlers
  const handleViewProduct = (product: any) => {
    setSelectedProduct(product)
    setShowViewProductDialog(true)
  }

  const handleEditProduct = (product: any) => {
    setSelectedProduct(product)
    setNewProduct({
      name: product.name,
      sku: product.sku,
      description: product.description || '',
      unitPrice: Number(product.unitPrice),
      costPrice: Number(product.costPrice),
      stockQuantity: Number(product.stockQuantity),
      category: product.category || '',
      categoryId: product.categoryId || '',
      status: product.status
    })
    setShowEditProductDialog(true)
  }

  const generateQRCode = async (product: any) => {
    try {
      const qrData = {
        type: 'product',
        id: product.id,
        sku: product.sku,
        name: product.name,
        url: `${window.location.origin}/products/${product.id}`
      }

      const qrString = JSON.stringify(qrData)
      const qrCodeDataURL = await QRCode.toDataURL(qrString, {
        width: 256,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      })

      setQrCodeImage(qrCodeDataURL)
    } catch (error) {

      toast({
        title: "Error",
        description: "Failed to generate QR code",
        variant: "destructive"
      })
    }
  }

  const handleQRCode = async (product: any) => {
    setSelectedProduct(product)
    setShowQRCodeDialog(true)
    await generateQRCode(product)
  }

  // Location action handlers
  const handleViewLocation = (location: any) => {
    setSelectedLocationForDialog(location)
    setShowViewLocationDialog(true)
  }

  const handleEditLocation = (location: any) => {
    setSelectedLocationForDialog(location)
    setNewLocation({
      name: location.name || '',
      code: location.code || '',
      address: location.address || '',
      city: location.city || '',
      state: location.state || '',
      country: location.country || '',
      contactName: location.contactName || '',
      contactPhone: location.contactPhone || '',
      contactEmail: location.contactEmail || ''
    })
    setShowEditLocationDialog(true)
  }

  // Movement action handlers
  const handleViewMovement = (movement: any) => {
    setSelectedMovement(movement)
    setShowViewMovementDialog(true)
  }

  const handleCreateMovement = async () => {
    try {
      if (!newMovement.productId || !newMovement.quantity) {
        toast({
          title: "Validation Error",
          description: "Product and quantity are required",
          variant: "destructive"
        })
        return
      }

      await inventoryApi.createMovement({
        ...newMovement,
        movementDate: new Date(newMovement.movementDate).toISOString()
      })

      // If a location was selected, create/update product-location association
      if (newMovement.locationId) {
        try {
          await inventoryApi.createProductLocation({
            productId: newMovement.productId,
            locationId: newMovement.locationId,
            quantity: newMovement.quantity
          })
        } catch (locationError) {
         
        }
      }

      toast({
        title: "Success",
        description: "Movement created successfully",
      })

      // Reset form
      setNewMovement({
        productId: '',
        movementType: 'INBOUND' as 'INBOUND' | 'OUTBOUND' | 'TRANSFER_IN' | 'TRANSFER_OUT' | 'ADJUSTMENT_IN' | 'ADJUSTMENT_OUT' | 'RETURN_IN' | 'RETURN_OUT' | 'DAMAGE' | 'THEFT' | 'CYCLE_COUNT',
        quantity: 0,
        movementDate: new Date().toISOString().split('T')[0],
        reference: '',
        reason: '',
        unitCost: 0,
        locationId: ''
      })

      setShowNewMovementDialog(false)

      // Refresh data
      queryClient.invalidateQueries({ queryKey: ['movements'] })
      queryClient.invalidateQueries({ queryKey: ['products'] })
      queryClient.invalidateQueries({ queryKey: ['locations'] })
      queryClient.invalidateQueries({ queryKey: ['analytics'] })
      queryClient.invalidateQueries({ queryKey: ['kpis'] })
    } catch (error) {
     
      toast({
        title: "Error",
        description: "Failed to create movement. Please try again.",
        variant: "destructive"
      })
    }
  }

  // Refresh all data
  const handleRefresh = () => {
    queryClient.invalidateQueries({ queryKey: ['products'] })
    queryClient.invalidateQueries({ queryKey: ['locations'] })
    queryClient.invalidateQueries({ queryKey: ['movements'] })
    queryClient.invalidateQueries({ queryKey: ['alerts'] })
    queryClient.invalidateQueries({ queryKey: ['analytics'] })
    queryClient.invalidateQueries({ queryKey: ['kpis'] })
    queryClient.invalidateQueries({ queryKey: ['forecasts'] })
    queryClient.invalidateQueries({ queryKey: ['insights'] })
    queryClient.invalidateQueries({ queryKey: ['recommendations'] })

    toast({
      title: "Refreshed",
      description: "All data has been refreshed",
    })
  }

  const handleGenerateAlerts = async () => {
    try {
      const result = await inventoryApi.generateAlerts(companyId)
      toast({
        title: "Success",
        description: result.message,
      })
      // Refresh alerts
      queryClient.invalidateQueries({ queryKey: ['alerts'] })
    } catch (error: any) {
     
      toast({
        title: "Error",
        description: error.message || "Failed to generate alerts",
        variant: "destructive"
      })
    }
  }

  const handleAcknowledgeAlert = async (alertId: string) => {
    try {
      await inventoryApi.acknowledgeAlert(alertId)
      toast({
        title: "Success",
        description: "Alert acknowledged",
      })
      // Refresh alerts
      queryClient.invalidateQueries({ queryKey: ['alerts'] })
    } catch (error: any) {
     
      toast({
        title: "Error",
        description: error.message || "Failed to acknowledge alert",
        variant: "destructive"
      })
    }
  }

  const handleDismissAlert = async (alertId: string) => {
    try {
      await inventoryApi.dismissAlert(alertId)
      toast({
        title: "Success",
        description: "Alert dismissed",
      })
      // Refresh alerts
      queryClient.invalidateQueries({ queryKey: ['alerts'] })
    } catch (error: any) {
     
      toast({
        title: "Error",
        description: error.message || "Failed to dismiss alert",
        variant: "destructive"
      })
    }
  }

  const handleSaveAlertSettings = async () => {
    try {
      await inventoryApi.updateAlertSettings(alertSettings)
      toast({
        title: "Success",
        description: "Alert settings saved successfully",
      })
      setShowAlertSettingsDialog(false)
      // Refresh settings
      queryClient.invalidateQueries({ queryKey: ['alertSettings'] })
    } catch (error: any) {
    
      toast({
        title: "Error",
        description: error.message || "Failed to save alert settings",
        variant: "destructive"
      })
    }
  }

  const handleCreateTransfer = async () => {
    try {
      if (!newTransfer.productId || !newTransfer.toLocationId || !newTransfer.quantity) {
        toast({
          title: "Validation Error",
          description: "Product, destination location, and quantity are required",
          variant: "destructive"
        })
        return
      }

      await inventoryApi.createTransfer({
        ...newTransfer,
        transferDate: new Date(newTransfer.transferDate).toISOString()
      })

      toast({
        title: "Success",
        description: "Transfer created successfully",
      })

      // Reset form
      setNewTransfer({
        productId: '',
        fromLocationId: '',
        toLocationId: '',
        quantity: 0,
        transferDate: new Date().toISOString().split('T')[0],
        reference: '',
        notes: '',
        requestedBy: ''
      })

      setShowNewTransferDialog(false)

      // Refresh data
      queryClient.invalidateQueries({ queryKey: ['transfers'] })
      queryClient.invalidateQueries({ queryKey: ['products'] })
      queryClient.invalidateQueries({ queryKey: ['locations'] })
    } catch (error: any) {

      toast({
        title: "Error",
        description: error.message || "Failed to create transfer",
        variant: "destructive"
      })
    }
  }

  const handleUpdateTransferStatus = async (transferId: string, status: string) => {
    try {
      await inventoryApi.updateTransferStatus(transferId, status)
      toast({
        title: "Success",
        description: `Transfer ${status.toLowerCase()} successfully`,
      })
      // Refresh transfers
      queryClient.invalidateQueries({ queryKey: ['transfers'] })
      queryClient.invalidateQueries({ queryKey: ['products'] })
      queryClient.invalidateQueries({ queryKey: ['locations'] })
    } catch (error: any) {
     
      toast({
        title: "Error",
        description: error.message || "Failed to update transfer status",
        variant: "destructive"
      })
    }
  }

  const handleViewTransfer = (transfer: any) => {
    setSelectedTransfer(transfer)
    setShowViewTransferDialog(true)
  }

  const getAlertIcon = (alertType: string) => {
    switch (alertType) {
      case 'LOW_STOCK':
        return <AlertTriangle className="w-4 h-4 text-amber-600" />
      case 'OUT_OF_STOCK':
        return <AlertTriangle className="w-4 h-4 text-red-600" />
      case 'OVERSTOCK':
        return <TrendingUp className="w-4 h-4 text-blue-600" />
      case 'EXPIRING_SOON':
        return <Calendar className="w-4 h-4 text-orange-600" />
      case 'EXPIRED':
        return <Calendar className="w-4 h-4 text-red-600" />
      default:
        return <Bell className="w-4 h-4 text-gray-600" />
    }
  }

  const getTransferStatusBadge = (status: string) => {
    switch (status) {
      case 'PENDING':
        return <Badge variant="secondary">Pending</Badge>
      case 'IN_TRANSIT':
        return <Badge variant="default">In Transit</Badge>
      case 'COMPLETED':
        return <Badge variant="default" className="bg-green-100 text-green-800">Completed</Badge>
      case 'CANCELLED':
        return <Badge variant="destructive">Cancelled</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  const getMovementIcon = (movementType: string) => {
    switch (movementType) {
      case 'INBOUND':
        return <TrendingUp className="w-4 h-4 text-green-600" />
      case 'OUTBOUND':
        return <TrendingUp className="w-4 h-4 text-red-600 rotate-180" />
      case 'TRANSFER_IN':
        return <ArrowRightLeft className="w-4 h-4 text-blue-600" />
      case 'TRANSFER_OUT':
        return <ArrowRightLeft className="w-4 h-4 text-blue-600 rotate-180" />
      case 'ADJUSTMENT_IN':
        return <Plus className="w-4 h-4 text-green-600" />
      case 'ADJUSTMENT_OUT':
        return <Plus className="w-4 h-4 text-red-600 rotate-45" />
      default:
        return <Package className="w-4 h-4 text-gray-600" />
    }
  }


  return (
    <PageLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-balance"> Inventory Management</h1>
            <p className="text-muted-foreground">Advanced inventory tracking with multi-location support, serial numbers, and AI insights</p>
          </div>
          <div className="flex gap-2">
            <BarcodeScanner
              onScan={(barcode) => {
                setSearchTerm(barcode)
                toast({
                  title: "Barcode Scanned",
                  description: `Searching for: ${barcode}`,
                })
              }}
              onProductFound={(product) => {
                toast({
                  title: "Product Found",
                  description: `${product.name} (${product.sku})`,
                })
              }}
            />
            <BulkOperations
              onImport={(data) => {
                toast({
                  title: "Import Successful",
                  description: `Imported ${data.length} items`,
                })
                // Refresh queries
                queryClient.invalidateQueries({ queryKey: ['products'] })
              }}
              onExport={(format) => {
                toast({
                  title: "Export Started",
                  description: `Exporting data in ${format.toUpperCase()} format`,
                })
              }}
            />
            <Button variant="outline" onClick={handleRefresh}>
              <RefreshCw className="w-4 h-4 mr-2" />
              Refresh
            </Button>
            <Button onClick={() => setShowAddProductDialog(true)}>
              <Plus className="w-4 h-4 mr-2" />
              Add Product
            </Button>
          </div>
        </div>


        {/* Analytics Overview */}
        {analyticsQuery.isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1, 2, 3, 4].map((i) => (
              <Card key={i}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                      <RefreshCw className="w-5 h-5 text-gray-400 animate-spin" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Loading...</p>
                      <p className="text-xl font-bold">-</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : analyticsQuery.error ? (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-5 h-5 text-red-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Error loading analytics</p>
                    <p className="text-xl font-bold">-</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : analytics ? (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Package className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Total Products</p>
                    <p className="text-xl font-bold">{analytics?.totalProducts || 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Inventory Value</p>
                    <p className="text-xl font-bold">${(analytics?.totalValue || 0).toLocaleString()}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-5 h-5 text-amber-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Low Stock Items</p>
                    <p className="text-xl font-bold">{analytics?.lowStockItems || 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                    <span className="text-red-600 font-semibold">0</span>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Out of Stock</p>
                    <p className="text-xl font-bold">{analytics?.outOfStockItems || 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    <Package className="w-5 h-5 text-gray-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Total Products</p>
                    <p className="text-xl font-bold">{allProducts.length}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    <MapPin className="w-5 h-5 text-gray-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Locations</p>
                    <p className="text-xl font-bold">{locations.length}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    <ArrowRightLeft className="w-5 h-5 text-gray-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Movements</p>
                    <p className="text-xl font-bold">{movements.length}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    <Bell className="w-5 h-5 text-gray-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Alerts</p>
                    <p className="text-xl font-bold">{alerts.length}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* KPI Cards */}
        {kpisQuery.isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {[1, 2, 3, 4, 5, 6].map((i) => (
              <Card key={i}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                      <RefreshCw className="w-5 h-5 text-gray-400 animate-spin" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Loading...</p>
                      <p className="text-xl font-bold">-</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : kpisQuery.error ? (
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-5 h-5 text-red-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Error loading KPIs</p>
                    <p className="text-xl font-bold">-</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : kpis ? (
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Activity className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Turnover Rate</p>
                    <p className="text-xl font-bold">{kpis?.inventoryTurnover?.toFixed(1) || '0.0'}x</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <Calendar className="w-5 h-5 text-green-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Avg Days in Stock</p>
                    <p className="text-xl font-bold">{kpis?.averageDaysInStock?.toFixed(0) || '0'}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                    <AlertTriangle className="w-5 h-5 text-red-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Stockout Rate</p>
                    <p className="text-xl font-bold">{((kpis?.stockoutRate || 0) * 100).toFixed(1)}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center">
                    <Package className="w-5 h-5 text-amber-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Overstock Rate</p>
                    <p className="text-xl font-bold">{((kpis?.overstockRate || 0) * 100).toFixed(1)}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <BarChart3 className="w-5 h-5 text-purple-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Accuracy Rate</p>
                    <p className="text-xl font-bold">{((kpis?.accuracyRate || 0) * 100).toFixed(1)}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 ">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-cyan-600" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Carrying Cost</p>
                    <p className="text-md font-bold">${kpis?.carryingCost?.toFixed(0) || '0'}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : null}

        {/* Main Content */}
        <Tabs defaultValue="products" className="space-y-4">
          <TabsList className="grid w-full grid-cols-9">
            <TabsTrigger value="products">Products</TabsTrigger>
            <TabsTrigger value="locations">Locations</TabsTrigger>
            <TabsTrigger value="movements">Movements</TabsTrigger>
            <TabsTrigger value="alerts">Alerts</TabsTrigger>
            <TabsTrigger value="transfers">Transfers</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="advanced-analytics">Advanced Analytics</TabsTrigger>
            <TabsTrigger value="optimization">Optimization</TabsTrigger>
            <TabsTrigger value="ai-forecasting">AI Forecasting</TabsTrigger>
          </TabsList>

          <TabsContent value="products" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Product Inventory</CardTitle>
                  <div className="flex gap-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                      <Input
                        placeholder="Search products..."
                        className="pl-10 w-64"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                    </div>
                    <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        {Array.from(new Set(allProducts.map(p => p.category).filter(Boolean))).map(category => (
                          <SelectItem key={category} value={category!}>{category}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Select value={selectedLocation} onValueChange={setSelectedLocation}>
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Location" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Locations</SelectItem>
                        {locations.map(location => (
                          <SelectItem key={location.id} value={location.id}>{location.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="ACTIVE">Active</SelectItem>
                        <SelectItem value="INACTIVE">Inactive</SelectItem>
                        <SelectItem value="DISCONTINUED">Discontinued</SelectItem>
                      </SelectContent>
                    </Select>
                    <Button variant="outline" size="sm">
                      <Filter className="w-4 h-4 mr-2" />
                      Filter
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {productsQuery.isLoading ? (
                    <div className="flex items-center justify-center py-8">
                      <RefreshCw className="h-6 w-6 animate-spin mr-2" />
                      <span className="text-sm text-gray-500">Loading products...</span>
                    </div>
                  ) : productsQuery.error ? (
                    <div className="flex items-center justify-center py-8 text-red-600">
                      <AlertTriangle className="h-6 w-6 mr-2" />
                      <span className="text-sm">Error loading products: {productsQuery.error.message}</span>
                    </div>
                  ) : products.length === 0 ? (
                    <div className="flex items-center justify-center py-8 text-gray-500">
                      <Package className="h-8 w-8 mr-2" />
                      <span className="text-sm">No products found</span>
                    </div>
                  ) : (
                    products.map((product) => (
                      <div
                        key={product.id}
                        className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                            <Package className="w-6 h-6 text-gray-600" />
                          </div>
                          <div>
                            <p className="font-medium">{product.name}</p>
                            <p className="text-sm text-muted-foreground">
                              {product.sku} • {categories.find(c => c.id === product.categoryId)?.name || 'Uncategorized'}
                            </p>
                            <div className="flex items-center gap-2 mt-1">
                              <Badge variant="outline" className="text-xs">
                                {product.type === 'PRODUCT' ? 'Inventory' : 'Non-Inventory'}
                              </Badge>
                              <Badge variant="outline" className="text-xs">
                                {product.status}
                              </Badge>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-6">
                          <div className="text-center">
                            <p className="font-medium">{product.stockQuantity}</p>
                            <p className="text-xs text-muted-foreground">Total Stock</p>
                          </div>
                          <div className="text-center">
                            <p className="font-medium">{Number(product.stockQuantity)}</p>
                            <p className="text-xs text-muted-foreground">Available</p>
                          </div>
                          <div className="text-center">
                            <p className="font-medium">${Number(product.unitPrice).toFixed(2)}</p>
                            <p className="text-xs text-muted-foreground">Unit Price</p>
                          </div>
                          <div className="text-center">
                            <p className="font-medium">${(Number(product.stockQuantity) * Number(product.costPrice)).toFixed(2)}</p>
                            <p className="text-xs text-muted-foreground">Total Value</p>
                          </div>
                          {getStatusBadge(product)}
                          <div className="flex gap-1">
                            <Button variant="ghost" size="sm" onClick={() => handleViewProduct(product)}>
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button variant="ghost" size="sm" onClick={() => handleEditProduct(product)}>
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button variant="ghost" size="sm" onClick={() => handleQRCode(product)}>
                              <QrCode className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Locations Tab */}
          <TabsContent value="locations" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Warehouse Locations</CardTitle>
                  <Button onClick={() => setShowAddLocationDialog(true)}>
                    <Plus className="w-4 h-4 mr-2" />
                    Add Location
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {locations.map((location) => (
                    <div
                      key={location.id}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50"
                    >
                      <div className="flex items-center gap-4">
                        <div className="w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center">
                          <MapPin className="w-5 h-5 text-cyan-600" />
                        </div>
                        <div>
                          <p className="font-medium">{location.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {location.code} • {location.type} • {location.address}
                          </p>
                          {location.isDefault && (
                            <Badge variant="default" className="text-xs mt-1">Default</Badge>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                          <p className="font-medium">{location._count.products}</p>
                          <p className="text-sm text-muted-foreground">Products</p>
                        </div>
                        <div className="text-center">
                          <p className="font-medium">{location._count.movements}</p>
                          <p className="text-sm text-muted-foreground">Movements</p>
                        </div>
                        <div className="flex gap-1">
                          <Button variant="ghost" size="sm" onClick={() => handleViewLocation(location)}>
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm" onClick={() => handleEditLocation(location)}>
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Movements Tab */}
          <TabsContent value="movements" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Inventory Movements</CardTitle>
                  <Button onClick={() => setShowNewMovementDialog(true)}>
                    <Plus className="w-4 h-4 mr-2" />
                    New Movement
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {movements.map((movement) => (
                    <div
                      key={movement.id}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50"
                    >
                      <div className="flex items-center gap-4">
                        <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                          {getMovementIcon(movement.movementType)}
                        </div>
                        <div>
                          <p className="font-medium">{movement.product.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {movement.product.sku} • {movement.movementType.replace('_', ' ')}
                          </p>
                          {movement.reason && (
                            <p className="text-xs text-muted-foreground mt-1">{movement.reason}</p>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                          <p className={`font-medium ${movement.quantity > 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {movement.quantity > 0 ? '+' : ''}{movement.quantity}
                          </p>
                          <p className="text-xs text-muted-foreground">Quantity</p>
                        </div>
                        {movement.unitCost && (
                          <div className="text-center">
                            <p className="font-medium">${Number(movement.unitCost || 0).toFixed(2)}</p>
                            <p className="text-xs text-muted-foreground">Unit Cost</p>
                          </div>
                        )}
                        <div className="text-center">
                          <p className="font-medium">{new Date(movement.movementDate).toLocaleDateString()}</p>
                          <p className="text-xs text-muted-foreground">Date</p>
                        </div>
                        {movement.location && (
                          <div className="text-center">
                            <p className="font-medium">{movement.location.name}</p>
                            <p className="text-xs text-muted-foreground">Location</p>
                          </div>
                        )}
                        <Button variant="ghost" size="sm" onClick={() => handleViewMovement(movement)}>
                          <Eye className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Alerts Tab */}
          <TabsContent value="alerts" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Inventory Alerts</CardTitle>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={handleGenerateAlerts}
                      disabled={alertsQuery.isLoading}
                    >
                      <RefreshCw className={`w-4 h-4 mr-2 ${alertsQuery.isLoading ? 'animate-spin' : ''}`} />
                      Generate Alerts
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => setShowAlertSettingsDialog(true)}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Alert Settings
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {alertsQuery.isLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                    <span className="text-sm text-muted-foreground">Loading alerts...</span>
                  </div>
                ) : alerts.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    <Bell className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p className="text-lg font-medium">No alerts found</p>
                    <p className="text-sm">Generate alerts to see inventory warnings and recommendations</p>
                    <Button
                      className="mt-4"
                      onClick={handleGenerateAlerts}
                      disabled={alertsQuery.isLoading}
                    >
                      <RefreshCw className={`w-4 h-4 mr-2 ${alertsQuery.isLoading ? 'animate-spin' : ''}`} />
                      Generate Alerts
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {alerts.map((alert) => (
                      <div
                        key={alert.id}
                        className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                            {getAlertIcon(alert.alertType)}
                          </div>
                          <div>
                            <p className="font-medium">{alert.product.name}</p>
                            <p className="text-sm text-muted-foreground">
                              {alert.product.sku} • {alert.alertType.replace('_', ' ')}
                            </p>
                            <p className="text-xs text-muted-foreground mt-1">
                              Current: {alert.product.stockQuantity} • Threshold: {alert.threshold}
                            </p>
                            {alert.message && (
                              <p className="text-xs text-muted-foreground mt-1 italic">
                                {alert.message}
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center gap-4">
                          <Badge
                            variant={
                              alert.status === 'PENDING' ? 'destructive' :
                                alert.status === 'ACKNOWLEDGED' ? 'secondary' :
                                  'default'
                            }
                          >
                            {alert.status}
                          </Badge>
                          {alert.location && (
                            <div className="text-center">
                              <p className="font-medium">{alert.location.name}</p>
                              <p className="text-xs text-muted-foreground">Location</p>
                            </div>
                          )}
                          <div className="flex gap-1">
                            {alert.status === 'PENDING' && (
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleAcknowledgeAlert(alert.id)}
                              >
                                <Check className="w-4 h-4" />
                              </Button>
                            )}
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDismissAlert(alert.id)}
                            >
                              <X className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Transfers Tab */}
          <TabsContent value="transfers" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Inventory Transfers</CardTitle>
                  <Button onClick={() => setShowNewTransferDialog(true)}>
                    <Plus className="w-4 h-4 mr-2" />
                    New Transfer
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {transfersQuery.isLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                    <span className="text-sm text-muted-foreground">Loading transfers...</span>
                  </div>
                ) : transfers.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    <ArrowRightLeft className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p className="text-lg font-medium">No transfers found</p>
                    <p className="text-sm">Create your first inventory transfer between locations</p>
                    <Button
                      className="mt-4"
                      onClick={() => setShowNewTransferDialog(true)}
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      New Transfer
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {transfers.map((transfer) => (
                      <div
                        key={transfer.id}
                        className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                            <ArrowRightLeft className="w-4 h-4 text-blue-600" />
                          </div>
                          <div>
                            <p className="font-medium">{transfer.product.name}</p>
                            <p className="text-sm text-muted-foreground">
                              {transfer.product.sku} • {transfer.quantity} units
                            </p>
                            <p className="text-xs text-muted-foreground mt-1">
                              {transfer.fromLocation ?
                                `${transfer.fromLocation.name} → ${transfer.toLocation.name}` :
                                `→ ${transfer.toLocation.name}`
                              }
                            </p>
                            {transfer.reference && (
                              <p className="text-xs text-muted-foreground mt-1">
                                Ref: {transfer.reference}
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center gap-4">
                          {getTransferStatusBadge(transfer.status)}
                          <div className="text-right">
                            <p className="text-sm font-medium">
                              {new Date(transfer.transferDate).toLocaleDateString()}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {transfer.requestedBy && `by ${transfer.requestedBy}`}
                            </p>
                          </div>
                          <div className="flex gap-1">
                            {transfer.status === 'PENDING' && (
                              <>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleUpdateTransferStatus(transfer.id, 'IN_TRANSIT')}
                                >
                                  <ArrowRight className="w-4 h-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleUpdateTransferStatus(transfer.id, 'CANCELLED')}
                                >
                                  <X className="w-4 h-4" />
                                </Button>
                              </>
                            )}
                            {transfer.status === 'IN_TRANSIT' && (
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleUpdateTransferStatus(transfer.id, 'COMPLETED')}
                              >
                                <Check className="w-4 h-4" />
                              </Button>
                            )}
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleViewTransfer(transfer)}
                            >
                              <Eye className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Top Products by Value
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {(analytics?.topProducts || []).slice(0, 5).map((product, index) => (
                      <div key={product.id} className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                            <span className="text-sm font-medium text-blue-600">{index + 1}</span>
                          </div>
                          <div>
                            <p className="font-medium">{product.name}</p>
                            <p className="text-sm text-muted-foreground">{product.sku}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">${(Number(product.stockQuantity) * Number(product.costPrice)).toFixed(2)}</p>
                          <p className="text-sm text-muted-foreground">{Number(product.stockQuantity)} units</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Category Breakdown
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {(analytics?.categoryBreakdown || []).map((category) => (
                      <div key={category.category} className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">{category.category || 'Uncategorized'}</p>
                          <p className="text-sm text-muted-foreground">{category._count.category} products</p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">{category._sum.stockQuantity || 0}</p>
                          <p className="text-sm text-muted-foreground">units</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Advanced Analytics Tab */}
          <TabsContent value="advanced-analytics" className="space-y-4">
            <InventoryAnalyticsComponent
              products={allProducts}
              movements={movements}
              locations={locations}
              alerts={alerts}
              analytics={analytics}
              kpis={kpis}
              onRefresh={() => {
                queryClient.invalidateQueries({ queryKey: ['products'] })
                queryClient.invalidateQueries({ queryKey: ['movements'] })
                queryClient.invalidateQueries({ queryKey: ['analytics'] })
              }}
            />
          </TabsContent>

          {/* Optimization Tab */}
          <TabsContent value="optimization" className="space-y-4">
            <InventoryOptimization
              products={allProducts}
              movements={movements}
              locations={locations}
              alerts={alerts}
              analytics={analytics}
              kpis={kpis}
              onApplyRecommendation={(recommendation) => {
                toast({
                  title: "Recommendation Applied",
                  description: recommendation.title,
                })
              }}
              onRefresh={() => {
                queryClient.invalidateQueries({ queryKey: ['products'] })
                queryClient.invalidateQueries({ queryKey: ['analytics'] })
                queryClient.invalidateQueries({ queryKey: ['kpis'] })
              }}
            />
          </TabsContent>

          {/* AI Forecasting Tab */}
          <TabsContent value="ai-forecasting" className="space-y-4">
            <DemandForecasting
              forecasts={forecasts || []}
              insights={insights || {}}
              recommendations={Array.isArray(recommendations) ? recommendations : []}
              products={allProducts}
              movements={movements}
              alerts={alerts}
              onRefresh={() => {
                queryClient.invalidateQueries({ queryKey: ['forecasts'] })
                queryClient.invalidateQueries({ queryKey: ['insights'] })
                queryClient.invalidateQueries({ queryKey: ['recommendations'] })
                queryClient.invalidateQueries({ queryKey: ['alerts'] })
              }}
            />
          </TabsContent>
        </Tabs>

        {/* Add Product Dialog */}
        <Dialog open={showAddProductDialog} onOpenChange={setShowAddProductDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Add New Product</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Product Name *</Label>
                  <Input
                    id="name"
                    value={newProduct.name}
                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                    placeholder="Enter product name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="sku">SKU *</Label>
                  <Input
                    id="sku"
                    value={newProduct.sku}
                    onChange={(e) => setNewProduct({ ...newProduct, sku: e.target.value })}
                    placeholder="Enter SKU"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={newProduct.description}
                  onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                  placeholder="Enter product description"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="unitPrice">Unit Price *</Label>
                  <Input
                    id="unitPrice"
                    type="number"
                    value={newProduct.unitPrice}
                    onChange={(e) => setNewProduct({ ...newProduct, unitPrice: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="costPrice">Cost Price *</Label>
                  <Input
                    id="costPrice"
                    type="number"
                    value={newProduct.costPrice}
                    onChange={(e) => setNewProduct({ ...newProduct, costPrice: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="stockQuantity">Initial Stock</Label>
                  <Input
                    id="stockQuantity"
                    type="number"
                    value={newProduct.stockQuantity}
                    onChange={(e) => setNewProduct({ ...newProduct, stockQuantity: parseFloat(e.target.value) || 0 })}
                    placeholder="0"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="category">Category</Label>
                  <Select
                    value={newProduct.categoryId || ''}
                    onValueChange={(value) => setNewProduct({ ...newProduct, categoryId: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category.id} value={category.id}>
                          {category.name}
                        </SelectItem>
                      ))}
                      <div className="border-t mt-2 pt-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="w-full justify-start"
                          onClick={(e) => {
                            e.preventDefault()
                            setShowAddCategoryDialog(true)
                          }}
                        >
                          <Plus className="w-4 h-4 mr-2" />
                          Create New Category
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="w-full justify-start mt-1"
                          onClick={(e) => {
                            e.preventDefault()
                            setShowViewCategoriesDialog(true)
                          }}
                        >
                          <Eye className="w-4 h-4 mr-2" />
                          Manage Categories
                        </Button>
                      </div>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Status</Label>
                  <Select value={newProduct.status} onValueChange={(value) => setNewProduct({ ...newProduct, status: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a status" />
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ACTIVE">Active</SelectItem>
                      <SelectItem value="INACTIVE">Inactive</SelectItem>
                      <SelectItem value="DISCONTINUED">Discontinued</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowAddProductDialog(false)}>
                Cancel
              </Button>
              <Button
                disabled={
                  !newProduct.name?.trim() ||
                  !newProduct.sku?.trim() ||
                  newProduct.unitPrice <= 0 ||
                  newProduct.costPrice < 0 ||
                  newProduct.stockQuantity < 0 ||
                  !newProduct.status?.trim()
                }
                onClick={async () => {
                  try {
                    // Comprehensive validation with specific error messages
                    if (!newProduct.name?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "Product name is required",
                        variant: "destructive"
                      })
                      return
                    }

                    if (!newProduct.sku?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "SKU is required",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.unitPrice <= 0) {
                      toast({
                        title: "Validation Error",
                        description: "Unit price must be greater than 0",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.costPrice < 0) {
                      toast({
                        title: "Validation Error",
                        description: "Cost price cannot be negative",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.stockQuantity < 0) {
                      toast({
                        title: "Validation Error",
                        description: "Stock quantity cannot be negative",
                        variant: "destructive"
                      })
                      return
                    }

                    if (!newProduct.status?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "Product status is required",
                        variant: "destructive"
                      })
                      return
                    }

                    if (!newProduct.categoryId || newProduct.categoryId === '') {
                      toast({
                        title: "Validation Warning",
                        description: "No category selected. Product will be marked as uncategorized.",
                        variant: "default"
                      })
                    }

                    await inventoryApi.createProduct({
                      ...newProduct,
                      companyId: companyId,
                      type: 'PRODUCT',
                      unitPrice: newProduct.unitPrice,
                      costPrice: newProduct.costPrice,
                      stockQuantity: newProduct.stockQuantity,
                      availableQuantity: newProduct.stockQuantity,
                      reservedQuantity: 0,
                      trackSerialNumbers: false,
                      trackBatches: false,
                      costingMethod: 'WEIGHTED_AVERAGE',
                      taxExempt: false,
                      status: newProduct.status as 'ACTIVE' | 'INACTIVE' | 'DISCONTINUED'
                    })

                    toast({
                      title: "Success",
                      description: "Product created successfully",
                    })

                    // Reset form
                    setNewProduct({
                      name: '',
                      sku: '',
                      description: '',
                      unitPrice: 0,
                      costPrice: 0,
                      stockQuantity: 0,
                      category: '',
                      categoryId: '',
                      status: 'ACTIVE'
                    })

                    setShowAddProductDialog(false)

                    // Refresh products list
                    queryClient.invalidateQueries({ queryKey: ['products'] })
                    queryClient.invalidateQueries({ queryKey: ['categories'] })
                    queryClient.invalidateQueries({ queryKey: ['analytics'] })
                    queryClient.invalidateQueries({ queryKey: ['kpis'] })
                  } catch (error: any) {
                    console.error('Error creating product:', error);
                    
                    // Default error message
                    let errorMessage = "Failed to create product. Please try again.";
                    
                    // Log the full error for debugging
                    console.log('Full error object:', {
                      status: error?.response?.status,
                      data: error?.response?.data,
                      message: error?.message,
                      stack: error?.stack
                    });
                    
                    // Handle 409 Conflict (duplicate SKU)
                    if (error?.response?.status === 409 || error?.message?.includes('409')) {
                      errorMessage = `A product with SKU "${newProduct.sku}" already exists. Please use a different SKU.`;
                    } 
                    // Handle 400 Bad Request
                    else if (error?.response?.status === 400 || error?.message?.includes('400')) {
                      errorMessage = "Invalid product data. Please check your inputs and try again.";
                    }
                    // Handle other errors
                    else if (error?.message) {
                      errorMessage = error.message;
                    }
                    
                    toast({
                      title: "Error Creating Product",
                      description: errorMessage,
                      variant: "destructive"
                    })
                  }
                }}>
                Create Product
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* View Product Dialog */}
        <Dialog open={showViewProductDialog} onOpenChange={setShowViewProductDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Product Details</DialogTitle>
            </DialogHeader>
            {selectedProduct && (
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Product Name</Label>
                    <p className="text-sm text-muted-foreground">{selectedProduct.name}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">SKU</Label>
                    <p className="text-sm text-muted-foreground">{selectedProduct.sku}</p>
                  </div>
                </div>

                <div>
                  <Label className="text-sm font-medium">Description</Label>
                  <p className="text-sm text-muted-foreground">{selectedProduct.description || 'No description'}</p>
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Unit Price</Label>
                    <p className="text-sm text-muted-foreground">${Number(selectedProduct.unitPrice).toFixed(2)}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Cost Price</Label>
                    <p className="text-sm text-muted-foreground">${Number(selectedProduct.costPrice).toFixed(2)}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Stock Quantity</Label>
                    <p className="text-sm text-muted-foreground">{Number(selectedProduct.stockQuantity)}</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Category</Label>
                    <p className="text-sm text-muted-foreground">{categories.find(c => c.id === selectedProduct.categoryId)?.name || 'Uncategorized'}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Status</Label>
                    <p className="text-sm text-muted-foreground">{selectedProduct.status}</p>
                  </div>
                </div>

                <div>
                  <Label className="text-sm font-medium">Total Value</Label>
                  <p className="text-sm text-muted-foreground">
                    ${(Number(selectedProduct.stockQuantity) * Number(selectedProduct.costPrice)).toFixed(2)}
                  </p>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowViewProductDialog(false)}>
                Close
              </Button>
              <Button onClick={() => {
                setShowViewProductDialog(false)
                handleEditProduct(selectedProduct)
              }}>
                Edit Product
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Edit Product Dialog */}
        <Dialog open={showEditProductDialog} onOpenChange={setShowEditProductDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Edit Product</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-name">Product Name *</Label>
                  <Input
                    id="edit-name"
                    value={newProduct.name}
                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                    placeholder="Enter product name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-sku">SKU *</Label>
                  <Input
                    id="edit-sku"
                    value={newProduct.sku}
                    onChange={(e) => setNewProduct({ ...newProduct, sku: e.target.value })}
                    placeholder="Enter SKU"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="edit-description">Description</Label>
                <Textarea
                  id="edit-description"
                  value={newProduct.description}
                  onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                  placeholder="Enter product description"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-unitPrice">Unit Price *</Label>
                  <Input
                    id="edit-unitPrice"
                    type="number"
                    value={newProduct.unitPrice}
                    onChange={(e) => setNewProduct({ ...newProduct, unitPrice: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-costPrice">Cost Price *</Label>
                  <Input
                    id="edit-costPrice"
                    type="number"
                    value={newProduct.costPrice}
                    onChange={(e) => setNewProduct({ ...newProduct, costPrice: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-stockQuantity">Stock Quantity</Label>
                  <Input
                    id="edit-stockQuantity"
                    type="number"
                    value={newProduct.stockQuantity}
                    onChange={(e) => setNewProduct({ ...newProduct, stockQuantity: parseFloat(e.target.value) || 0 })}
                    placeholder="0"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-category">Category</Label>
                  <Select
                    value={newProduct.categoryId || ''}
                    onValueChange={(value) => setNewProduct({ ...newProduct, categoryId: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category.id} value={category.id}>
                          {category.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-status">Status</Label>
                  <Select value={newProduct.status} onValueChange={(value) => setNewProduct({ ...newProduct, status: value })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ACTIVE">Active</SelectItem>
                      <SelectItem value="INACTIVE">Inactive</SelectItem>
                      <SelectItem value="DISCONTINUED">Discontinued</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowEditProductDialog(false)}>
                Cancel
              </Button>
              <Button
                disabled={
                  !newProduct.name?.trim() ||
                  !newProduct.sku?.trim() ||
                  newProduct.unitPrice <= 0 ||
                  newProduct.costPrice < 0 ||
                  newProduct.stockQuantity < 0 ||
                  !newProduct.status?.trim()
                }
                onClick={async () => {
                  try {
                    // Comprehensive validation with specific error messages
                    if (!newProduct.name?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "Product name is required",
                        variant: "destructive"
                      })
                      return
                    }

                    if (!newProduct.sku?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "SKU is required",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.unitPrice <= 0) {
                      toast({
                        title: "Validation Error",
                        description: "Unit price must be greater than 0",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.costPrice < 0) {
                      toast({
                        title: "Validation Error",
                        description: "Cost price cannot be negative",
                        variant: "destructive"
                      })
                      return
                    }

                    if (newProduct.stockQuantity < 0) {
                      toast({
                        title: "Validation Error",
                        description: "Stock quantity cannot be negative",
                        variant: "destructive"
                      })
                      return
                    }

                    if (!newProduct.status?.trim()) {
                      toast({
                        title: "Validation Error",
                        description: "Product status is required",
                        variant: "destructive"
                      })
                      return
                    }

                    await inventoryApi.updateProduct(selectedProduct.id, {
                      ...newProduct,
                      unitPrice: newProduct.unitPrice,
                      costPrice: newProduct.costPrice,
                      stockQuantity: newProduct.stockQuantity,
                      status: newProduct.status as 'ACTIVE' | 'INACTIVE' | 'DISCONTINUED'
                    })

                    toast({
                      title: "Success",
                      description: "Product updated successfully",
                    })

                    setShowEditProductDialog(false)

                    queryClient.invalidateQueries({ queryKey: ['products'] })
                    queryClient.invalidateQueries({ queryKey: ['categories'] })
                    queryClient.invalidateQueries({ queryKey: ['analytics'] })
                    queryClient.invalidateQueries({ queryKey: ['kpis'] })
                  } catch (error: any) {
         


                    let errorMessage = "Failed to update product. Please try again."


                    if (error?.response?.status === 409) {

                      errorMessage = `SKU "${newProduct.sku}" already exists for this company. Please use a different SKU.`
                    } else if (error?.response?.status === 400) {
                      errorMessage = "Invalid product data. Please check your inputs."
                    } else {

                      const backendError = error?.response?.data?.error ||
                        error?.response?.data?.message ||
                        error?.response?.statusText ||
                        error?.message

                      if (backendError && backendError !== "Conflict" && backendError !== "Bad Request" && backendError.length > 10) {
                        errorMessage = backendError
                      }
                    }

                    toast({
                      title: "Error Updating Product",
                      description: errorMessage,
                      variant: "destructive"
                    })
                  }
                }}>
                Update Product
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Add Location Dialog */}
        <Dialog open={showAddLocationDialog} onOpenChange={setShowAddLocationDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Add New Location</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="location-name">Location Name *</Label>
                  <Input
                    id="location-name"
                    value={newLocation.name}
                    onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}
                    placeholder="Enter location name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location-code">Location Code</Label>
                  <Input
                    id="location-code"
                    value={newLocation.code}
                    onChange={(e) => setNewLocation({ ...newLocation, code: e.target.value })}
                    placeholder="Enter location code (optional)"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="location-address">Address</Label>
                <Input
                  id="location-address"
                  value={newLocation.address}
                  onChange={(e) => setNewLocation({ ...newLocation, address: e.target.value })}
                  placeholder="Enter address"
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="location-city">City</Label>
                  <Input
                    id="location-city"
                    value={newLocation.city}
                    onChange={(e) => setNewLocation({ ...newLocation, city: e.target.value })}
                    placeholder="Enter city"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location-state">State/Province</Label>
                  <Input
                    id="location-state"
                    value={newLocation.state}
                    onChange={(e) => setNewLocation({ ...newLocation, state: e.target.value })}
                    placeholder="Enter state"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location-country">Country</Label>
                  <Input
                    id="location-country"
                    value={newLocation.country}
                    onChange={(e) => setNewLocation({ ...newLocation, country: e.target.value })}
                    placeholder="Enter country"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">Contact Information (Optional)</Label>
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="location-contact-name">Contact Name</Label>
                    <Input
                      id="location-contact-name"
                      value={newLocation.contactName}
                      onChange={(e) => setNewLocation({ ...newLocation, contactName: e.target.value })}
                      placeholder="Enter contact name"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="location-contact-phone">Phone</Label>
                    <Input
                      id="location-contact-phone"
                      value={newLocation.contactPhone}
                      onChange={(e) => setNewLocation({ ...newLocation, contactPhone: e.target.value })}
                      placeholder="Enter phone number"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="location-contact-email">Email</Label>
                    <Input
                      id="location-contact-email"
                      type="email"
                      value={newLocation.contactEmail}
                      onChange={(e) => setNewLocation({ ...newLocation, contactEmail: e.target.value })}
                      placeholder="Enter email"
                    />
                  </div>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowAddLocationDialog(false)}>
                Cancel
              </Button>
              <Button onClick={async () => {
                try {
                  if (!newLocation.name) {
                    toast({
                      title: "Validation Error",
                      description: "Location name is required",
                      variant: "destructive"
                    })
                    return
                  }

                  await inventoryApi.createLocation({
                    ...newLocation,
                    companyId: companyId,
                    tenantId: getTenantId()
                  })

                  toast({
                    title: "Success",
                    description: "Location created successfully",
                  })

                  // Reset form
                  setNewLocation({
                    name: '',
                    code: '',
                    address: '',
                    city: '',
                    state: '',
                    country: '',
                    contactName: '',
                    contactPhone: '',
                    contactEmail: ''
                  })

                  setShowAddLocationDialog(false)

                  // Refresh locations list
                  queryClient.invalidateQueries({ queryKey: ['locations'] })
                } catch (error) {

                  toast({
                    title: "Error",
                    description: "Failed to create location. Please try again.",
                    variant: "destructive"
                  })
                }
              }}>
                Create Location
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* View Location Dialog */}
        <Dialog open={showViewLocationDialog} onOpenChange={setShowViewLocationDialog}>
          <DialogContent className="max-w-3xl">
            <DialogHeader>
              <DialogTitle>Location Details</DialogTitle>
            </DialogHeader>
            {selectedLocationForDialog && (
              <div className="space-y-6 py-4">
                <div className="grid grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Location Name</Label>
                      <p className="text-lg font-semibold">{selectedLocationForDialog.name}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Code</Label>
                      <p className="text-sm">{selectedLocationForDialog.code}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Type</Label>
                      <Badge variant="outline" className="mt-1">
                        {selectedLocationForDialog.type}
                      </Badge>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Address</Label>
                      <p className="text-sm">{selectedLocationForDialog.address || 'No address provided'}</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">City</Label>
                      <p className="text-sm">{selectedLocationForDialog.city || 'Not specified'}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">State/Province</Label>
                      <p className="text-sm">{selectedLocationForDialog.state || 'Not specified'}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Country</Label>
                      <p className="text-sm">{selectedLocationForDialog.country || 'Not specified'}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Status</Label>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant={selectedLocationForDialog.isActive ? "default" : "secondary"}>
                          {selectedLocationForDialog.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                        {selectedLocationForDialog.isDefault && (
                          <Badge variant="outline">Default Location</Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {selectedLocationForDialog.contactName && (
                  <div className="border-t pt-4">
                    <Label className="text-sm font-medium text-gray-500 mb-3 block">Contact Information</Label>
                    <div className="space-y-4">
                      <div>
                        <Label className="text-xs text-gray-500">Contact Name</Label>
                        <p className="text-sm break-words">{selectedLocationForDialog.contactName}</p>
                      </div>
                      <div>
                        <Label className="text-xs text-gray-500">Phone</Label>
                        <p className="text-sm break-words">{selectedLocationForDialog.contactPhone || 'Not provided'}</p>
                      </div>
                      <div>
                        <Label className="text-xs text-gray-500">Email</Label>
                        <p className="text-sm break-words overflow-wrap-anywhere">{selectedLocationForDialog.contactEmail || 'Not provided'}</p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="border-t pt-4">
                  <Label className="text-sm font-medium text-gray-500 mb-3 block">Statistics</Label>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-3 bg-gray-50 rounded-lg">
                      <p className="text-2xl font-bold text-blue-600">{selectedLocationForDialog._count?.products || 0}</p>
                      <p className="text-sm text-gray-500">Products</p>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded-lg">
                      <p className="text-2xl font-bold text-green-600">{selectedLocationForDialog._count?.movements || 0}</p>
                      <p className="text-sm text-gray-500">Movements</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowViewLocationDialog(false)}>
                Close
              </Button>
              <Button onClick={() => {
                setShowViewLocationDialog(false)
                handleEditLocation(selectedLocation)
              }}>
                Edit Location
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Edit Location Dialog */}
        <Dialog open={showEditLocationDialog} onOpenChange={setShowEditLocationDialog}>
          <DialogContent className="max-w-3xl">
            <DialogHeader>
              <DialogTitle>Edit Location</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-location-name">Location Name *</Label>
                  <Input
                    id="edit-location-name"
                    value={newLocation.name}
                    onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}
                    placeholder="Enter location name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-location-code">Location Code</Label>
                  <Input
                    id="edit-location-code"
                    value={newLocation.code}
                    onChange={(e) => setNewLocation({ ...newLocation, code: e.target.value })}
                    placeholder="Enter location code"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="edit-location-address">Address</Label>
                <Input
                  id="edit-location-address"
                  value={newLocation.address}
                  onChange={(e) => setNewLocation({ ...newLocation, address: e.target.value })}
                  placeholder="Enter address"
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-location-city">City</Label>
                  <Input
                    id="edit-location-city"
                    value={newLocation.city}
                    onChange={(e) => setNewLocation({ ...newLocation, city: e.target.value })}
                    placeholder="Enter city"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-location-state">State/Province</Label>
                  <Input
                    id="edit-location-state"
                    value={newLocation.state}
                    onChange={(e) => setNewLocation({ ...newLocation, state: e.target.value })}
                    placeholder="Enter state"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-location-country">Country</Label>
                  <Input
                    id="edit-location-country"
                    value={newLocation.country}
                    onChange={(e) => setNewLocation({ ...newLocation, country: e.target.value })}
                    placeholder="Enter country"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">Contact Information (Optional)</Label>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="edit-location-contact-name">Contact Name</Label>
                    <Input
                      id="edit-location-contact-name"
                      value={newLocation.contactName}
                      onChange={(e) => setNewLocation({ ...newLocation, contactName: e.target.value })}
                      placeholder="Enter contact name"
                      className="w-full"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-location-contact-phone">Phone</Label>
                    <Input
                      id="edit-location-contact-phone"
                      value={newLocation.contactPhone}
                      onChange={(e) => setNewLocation({ ...newLocation, contactPhone: e.target.value })}
                      placeholder="Enter phone number"
                      className="w-full"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-location-contact-email">Email</Label>
                    <Input
                      id="edit-location-contact-email"
                      type="email"
                      value={newLocation.contactEmail}
                      onChange={(e) => setNewLocation({ ...newLocation, contactEmail: e.target.value })}
                      placeholder="Enter email"
                      className="w-full"
                    />
                  </div>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowEditLocationDialog(false)}>
                Cancel
              </Button>
              <Button onClick={async () => {
                try {
                  if (!newLocation.name) {
                    toast({
                      title: "Validation Error",
                      description: "Location name is required",
                      variant: "destructive"
                    })
                    return
                  }

                  await inventoryApi.updateLocation(selectedLocationForDialog.id, {
                    ...newLocation,
                    companyId: companyId,
                    tenantId: getTenantId()
                  })

                  toast({
                    title: "Success",
                    description: "Location updated successfully",
                  })

                  setShowEditLocationDialog(false)

                  // Refresh locations list
                  queryClient.invalidateQueries({ queryKey: ['locations'] })
                } catch (error) {

                  toast({
                    title: "Error",
                    description: "Failed to update location. Please try again.",
                    variant: "destructive"
                  })
                }
              }}>
                Update Location
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* New Movement Dialog */}
        <Dialog open={showNewMovementDialog} onOpenChange={setShowNewMovementDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Create New Movement</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="movement-product">Product *</Label>
                  <Select value={newMovement.productId} onValueChange={(value) => setNewMovement({ ...newMovement, productId: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a product" />
                    </SelectTrigger>
                    <SelectContent>
                      {allProducts.map((product) => (
                        <SelectItem key={product.id} value={product.id}>
                          {product.name} ({product.sku})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="movement-type">Movement Type *</Label>
                  <Select value={newMovement.movementType} onValueChange={(value) => setNewMovement({ ...newMovement, movementType: value as any })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="INBOUND">Inbound (Stock In)</SelectItem>
                      <SelectItem value="OUTBOUND">Outbound (Stock Out)</SelectItem>
                      <SelectItem value="TRANSFER_IN">Transfer In</SelectItem>
                      <SelectItem value="TRANSFER_OUT">Transfer Out</SelectItem>
                      <SelectItem value="ADJUSTMENT_IN">Adjustment In</SelectItem>
                      <SelectItem value="ADJUSTMENT_OUT">Adjustment Out</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="movement-quantity">Quantity *</Label>
                  <Input
                    id="movement-quantity"
                    type="number"
                    value={newMovement.quantity}
                    onChange={(e) => setNewMovement({ ...newMovement, quantity: parseFloat(e.target.value) || 0 })}
                    placeholder="Enter quantity"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="movement-date">Movement Date *</Label>
                  <Input
                    id="movement-date"
                    type="date"
                    value={newMovement.movementDate}
                    onChange={(e) => setNewMovement({ ...newMovement, movementDate: e.target.value })}
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="movement-reference">Reference</Label>
                  <Input
                    id="movement-reference"
                    value={newMovement.reference}
                    onChange={(e) => setNewMovement({ ...newMovement, reference: e.target.value })}
                    placeholder="PO, Invoice, etc."
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="movement-unit-cost">Unit Cost</Label>
                  <Input
                    id="movement-unit-cost"
                    type="number"
                    step="0.01"
                    value={newMovement.unitCost}
                    onChange={(e) => setNewMovement({ ...newMovement, unitCost: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="movement-location">Location</Label>
                <Select value={newMovement.locationId} onValueChange={(value) => setNewMovement({ ...newMovement, locationId: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a location (optional)" />
                  </SelectTrigger>
                  <SelectContent>
                    {locations.map((location) => (
                      <SelectItem key={location.id} value={location.id}>
                        {location.name} ({location.code})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="movement-reason">Reason/Notes</Label>
                <Textarea
                  id="movement-reason"
                  value={newMovement.reason}
                  onChange={(e) => setNewMovement({ ...newMovement, reason: e.target.value })}
                  placeholder="Enter reason or notes for this movement"
                  rows={3}
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowNewMovementDialog(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateMovement}>
                Create Movement
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* View Movement Dialog */}
        <Dialog open={showViewMovementDialog} onOpenChange={setShowViewMovementDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Movement Details</DialogTitle>
            </DialogHeader>
            {selectedMovement && (
              <div className="space-y-6 py-4">
                <div className="grid grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Product</Label>
                      <div className="flex items-center gap-3 mt-1">
                        <div className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                          {getMovementIcon(selectedMovement.movementType)}
                        </div>
                        <div>
                          <p className="font-semibold">{selectedMovement.product?.name || 'Unknown Product'}</p>
                          <p className="text-sm text-gray-500">{selectedMovement.product?.sku || 'No SKU'}</p>
                        </div>
                      </div>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Movement Type</Label>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant="outline" className="capitalize">
                          {selectedMovement.movementType?.replace('_', ' ').toLowerCase()}
                        </Badge>
                        <div className={`w-3 h-3 rounded-full ${selectedMovement.quantity > 0 ? 'bg-green-500' : 'bg-red-500'}`} />
                      </div>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Quantity</Label>
                      <p className={`text-2xl font-bold mt-1 ${selectedMovement.quantity > 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {selectedMovement.quantity > 0 ? '+' : ''}{selectedMovement.quantity}
                      </p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Movement Date</Label>
                      <p className="text-sm mt-1">{new Date(selectedMovement.movementDate).toLocaleDateString()}</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {selectedMovement.unitCost && (
                      <div>
                        <Label className="text-sm font-medium text-gray-500">Unit Cost</Label>
                        <p className="text-lg font-semibold mt-1">${Number(selectedMovement.unitCost || 0).toFixed(2)}</p>
                      </div>
                    )}
                    {selectedMovement.totalCost && (
                      <div>
                        <Label className="text-sm font-medium text-gray-500">Total Cost</Label>
                        <p className="text-lg font-semibold mt-1">${Number(selectedMovement.totalCost || 0).toFixed(2)}</p>
                      </div>
                    )}
                    {selectedMovement.reference && (
                      <div>
                        <Label className="text-sm font-medium text-gray-500">Reference</Label>
                        <p className="text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded">{selectedMovement.reference}</p>
                      </div>
                    )}
                    {selectedMovement.location && (
                      <div>
                        <Label className="text-sm font-medium text-gray-500">Location</Label>
                        <p className="text-sm mt-1">{selectedMovement.location.name} ({selectedMovement.location.code})</p>
                      </div>
                    )}
                  </div>
                </div>

                {(selectedMovement.reason || selectedMovement.notes) && (
                  <div className="border-t pt-4">
                    <Label className="text-sm font-medium text-gray-500 mb-3 block">Additional Information</Label>
                    <div className="space-y-3">
                      {selectedMovement.reason && (
                        <div>
                          <Label className="text-xs text-gray-500">Reason</Label>
                          <p className="text-sm mt-1">{selectedMovement.reason}</p>
                        </div>
                      )}
                      {selectedMovement.notes && (
                        <div>
                          <Label className="text-xs text-gray-500">Notes</Label>
                          <p className="text-sm mt-1">{selectedMovement.notes}</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {(selectedMovement.serialNumbers || selectedMovement.batchNumber) && (
                  <div className="border-t pt-4">
                    <Label className="text-sm font-medium text-gray-500 mb-3 block">Tracking Information</Label>
                    <div className="grid grid-cols-2 gap-4">
                      {selectedMovement.serialNumbers && (
                        <div>
                          <Label className="text-xs text-gray-500">Serial Numbers</Label>
                          <p className="text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded">{selectedMovement.serialNumbers}</p>
                        </div>
                      )}
                      {selectedMovement.batchNumber && (
                        <div>
                          <Label className="text-xs text-gray-500">Batch Number</Label>
                          <p className="text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded">{selectedMovement.batchNumber}</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="border-t pt-4">
                  <Label className="text-sm font-medium text-gray-500 mb-3 block">System Information</Label>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <Label className="text-xs text-gray-500">Created At</Label>
                      <p className="mt-1">{new Date(selectedMovement.createdAt).toLocaleString()}</p>
                    </div>
                    {selectedMovement.performedBy && (
                      <div>
                        <Label className="text-xs text-gray-500">Performed By</Label>
                        <p className="mt-1">{selectedMovement.performedBy}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowViewMovementDialog(false)}>
                Close
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* QR Code Dialog */}
        <Dialog open={showQRCodeDialog} onOpenChange={setShowQRCodeDialog}>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>Product QR Code</DialogTitle>
            </DialogHeader>
            {selectedProduct && (
              <div className="space-y-4 py-4">
                <div className="text-center">
                  <div className="w-64 h-64 mx-auto bg-white rounded-lg flex items-center justify-center border-2 border-gray-200 shadow-sm">
                    {qrCodeImage ? (
                      <img
                        src={qrCodeImage}
                        alt="Product QR Code"
                        className="w-60 h-60 rounded"
                      />
                    ) : (
                      <div className="text-center">
                        <RefreshCw className="w-8 h-8 mx-auto text-gray-400 mb-2 animate-spin" />
                        <p className="text-sm text-gray-500">Generating QR Code...</p>
                      </div>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label className="text-sm font-medium">Product Information</Label>
                  <div className="bg-gray-50 p-3 rounded-lg space-y-1">
                    <p className="text-sm"><span className="font-medium">Name:</span> {selectedProduct.name}</p>
                    <p className="text-sm"><span className="font-medium">SKU:</span> {selectedProduct.sku}</p>
                    <p className="text-sm"><span className="font-medium">ID:</span> {selectedProduct.id}</p>
                  </div>
                </div>


                <div className="space-y-2">
                  <Label className="text-sm font-medium">Actions</Label>
                  <div className="flex flex-wrap gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => generateQRCode(selectedProduct)}
                    >
                      <RefreshCw className="w-4 h-4 mr-1" />
                      Regenerate
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        const qrData = {
                          type: 'product',
                          id: selectedProduct.id,
                          sku: selectedProduct.sku,
                          name: selectedProduct.name,
                          url: `${window.location.origin}/products/${selectedProduct.id}`
                        }
                        navigator.clipboard.writeText(JSON.stringify(qrData))
                        toast({
                          title: "Copied to Clipboard",
                          description: "QR code data has been copied to your clipboard",
                        })
                      }}
                    >
                      Copy Data
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        const qrData = {
                          type: 'product',
                          id: selectedProduct.id,
                          sku: selectedProduct.sku,
                          name: selectedProduct.name,
                          url: `${window.location.origin}/products/${selectedProduct.id}`
                        }
                        const blob = new Blob([JSON.stringify(qrData, null, 2)], { type: 'application/json' })
                        const url = URL.createObjectURL(blob)
                        const a = document.createElement('a')
                        a.href = url
                        a.download = `${selectedProduct.sku}-qr-data.json`
                        document.body.appendChild(a)
                        a.click()
                        document.body.removeChild(a)
                        URL.revokeObjectURL(url)
                        toast({
                          title: "Downloaded",
                          description: "QR code data has been downloaded as JSON file",
                        })
                      }}
                    >
                      Download JSON
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        if (qrCodeImage) {
                          const a = document.createElement('a')
                          a.href = qrCodeImage
                          a.download = `${selectedProduct.sku}-qr-code.png`
                          document.body.appendChild(a)
                          a.click()
                          document.body.removeChild(a)
                          toast({
                            title: "Downloaded",
                            description: "QR code image has been downloaded as PNG file",
                          })
                        }
                      }}
                    >
                      Download QR
                    </Button>
                  </div>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowQRCodeDialog(false)}>
                Close
              </Button>
              <Button onClick={() => {
                setShowQRCodeDialog(false)
                handleViewProduct(selectedProduct)
              }}>
                View Product
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Alert Settings Dialog */}
        <Dialog open={showAlertSettingsDialog} onOpenChange={setShowAlertSettingsDialog}>
          <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Alert Settings</DialogTitle>
            </DialogHeader>
            <div className="space-y-6">
              {/* Stock Thresholds */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Stock Thresholds</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="lowStockThreshold">Low Stock Threshold</Label>
                    <Input
                      id="lowStockThreshold"
                      type="number"
                      value={alertSettings.lowStockThreshold}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        lowStockThreshold: Number(e.target.value)
                      })}
                    />
                    <p className="text-xs text-muted-foreground">Alert when stock ≤ this amount</p>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="overstockThreshold">Overstock Threshold</Label>
                    <Input
                      id="overstockThreshold"
                      type="number"
                      value={alertSettings.overstockThreshold}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        overstockThreshold: Number(e.target.value)
                      })}
                    />
                    <p className="text-xs text-muted-foreground">Alert when stock ≥ this amount</p>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="criticalStockThreshold">Critical Stock Threshold</Label>
                    <Input
                      id="criticalStockThreshold"
                      type="number"
                      value={alertSettings.criticalStockThreshold}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        criticalStockThreshold: Number(e.target.value)
                      })}
                    />
                    <p className="text-xs text-muted-foreground">Critical alert when stock ≤ this amount</p>
                  </div>
                </div>
              </div>

              {/* Notification Preferences */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Notification Preferences</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="emailNotifications">Email Notifications</Label>
                      <p className="text-sm text-muted-foreground">Receive alerts via email</p>
                    </div>
                    <input
                      id="emailNotifications"
                      type="checkbox"
                      checked={alertSettings.emailNotifications}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        emailNotifications: e.target.checked
                      })}
                      className="h-4 w-4"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="smsNotifications">SMS Notifications</Label>
                      <p className="text-sm text-muted-foreground">Receive alerts via SMS</p>
                    </div>
                    <input
                      id="smsNotifications"
                      type="checkbox"
                      checked={alertSettings.smsNotifications}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        smsNotifications: e.target.checked
                      })}
                      className="h-4 w-4"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="dashboardAlerts">Dashboard Alerts</Label>
                      <p className="text-sm text-muted-foreground">Show alerts on dashboard</p>
                    </div>
                    <input
                      id="dashboardAlerts"
                      type="checkbox"
                      checked={alertSettings.dashboardAlerts}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        dashboardAlerts: e.target.checked
                      })}
                      className="h-4 w-4"
                    />
                  </div>
                </div>
              </div>

              {/* Alert Management */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Alert Management</h3>
                <div className="space-y-3">
                  <div className="space-y-2">
                    <Label htmlFor="autoAcknowledgeDays">Auto-acknowledge after (days)</Label>
                    <Input
                      id="autoAcknowledgeDays"
                      type="number"
                      value={alertSettings.autoAcknowledgeDays}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        autoAcknowledgeDays: Number(e.target.value)
                      })}
                    />
                    <p className="text-xs text-muted-foreground">Automatically acknowledge alerts after this many days</p>
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="immediateAlerts">Immediate Alerts</Label>
                      <p className="text-sm text-muted-foreground">Send alerts immediately when generated</p>
                    </div>
                    <input
                      id="immediateAlerts"
                      type="checkbox"
                      checked={alertSettings.immediateAlerts}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        immediateAlerts: e.target.checked
                      })}
                      className="h-4 w-4"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="immediateAlertsCriticalOnly">Critical Alerts Only</Label>
                      <p className="text-sm text-muted-foreground">Send immediate alerts only for critical issues</p>
                    </div>
                    <input
                      id="immediateAlertsCriticalOnly"
                      type="checkbox"
                      checked={alertSettings.immediateAlertsCriticalOnly}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        immediateAlertsCriticalOnly: e.target.checked
                      })}
                      className="h-4 w-4"
                    />
                  </div>
                </div>
              </div>

              {/* Schedule Settings */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Schedule Settings</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="dailyDigestTime">Daily Digest Time</Label>
                    <Input
                      id="dailyDigestTime"
                      type="time"
                      value={alertSettings.dailyDigestTime}
                      onChange={(e) => setAlertSettings({
                        ...alertSettings,
                        dailyDigestTime: e.target.value
                      })}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="weeklySummaryDay">Weekly Summary Day</Label>
                    <Select
                      value={alertSettings.weeklySummaryDay}
                      onValueChange={(value) => setAlertSettings({
                        ...alertSettings,
                        weeklySummaryDay: value
                      })}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="MONDAY">Monday</SelectItem>
                        <SelectItem value="TUESDAY">Tuesday</SelectItem>
                        <SelectItem value="WEDNESDAY">Wednesday</SelectItem>
                        <SelectItem value="THURSDAY">Thursday</SelectItem>
                        <SelectItem value="FRIDAY">Friday</SelectItem>
                        <SelectItem value="SATURDAY">Saturday</SelectItem>
                        <SelectItem value="SUNDAY">Sunday</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowAlertSettingsDialog(false)}>
                Cancel
              </Button>
              <Button onClick={handleSaveAlertSettings}>
                Save Settings
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* New Transfer Dialog */}
        <Dialog open={showNewTransferDialog} onOpenChange={setShowNewTransferDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Create New Transfer</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="transfer-product">Product *</Label>
                  <Select value={newTransfer.productId} onValueChange={(value) => setNewTransfer({ ...newTransfer, productId: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a product" />
                    </SelectTrigger>
                    <SelectContent>
                      {allProducts.map((product) => (
                        <SelectItem key={product.id} value={product.id}>
                          {product.name} ({product.sku})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="transfer-quantity">Quantity *</Label>
                  <Input
                    id="transfer-quantity"
                    type="number"
                    value={newTransfer.quantity}
                    onChange={(e) => setNewTransfer({ ...newTransfer, quantity: Number(e.target.value) })}
                    placeholder="Enter quantity"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="transfer-from">From Location (Optional)</Label>
                  <Select value={newTransfer.fromLocationId || "none"} onValueChange={(value) => setNewTransfer({ ...newTransfer, fromLocationId: value === "none" ? "" : value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select source location" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">No source location</SelectItem>
                      {locations.map((location) => (
                        <SelectItem key={location.id} value={location.id}>
                          {location.name} ({location.code})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="transfer-to">To Location *</Label>
                  <Select value={newTransfer.toLocationId} onValueChange={(value) => setNewTransfer({ ...newTransfer, toLocationId: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select destination location" />
                    </SelectTrigger>
                    <SelectContent>
                      {locations.map((location) => (
                        <SelectItem key={location.id} value={location.id}>
                          {location.name} ({location.code})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="transfer-date">Transfer Date *</Label>
                <Input
                  id="transfer-date"
                  type="date"
                  value={newTransfer.transferDate}
                  onChange={(e) => setNewTransfer({ ...newTransfer, transferDate: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="transfer-reference">Reference</Label>
                <Input
                  id="transfer-reference"
                  value={newTransfer.reference}
                  onChange={(e) => setNewTransfer({ ...newTransfer, reference: e.target.value })}
                  placeholder="Enter reference number"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="transfer-notes">Notes</Label>
                <Textarea
                  id="transfer-notes"
                  value={newTransfer.notes}
                  onChange={(e) => setNewTransfer({ ...newTransfer, notes: e.target.value })}
                  placeholder="Enter transfer notes"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="transfer-requested-by">Requested By</Label>
                <Input
                  id="transfer-requested-by"
                  value={newTransfer.requestedBy}
                  onChange={(e) => setNewTransfer({ ...newTransfer, requestedBy: e.target.value })}
                  placeholder="Enter requester name"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowNewTransferDialog(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateTransfer}>
                Create Transfer
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* View Transfer Dialog */}
        <Dialog open={showViewTransferDialog} onOpenChange={setShowViewTransferDialog}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Transfer Details</DialogTitle>
            </DialogHeader>
            {selectedTransfer && (
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Product</Label>
                    <p className="text-lg font-semibold">{selectedTransfer.product.name}</p>
                    <p className="text-sm text-muted-foreground">{selectedTransfer.product.sku}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Quantity</Label>
                    <p className="text-lg font-semibold">{selectedTransfer.quantity} units</p>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">From Location</Label>
                    <p className="text-lg font-semibold">
                      {selectedTransfer.fromLocation ? selectedTransfer.fromLocation.name : 'External'}
                    </p>
                    {selectedTransfer.fromLocation && (
                      <p className="text-sm text-muted-foreground">{selectedTransfer.fromLocation.code}</p>
                    )}
                  </div>
                  <div>
                    <Label className="text-sm font-medium">To Location</Label>
                    <p className="text-lg font-semibold">{selectedTransfer.toLocation.name}</p>
                    <p className="text-sm text-muted-foreground">{selectedTransfer.toLocation.code}</p>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Transfer Date</Label>
                    <p className="text-lg font-semibold">
                      {new Date(selectedTransfer.transferDate).toLocaleDateString()}
                    </p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Status</Label>
                    <div className="mt-1">
                      {getTransferStatusBadge(selectedTransfer.status)}
                    </div>
                  </div>
                </div>
                {selectedTransfer.reference && (
                  <div>
                    <Label className="text-sm font-medium">Reference</Label>
                    <p className="text-lg font-semibold">{selectedTransfer.reference}</p>
                  </div>
                )}
                {selectedTransfer.notes && (
                  <div>
                    <Label className="text-sm font-medium">Notes</Label>
                    <p className="text-sm">{selectedTransfer.notes}</p>
                  </div>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium">Requested By</Label>
                    <p className="text-sm">{selectedTransfer.requestedBy || 'N/A'}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Completed By</Label>
                    <p className="text-sm">{selectedTransfer.completedBy || 'N/A'}</p>
                  </div>
                </div>
                {selectedTransfer.completedAt && (
                  <div>
                    <Label className="text-sm font-medium">Completed At</Label>
                    <p className="text-sm">
                      {new Date(selectedTransfer.completedAt).toLocaleString()}
                    </p>
                  </div>
                )}
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowViewTransferDialog(false)}>
                Close
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Add Category Dialog */}
        <Dialog open={showAddCategoryDialog} onOpenChange={setShowAddCategoryDialog}>
          <DialogContent className="max-w-lg">
            <DialogHeader>
              <DialogTitle>Create New Category</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="category-name">Category Name *</Label>
                <Input
                  id="category-name"
                  value={newCategory.name}
                  onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
                  placeholder="Enter category name"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="category-description">Description</Label>
                <Textarea
                  id="category-description"
                  value={newCategory.description}
                  onChange={(e) => setNewCategory({ ...newCategory, description: e.target.value })}
                  placeholder="Enter category description (optional)"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="category-color">Color</Label>
                  <div className="flex items-center gap-2">
                    <Input
                      id="category-color"
                      type="color"
                      value={newCategory.color}
                      onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}
                      className="w-12 h-10 p-1"
                    />
                    <Input
                      value={newCategory.color}
                      onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}
                      placeholder="#2563eb"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category-icon">Icon</Label>
                  <Select value={newCategory.icon} onValueChange={(value) => setNewCategory({ ...newCategory, icon: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select an icon" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Package">📦 Package</SelectItem>
                      <SelectItem value="Zap">⚡ Electronics</SelectItem>
                      <SelectItem value="Building">🏢 Office</SelectItem>
                      <SelectItem value="Wrench">🔧 Tools</SelectItem>
                      <SelectItem value="Heart">❤️ Health</SelectItem>
                      <SelectItem value="Car">🚗 Automotive</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowAddCategoryDialog(false)}>
                Cancel
              </Button>
              <Button onClick={async () => {
                try {
                  if (!newCategory.name) {
                    toast({
                      title: "Validation Error",
                      description: "Category name is required",
                      variant: "destructive"
                    })
                    return
                  }

                  await categoriesApi.createCategory({
                    ...newCategory,
                    companyId: companyId
                  })

                  toast({
                    title: "Success",
                    description: "Category created successfully",
                  })

                  // Reset form and refresh
                  setNewCategory({
                    name: '',
                    description: '',
                    color: '#2563eb',
                    icon: 'Package'
                  })
                  setShowAddCategoryDialog(false)
                  queryClient.invalidateQueries({ queryKey: ['categories'] })
                } catch (error) {

                  toast({
                    title: "Error",
                    description: "Failed to create category. Please try again.",
                    variant: "destructive"
                  })
                }
              }}>
                Create Category
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Manage Categories Dialog */}
        <Dialog open={showViewCategoriesDialog} onOpenChange={setShowViewCategoriesDialog}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>Manage Categories</DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <div className="flex justify-between items-center mb-4">
                <p className="text-sm text-muted-foreground">
                  {categories.length} categories found
                </p>
                <Button onClick={() => setShowAddCategoryDialog(true)}>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Category
                </Button>
              </div>

              <div className="grid gap-3 max-h-96 overflow-y-auto">
                {categories.map((category) => (
                  <div key={category.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <div
                        className="w-4 h-4 rounded-full"
                        style={{ backgroundColor: category.color }}
                      />
                      <div>
                        <p className="font-medium">{category.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {category._count?.products || 0} products
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSelectedCategory_(category)
                          setNewCategory({
                            name: category.name,
                            description: category.description || '',
                            color: category.color || '#2563eb',
                            icon: category.icon || 'Package'
                          })
                          setShowEditCategoryDialog(true)
                        }}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowViewCategoriesDialog(false)}>
                Close
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </PageLayout>
  )
}
