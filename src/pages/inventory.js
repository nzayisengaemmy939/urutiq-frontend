import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import QRCode from 'qrcode';
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Badge } from "../components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "../components/ui/dialog";
import { Label } from "../components/ui/label";
import { Textarea } from "../components/ui/textarea";
import { PageLayout } from "../components/page-layout";
import { useToast } from "../hooks/use-toast";
import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';
import { useDemoAuth } from "../hooks/useDemoAuth";
import { Plus, Search, Filter, Eye, Edit, Package, AlertTriangle, TrendingUp, BarChart3, MapPin, QrCode, RefreshCw, Settings, Bell, ArrowRightLeft, Calendar, DollarSign, Activity, PieChart, Check, X, ArrowRight, Calculator, Shield, AlertCircle, Info, User, Star, Phone, Mail, UserCheck, Clock, Thermometer, } from "lucide-react";
import { inventoryApi } from '@/lib/api/inventory';
import { categoriesApi } from '@/lib/api/categories';
import { getCompanyId, getTenantId } from '@/lib/config';
import BarcodeScanner from '@/components/barcode-scanner';
import InventoryAnalyticsComponent from '@/components/inventory-analytics';
import BulkOperations from '@/components/bulk-operations';
import InventoryOptimization from '@/components/inventory-optimization';
import DemandForecasting from '@/components/demand-forecasting';
export default function InventoryPage() {
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('all');
    const [selectedLocation, setSelectedLocation] = useState('all');
    const [selectedStatus, setSelectedStatus] = useState('all');
    const [selectedPeriod] = useState('30d');
    const [selectedForecastHorizon] = useState('3m');
    const [showAddProductDialog, setShowAddProductDialog] = useState(false);
    const [showEditProductDialog, setShowEditProductDialog] = useState(false);
    const [showViewProductDialog, setShowViewProductDialog] = useState(false);
    const [showAddLocationDialog, setShowAddLocationDialog] = useState(false);
    const [showEditLocationDialog, setShowEditLocationDialog] = useState(false);
    const [showViewLocationDialog, setShowViewLocationDialog] = useState(false);
    const [showNewMovementDialog, setShowNewMovementDialog] = useState(false);
    const [showViewMovementDialog, setShowViewMovementDialog] = useState(false);
    const [showQRCodeDialog, setShowQRCodeDialog] = useState(false);
    const [qrCodeImage, setQrCodeImage] = useState('');
    const [showAddCategoryDialog, setShowAddCategoryDialog] = useState(false);
    const [showEditCategoryDialog, setShowEditCategoryDialog] = useState(false);
    const [showViewCategoriesDialog, setShowViewCategoriesDialog] = useState(false);
    const [selectedCategory_, setSelectedCategory_] = useState(null);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [selectedLocationForDialog, setSelectedLocationForDialog] = useState(null);
    const [selectedMovement, setSelectedMovement] = useState(null);
    const [newLocation, setNewLocation] = useState({
        name: '',
        code: '',
        description: '',
        locationType: 'WAREHOUSE',
        address: '',
        address2: '',
        city: '',
        state: '',
        country: '',
        postalCode: '',
        latitude: '',
        longitude: '',
        contactName: '',
        contactPhone: '',
        contactEmail: '',
        managerName: '',
        managerEmail: '',
        managerPhone: '',
        isActive: true,
        isDefault: false,
        capacity: '',
        timezone: '',
        operatingHours: '',
        specialInstructions: '',
        warehouseZone: '',
        temperatureControlled: false,
        securityLevel: 'STANDARD',
        notes: ''
    });
    const [newMovement, setNewMovement] = useState({
        productId: '',
        movementType: 'INBOUND',
        quantity: 0,
        movementDate: new Date().toISOString().split('T')[0],
        movementTime: new Date().toTimeString().slice(0, 5),
        reference: '',
        reason: '',
        unitCost: 0,
        totalCost: 0,
        locationId: '',
        fromLocationId: '',
        toLocationId: '',
        batchNumber: '',
        expiryDate: '',
        serialNumber: '',
        supplierId: '',
        customerId: '',
        orderId: '',
        invoiceNumber: '',
        priority: 'NORMAL',
        status: 'PENDING',
        approvedBy: '',
        processedBy: '',
        department: '',
        project: '',
        costCenter: '',
        notes: '',
        attachments: [],
        isUrgent: false,
        requiresApproval: false,
        autoCalculateTotal: true
    });
    const [newProduct, setNewProduct] = useState({
        name: '',
        sku: '',
        description: '',
        shortDescription: '',
        unitPrice: 0,
        costPrice: 0,
        stockQuantity: 0,
        minStockLevel: 0,
        maxStockLevel: 0,
        reorderPoint: 0,
        category: '',
        categoryId: '',
        status: 'ACTIVE',
        type: 'PRODUCT', // PRODUCT, SERVICE, DIGITAL
        weight: 0,
        dimensions: {
            length: 0,
            width: 0,
            height: 0
        },
        taxRate: 0,
        taxInclusive: false,
        taxCode: '',
        taxExempt: false,
        barcode: '',
        tags: '',
        seoTitle: '',
        seoDescription: '',
        metaKeywords: '',
        isDigital: false,
        isService: false,
        isPhysical: true,
        trackInventory: true,
        allowBackorder: false,
        allowPreorder: false,
        preorderDate: '',
        warrantyPeriod: 0,
        warrantyUnit: 'MONTHS', // DAYS, WEEKS, MONTHS, YEARS
        returnPolicy: '',
        shippingClass: '',
        isFeatured: false,
        isBestSeller: false,
        isNewArrival: false,
        customFields: {},
        images: [],
        variants: [],
        relatedProducts: [],
        upsellProducts: [],
        crossSellProducts: [],
        // Additional fields to fix TypeScript errors
        brand: '',
        model: '',
        visibility: 'public',
        customField1: '',
        customField2: '',
        customField3: '',
        customField4: '',
        requiresLicense: false,
        hasExpiryDate: false,
        isBundle: false,
        notes: ''
    });
    const [newCategory, setNewCategory] = useState({
        name: '',
        description: '',
        color: '#2563eb',
        icon: 'Package'
    });
    // Alert Settings
    const [showAlertSettingsDialog, setShowAlertSettingsDialog] = useState(false);
    const [alertSettings, setAlertSettings] = useState({
        lowStockThreshold: 5,
        overstockThreshold: 100,
        criticalStockThreshold: 1,
        emailNotifications: true,
        smsNotifications: false,
        dashboardAlerts: true,
        autoAcknowledgeDays: 7,
        dailyDigestTime: '09:00',
        weeklySummaryDay: 'MONDAY',
        weeklySummaryTime: '08:00',
        immediateAlerts: true,
        immediateAlertsCriticalOnly: true
    });
    // Transfer Management
    const [showNewTransferDialog, setShowNewTransferDialog] = useState(false);
    const [showViewTransferDialog, setShowViewTransferDialog] = useState(false);
    const [selectedTransfer, setSelectedTransfer] = useState(null);
    const [newTransfer, setNewTransfer] = useState({
        productId: '',
        fromLocationId: '',
        toLocationId: '',
        quantity: 0,
        transferDate: new Date().toISOString().split('T')[0],
        transferTime: new Date().toTimeString().slice(0, 5),
        expectedDeliveryDate: '',
        reference: '',
        transferType: 'INTER_LOCATION',
        priority: 'NORMAL',
        status: 'PENDING',
        notes: '',
        requestedBy: '',
        approvedBy: '',
        processedBy: '',
        carrierName: '',
        trackingNumber: '',
        shippingCost: 0,
        packingMethod: '',
        specialInstructions: '',
        requiresApproval: false,
        isUrgent: false,
        insuranceValue: 0,
        fragile: false,
        temperatureControlled: false,
        batchNumber: '',
        serialNumbers: '',
        reasonCode: '',
        departmentFrom: '',
        departmentTo: '',
        projectCode: '',
        costCenter: '',
        internalNotes: ''
    });
    const { toast } = useToast();
    const queryClient = useQueryClient();
    // Setup demo authentication
    const { ready: authReady } = useDemoAuth('inventory');
    // Get company ID from localStorage or use default
    const [companyId, setCompanyId] = useState(getCompanyId());
    // Listen for company changes from header
    useEffect(() => {
        const handleStorageChange = () => {
            const newCompanyId = getCompanyId();
            if (newCompanyId && newCompanyId !== companyId) {
                console.log('🔄 Inventory page - Company changed from', companyId, 'to', newCompanyId);
                setCompanyId(newCompanyId);
            }
        };
        // Listen for localStorage changes
        window.addEventListener('storage', handleStorageChange);
        // Also listen for custom events (in case localStorage doesn't trigger)
        const handleCompanyChange = (e) => {
            const newCompanyId = e.detail.companyId;
            if (newCompanyId && newCompanyId !== companyId) {
                console.log('🔄 Inventory page - Company changed via custom event from', companyId, 'to', newCompanyId);
                setCompanyId(newCompanyId);
            }
        };
        window.addEventListener('companyChanged', handleCompanyChange);
        return () => {
            window.removeEventListener('storage', handleStorageChange);
            window.removeEventListener('companyChanged', handleCompanyChange);
        };
    }, [companyId]);
    // Fetch products with enhanced filtering
    const productsQuery = useQuery({
        queryKey: ['products', searchTerm, selectedCategory, selectedLocation, selectedStatus, companyId],
        queryFn: async () => {
            const result = await inventoryApi.getProducts({
                companyId,
                q: searchTerm || undefined,
                category: selectedCategory || undefined,
                status: selectedStatus || undefined,
                locationId: selectedLocation || undefined,
                page: 1,
                pageSize: 50
            });
            return result;
        },
        enabled: true
    });
    // Fetch locations
    const locationsQuery = useQuery({
        queryKey: ['locations', companyId],
        queryFn: async () => {
            const locations = await inventoryApi.getLocations(companyId);
            console.log('Fetched locations:', locations);
            return locations;
        },
        enabled: true
    });
    // Fetch categories
    const categoriesQuery = useQuery({
        queryKey: ['categories', companyId],
        queryFn: async () => {
            return await categoriesApi.getCategories(companyId);
        },
        enabled: true
    });
    // Fetch movements
    const movementsQuery = useQuery({
        queryKey: ['movements', companyId],
        queryFn: async () => {
            const result = await inventoryApi.getMovements({
                companyId,
                page: 1,
                pageSize: 20
            });
            return result;
        },
        enabled: true
    });
    // Fetch alerts
    const alertsQuery = useQuery({
        queryKey: ['alerts', companyId],
        queryFn: async () => {
            return await inventoryApi.getAlerts({ companyId });
        },
        enabled: true
    });
    // Fetch alert settings
    useQuery({
        queryKey: ['alertSettings'],
        queryFn: async () => {
            const settings = await inventoryApi.getAlertSettings();
            setAlertSettings(settings);
            return settings;
        },
        enabled: true
    });
    // Fetch transfers
    const transfersQuery = useQuery({
        queryKey: ['transfers', companyId],
        queryFn: async () => {
            return await inventoryApi.getTransfers({ companyId });
        },
        enabled: true
    });
    const transfers = Array.isArray(transfersQuery.data) ? transfersQuery.data : (transfersQuery.data?.items || []);
    // Fetch analytics
    const analyticsQuery = useQuery({
        queryKey: ['analytics', companyId, selectedPeriod],
        queryFn: async () => {
            return await inventoryApi.getAnalytics({
                companyId,
                period: selectedPeriod
            });
        },
        enabled: true
    });
    // Fetch KPIs
    const kpisQuery = useQuery({
        queryKey: ['kpis', companyId, selectedPeriod],
        queryFn: async () => {
            return await inventoryApi.getKPIs({
                companyId,
                period: selectedPeriod
            });
        },
        enabled: true
    });
    // Fetch AI forecasts
    const forecastsQuery = useQuery({
        queryKey: ['forecasts', companyId, selectedPeriod, selectedForecastHorizon],
        queryFn: async () => {
            return await inventoryApi.getForecasts({
                companyId,
                period: selectedPeriod,
                horizon: selectedForecastHorizon
            });
        },
        enabled: true
    });
    // Fetch AI insights
    const insightsQuery = useQuery({
        queryKey: ['insights', companyId, selectedPeriod],
        queryFn: async () => {
            const result = await inventoryApi.getForecastInsights({
                companyId,
                period: selectedPeriod
            });
            return result;
        },
        enabled: true
    });
    // Fetch AI recommendations
    const recommendationsQuery = useQuery({
        queryKey: ['recommendations', companyId, selectedPeriod],
        queryFn: async () => {
            return await inventoryApi.getAIRecommendations({
                companyId,
                period: selectedPeriod
            });
        },
        enabled: true
    });

    // Product creation mutation with loading state
    const createProductMutation = useMutation({
        mutationFn: async (productData) => {
            return await inventoryApi.createProduct(productData);
        },
        onSuccess: (data) => {
            toast({
                title: "Success",
                description: "Product created successfully",
            });
            // Reset form
            setNewProduct({
                name: '',
                sku: '',
                description: '',
                shortDescription: '',
                unitPrice: 0,
                costPrice: 0,
                stockQuantity: 0,
                minStockLevel: 0,
                maxStockLevel: 0,
                reorderPoint: 0,
                category: '',
                categoryId: '',
                status: 'ACTIVE',
                type: 'PRODUCT',
                weight: 0,
                dimensions: {
                    length: 0,
                    width: 0,
                    height: 0
                },
                taxRate: 0,
                taxInclusive: false,
                taxCode: '',
                taxExempt: false,
                barcode: '',
                tags: '',
                seoTitle: '',
                seoDescription: '',
                metaKeywords: '',
                isDigital: false,
                isService: false,
                isPhysical: true,
                trackInventory: true,
                allowBackorder: false,
                allowPreorder: false,
                preorderDate: '',
                warrantyPeriod: 0,
                warrantyUnit: 'MONTHS',
                returnPolicy: '',
                shippingClass: '',
                isFeatured: false,
                isBestSeller: false,
                isNewArrival: false,
                customFields: {},
                images: [],
                variants: [],
                relatedProducts: [],
                upsellProducts: [],
                crossSellProducts: [],
                // Additional fields to fix TypeScript errors
                brand: '',
                model: '',
                visibility: 'public',
                customField1: '',
                customField2: '',
                customField3: '',
                customField4: '',
                requiresLicense: false,
                hasExpiryDate: false,
                isBundle: false,
                notes: ''
            });
            setShowAddProductDialog(false);
            // Refresh products list
            queryClient.invalidateQueries({ queryKey: ['products'] });
            queryClient.invalidateQueries({ queryKey: ['categories'] });
            queryClient.invalidateQueries({ queryKey: ['analytics'] });
            queryClient.invalidateQueries({ queryKey: ['kpis'] });
        },
        onError: (error) => {
            console.error('Error creating product:', error);
            // Default error message
            let errorMessage = "Failed to create product. Please try again.";
            // Log the full error for debugging
            console.log('Full error object:', {
                status: error?.response?.status,
                data: error?.response?.data,
                message: error?.message,
                stack: error?.stack
            });
            // Handle 409 Conflict (duplicate SKU)
            if (error?.response?.status === 409 || error?.message?.includes('409')) {
                errorMessage = `A product with SKU "${newProduct.sku}" already exists. Please use a different SKU.`;
            }
            // Handle 400 Bad Request
            else if (error?.response?.status === 400 || error?.message?.includes('400')) {
                errorMessage = "Invalid product data. Please check your inputs and try again.";
            }
            // Handle other errors
            else if (error?.message) {
                errorMessage = error.message;
            }
            toast({
                title: "Error Creating Product",
                description: errorMessage,
                variant: "destructive"
            });
        }
    });
    // Show loading state if auth is not ready
    if (!authReady) {
        return (_jsx(PageLayout, { children: _jsx("div", { className: "flex items-center justify-center h-64", children: _jsxs("div", { className: "text-center", children: [_jsx(RefreshCw, { className: "w-8 h-8 animate-spin mx-auto mb-4" }), _jsx("p", { className: "text-muted-foreground", children: "Loading inventory..." })] }) }) }));
    }
    const allProducts = productsQuery.data?.items || [];
    const locations = locationsQuery.data || [];
    const categories = categoriesQuery.data || [];
    const movements = movementsQuery.data?.items || [];
    const alerts = alertsQuery.data || [];
    const analytics = analyticsQuery.data;
    const kpis = kpisQuery.data;
    const forecasts = forecastsQuery.data || [];
    const insights = insightsQuery.data;
    const recommendations = recommendationsQuery.data;
    
    // Debug: Log what products API returns
    console.log('=== PRODUCTS DEBUG ===');
    console.log('Company ID being used:', companyId);
    console.log('Products Query Status:', {
        isLoading: productsQuery.isLoading,
        error: productsQuery.error,
        data: productsQuery.data
    });
    console.log('All Products:', allProducts);
    console.log('Products Count:', allProducts.length);
    console.log('Products Query Data Structure:', {
        hasData: !!productsQuery.data,
        hasItems: !!productsQuery.data?.items,
        hasDataArray: !!productsQuery.data?.data,
        itemsLength: productsQuery.data?.items?.length || 0,
        dataLength: productsQuery.data?.data?.length || 0
    });
    
    // Debug: Log what analytics API returns
    console.log('Analytics API Response:', analytics);
    console.log('Analytics Query Status:', {
        isLoading: analyticsQuery.isLoading,
        error: analyticsQuery.error,
        data: analyticsQuery.data
    });
    // Analytics data processed successfully
    // Filter products based on search and filters
    const products = allProducts.filter(product => {
        const matchesSearch = !searchTerm ||
            product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            product.sku.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === 'all' || product.categoryId === selectedCategory;
        const matchesLocation = selectedLocation === 'all' ||
            product.locations?.some(loc => loc.locationId === selectedLocation);
        const matchesStatus = selectedStatus === 'all' || product.status === selectedStatus;
        return matchesSearch && matchesCategory && matchesLocation && matchesStatus;
    });
    const getStatusBadge = (product) => {
        const stock = Number(product.stockQuantity);
        if (stock <= 0) {
            return _jsx(Badge, { variant: "destructive", children: "Out of Stock" });
        }
        if (stock <= 10) { // Simplified: low stock if <= 10 units
            return _jsx(Badge, { variant: "secondary", children: "Low Stock" });
        }
        if (stock >= 100) { // Simplified: overstock if >= 100 units
            return _jsx(Badge, { variant: "outline", children: "Overstock" });
        }
        return _jsx(Badge, { variant: "default", children: "In Stock" });
    };
    // Product action handlers
    const handleViewProduct = (product) => {
        setSelectedProduct(product);
        setShowViewProductDialog(true);
    };
    const handleEditProduct = (product) => {
        setSelectedProduct(product);
        setNewProduct({
            // Core Information
            name: product.name || '',
            sku: product.sku || '',
            description: product.description || '',
            shortDescription: product.shortDescription || '',
            type: product.type || 'PRODUCT',
            // Pricing
            unitPrice: Number(product.unitPrice) || 0,
            costPrice: Number(product.costPrice) || 0,
            // Stock Management
            stockQuantity: Number(product.stockQuantity) || 0,
            minStockLevel: Number(product.minStockLevel) || 0,
            maxStockLevel: Number(product.maxStockLevel) || 0,
            reorderPoint: Number(product.reorderPoint) || 0,
            // Classification
            category: product.category || '',
            categoryId: product.categoryId || '',
            tags: product.tags || '',
            // Physical Properties
            weight: Number(product.weight) || 0,
            dimensions: product.dimensions || {
                length: 0,
                width: 0,
                height: 0
            },
            // Tax Information
            taxRate: Number(product.taxRate) || 0,
            taxInclusive: product.taxInclusive || false,
            taxCode: product.taxCode || '',
            taxExempt: product.taxExempt || false,
            // Identification
            barcode: product.barcode || '',
            // Product Type Flags
            isDigital: product.isDigital || false,
            isService: product.isService || false,
            isPhysical: product.isPhysical !== false,
            trackInventory: product.trackInventory !== false,
            // Business Rules
            allowBackorder: product.allowBackorder || false,
            allowPreorder: product.allowPreorder || false,
            preorderDate: product.preorderDate || '',
            // Marketing Features
            isFeatured: product.isFeatured || false,
            isBestSeller: product.isBestSeller || false,
            isNewArrival: product.isNewArrival || false,
            // Warranty & Returns
            warrantyPeriod: Number(product.warrantyPeriod) || 0,
            warrantyUnit: product.warrantyUnit || 'MONTHS',
            returnPolicy: product.returnPolicy || '',
            // Shipping
            shippingClass: product.shippingClass || '',
            // SEO
            seoTitle: product.seoTitle || '',
            seoDescription: product.seoDescription || '',
            metaKeywords: product.metaKeywords || '',
            // System Fields
            status: (product.status || 'ACTIVE').toUpperCase(),
            // Media & Extensions
            customFields: typeof product.customFields === 'string' ? JSON.parse(product.customFields || '{}') : (product.customFields || {}),
            images: typeof product.images === 'string' ? JSON.parse(product.images || '[]') : (product.images || []),
            variants: typeof product.variants === 'string' ? JSON.parse(product.variants || '[]') : (product.variants || []),
            relatedProducts: typeof product.relatedProducts === 'string' ? JSON.parse(product.relatedProducts || '[]') : (product.relatedProducts || []),
            upsellProducts: typeof product.upsellProducts === 'string' ? JSON.parse(product.upsellProducts || '[]') : (product.upsellProducts || []),
            crossSellProducts: typeof product.crossSellProducts === 'string' ? JSON.parse(product.crossSellProducts || '[]') : (product.crossSellProducts || []),
            // Additional fields
            brand: product.brand || '',
            model: product.model || '',
            visibility: product.visibility || 'public',
            customField1: product.customField1 || '',
            customField2: product.customField2 || '',
            customField3: product.customField3 || '',
            customField4: product.customField4 || '',
            requiresLicense: product.requiresLicense || false,
            hasExpiryDate: product.hasExpiryDate || false,
            isBundle: product.isBundle || false,
            notes: product.notes || ''
        });
        setShowEditProductDialog(true);
    };
    const generateQRCode = async (product) => {
        try {
            const qrData = {
                type: 'product',
                id: product.id,
                sku: product.sku,
                name: product.name,
                url: `${window.location.origin}/products/${product.id}`
            };
            const qrString = JSON.stringify(qrData);
            const qrCodeDataURL = await QRCode.toDataURL(qrString, {
                width: 256,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                }
            });
            setQrCodeImage(qrCodeDataURL);
        }
        catch (error) {
            toast({
                title: "Error",
                description: "Failed to generate QR code",
                variant: "destructive"
            });
        }
    };
    const handleQRCode = async (product) => {
        setSelectedProduct(product);
        setShowQRCodeDialog(true);
        await generateQRCode(product);
    };
    // Location action handlers
    const handleViewLocation = (location) => {
        console.log('Viewing location data:', location);
        setSelectedLocationForDialog(location);
        setShowViewLocationDialog(true);
    };
    const handleEditLocation = (location) => {
        setSelectedLocationForDialog(location);
        setNewLocation({
            name: location.name || '',
            code: location.code || '',
            description: location.description || '',
            locationType: location.locationType || 'WAREHOUSE',
            address: location.address || '',
            address2: location.address2 || '',
            city: location.city || '',
            state: location.state || '',
            country: location.country || '',
            postalCode: location.postalCode || '',
            latitude: location.latitude || '',
            longitude: location.longitude || '',
            contactName: location.contactName || '',
            contactPhone: location.contactPhone || '',
            contactEmail: location.contactEmail || '',
            managerName: location.managerName || '',
            managerEmail: location.managerEmail || '',
            managerPhone: location.managerPhone || '',
            isActive: location.isActive !== undefined ? location.isActive : true,
            isDefault: location.isDefault !== undefined ? location.isDefault : false,
            capacity: location.capacity || '',
            timezone: location.timezone || '',
            operatingHours: location.operatingHours || '',
            specialInstructions: location.specialInstructions || '',
            warehouseZone: location.warehouseZone || '',
            temperatureControlled: location.temperatureControlled !== undefined ? location.temperatureControlled : false,
            securityLevel: location.securityLevel || 'STANDARD',
            notes: location.notes || ''
        });
        setShowEditLocationDialog(true);
    };
    // Movement action handlers
    const handleViewMovement = (movement) => {
        setSelectedMovement(movement);
        setShowViewMovementDialog(true);
    };
    const handleCreateMovement = async () => {
        try {
            if (!newMovement.productId || !newMovement.quantity) {
                toast({
                    title: "Validation Error",
                    description: "Product and quantity are required",
                    variant: "destructive"
                });
                return;
            }
            // Frontend validation for OUTBOUND movements
            const selectedProduct = allProducts.find(p => p.id === newMovement.productId);
            if (['OUTBOUND', 'TRANSFER_OUT', 'ADJUSTMENT_OUT', 'RETURN_OUT', 'DAMAGE', 'THEFT'].includes(newMovement.movementType)) {
                const availableStock = Number(selectedProduct?.stockQuantity || 0);
                const requestedQty = Math.abs(newMovement.quantity);
                if (requestedQty > availableStock) {
                    toast({
                        title: "Insufficient Stock",
                        description: `Available: ${availableStock}, Requested: ${requestedQty}`,
                        variant: "destructive"
                    });
                    return;
                }
            }
            // Validate unit cost for INBOUND/OUTBOUND
            if (['INBOUND', 'OUTBOUND'].includes(newMovement.movementType) && (!newMovement.unitCost || newMovement.unitCost <= 0)) {
                toast({
                    title: "Unit Cost Required",
                    description: "Unit cost must be greater than 0 for INBOUND and OUTBOUND movements",
                    variant: "destructive"
                });
                return;
            }
            await inventoryApi.createMovement({
                ...newMovement,
                movementDate: new Date(newMovement.movementDate).toISOString()
            });
            // If a location was selected, create/update product-location association
            if (newMovement.locationId) {
                try {
                    await inventoryApi.createProductLocation({
                        productId: newMovement.productId,
                        locationId: newMovement.locationId,
                        quantity: newMovement.quantity
                    });
                }
                catch (locationError) {
                }
            }
            toast({
                title: "Success",
                description: "Movement created successfully",
            });
            // Reset form
            setNewMovement({
                productId: '',
                movementType: 'INBOUND',
                quantity: 0,
                movementDate: new Date().toISOString().split('T')[0],
                reference: '',
                reason: '',
                unitCost: 0,
                locationId: ''
            });
            setShowNewMovementDialog(false);
            // Refresh data
            queryClient.invalidateQueries({ queryKey: ['movements'] });
            queryClient.invalidateQueries({ queryKey: ['products'] });
            queryClient.invalidateQueries({ queryKey: ['locations'] });
            queryClient.invalidateQueries({ queryKey: ['analytics'] });
            queryClient.invalidateQueries({ queryKey: ['kpis'] });
        }
        catch (error) {
            console.error('Movement creation error:', error);
            let errorMessage = "Failed to create movement. Please try again.";
            let errorTitle = "Error";
            // Handle API error responses
            if (error.response?.data) {
                const errorData = error.response.data;
                if (errorData.error === 'insufficient_stock') {
                    errorTitle = "Insufficient Stock";
                    errorMessage = errorData.message || "Not enough stock available for this movement.";
                }
                else if (errorData.error === 'unit_cost_required') {
                    errorTitle = "Unit Cost Required";
                    errorMessage = "Please enter a valid unit cost for this movement.";
                }
                else if (errorData.error === 'invalid_quantity') {
                    errorTitle = "Invalid Quantity";
                    errorMessage = "Movement quantity must be greater than 0.";
                }
                else if (errorData.error === 'product_not_found') {
                    errorTitle = "Product Not Found";
                    errorMessage = "The selected product was not found.";
                }
                else if (errorData.message) {
                    errorMessage = errorData.message;
                }
            }
            else if (error.message && !error.message.includes('HTTP')) {
                errorMessage = error.message;
            }
            toast({
                title: errorTitle,
                description: errorMessage,
                variant: "destructive"
            });
        }
    };
    // Refresh all data
    const handleRefresh = () => {
        queryClient.invalidateQueries({ queryKey: ['products'] });
        queryClient.invalidateQueries({ queryKey: ['locations'] });
        queryClient.invalidateQueries({ queryKey: ['movements'] });
        queryClient.invalidateQueries({ queryKey: ['alerts'] });
        queryClient.invalidateQueries({ queryKey: ['analytics'] });
        queryClient.invalidateQueries({ queryKey: ['kpis'] });
        queryClient.invalidateQueries({ queryKey: ['forecasts'] });
        queryClient.invalidateQueries({ queryKey: ['insights'] });
        queryClient.invalidateQueries({ queryKey: ['recommendations'] });
        toast({
            title: "Refreshed",
            description: "All data has been refreshed",
        });
    };
    const handleGenerateAlerts = async () => {
        try {
            const result = await inventoryApi.generateAlerts(companyId);
            toast({
                title: "Success",
                description: result.message,
            });
            // Refresh alerts
            queryClient.invalidateQueries({ queryKey: ['alerts'] });
        }
        catch (error) {
            toast({
                title: "Error",
                description: error.message || "Failed to generate alerts",
                variant: "destructive"
            });
        }
    };
    const handleAcknowledgeAlert = async (alertId) => {
        try {
            await inventoryApi.acknowledgeAlert(alertId);
            toast({
                title: "Success",
                description: "Alert acknowledged",
            });
            // Refresh alerts
            queryClient.invalidateQueries({ queryKey: ['alerts'] });
        }
        catch (error) {
            toast({
                title: "Error",
                description: error.message || "Failed to acknowledge alert",
                variant: "destructive"
            });
        }
    };
    const handleDismissAlert = async (alertId) => {
        try {
            await inventoryApi.dismissAlert(alertId);
            toast({
                title: "Success",
                description: "Alert dismissed",
            });
            // Refresh alerts
            queryClient.invalidateQueries({ queryKey: ['alerts'] });
        }
        catch (error) {
            toast({
                title: "Error",
                description: error.message || "Failed to dismiss alert",
                variant: "destructive"
            });
        }
    };
    const handleSaveAlertSettings = async () => {
        try {
            await inventoryApi.updateAlertSettings(alertSettings);
            toast({
                title: "Success",
                description: "Alert settings saved successfully",
            });
            setShowAlertSettingsDialog(false);
            // Refresh settings
            queryClient.invalidateQueries({ queryKey: ['alertSettings'] });
        }
        catch (error) {
            toast({
                title: "Error",
                description: error.message || "Failed to save alert settings",
                variant: "destructive"
            });
        }
    };
    const handleCreateTransfer = async () => {
        try {
            if (!newTransfer.productId || !newTransfer.toLocationId || !newTransfer.quantity) {
                toast({
                    title: "Validation Error",
                    description: "Product, destination location, and quantity are required",
                    variant: "destructive"
                });
                return;
            }
            await inventoryApi.createTransfer({
                ...newTransfer,
                transferDate: new Date(newTransfer.transferDate).toISOString(),
                status: newTransfer.status
            }).catch(err => {
                console.log('=== RAW API ERROR CAUGHT =====');
                console.log('Error object:', err);
                console.log('Error message:', err.message);
                console.log('Error response:', err.response);
                console.log('Error response data:', err.response?.data);
                console.log('Error details:', err.details);
                console.log('Error status:', err.status);
                console.log('================================');
                throw err; // Re-throw to trigger the main catch block
            });
            toast({
                title: "Success",
                description: "Transfer created successfully",
            });
            // Reset form
            setNewTransfer({
                productId: '',
                fromLocationId: '',
                toLocationId: '',
                quantity: 0,
                transferDate: new Date().toISOString().split('T')[0],
                reference: '',
                notes: '',
                requestedBy: ''
            });
            setShowNewTransferDialog(false);
            // Refresh data
            queryClient.invalidateQueries({ queryKey: ['transfers'] });
            queryClient.invalidateQueries({ queryKey: ['products'] });
            queryClient.invalidateQueries({ queryKey: ['locations'] });
        }
        catch (error) {
            console.error('Transfer creation error:', error);
            let errorMessage = "Failed to create transfer";
            let errorTitle = "Error";
            // Handle API error responses with detailed messages
            if (error.response?.data) {
                const errorData = error.response.data;
                if (errorData.error === 'insufficient_stock') {
                    errorTitle = "Insufficient Stock";
                    errorMessage = errorData.message || `Not enough stock available for this transfer.`;
                }
                else if (errorData.error === 'same_location_transfer') {
                    errorTitle = "Invalid Transfer";
                    errorMessage = "Cannot transfer to the same location. Please select different locations.";
                }
                else if (errorData.error === 'invalid_quantity') {
                    errorTitle = "Invalid Quantity";
                    errorMessage = "Transfer quantity must be greater than 0.";
                }
                else if (errorData.error === 'missing_required_fields') {
                    errorTitle = "Missing Information";
                    errorMessage = "Please fill in all required fields.";
                }
                else if (errorData.message) {
                    errorMessage = errorData.message;
                }
            }
            else if (error.message && !error.message.includes('HTTP')) {
                errorMessage = error.message;
            }
            toast({
                title: errorTitle,
                description: errorMessage,
                variant: "destructive"
            });
        }
    };
    const handleUpdateTransferStatus = async (transferId, status) => {
        try {
            await inventoryApi.updateTransferStatus(transferId, status);
            toast({
                title: "Success",
                description: `Transfer ${status.toLowerCase()} successfully`,
            });
            // Refresh transfers
            queryClient.invalidateQueries({ queryKey: ['transfers'] });
            queryClient.invalidateQueries({ queryKey: ['products'] });
            queryClient.invalidateQueries({ queryKey: ['locations'] });
        }
        catch (error) {
            console.error('Transfer status update error:', error);
            let errorMessage = "Failed to update transfer status";
            let errorTitle = "Error";
            // Handle API error responses
            if (error.response?.data) {
                const errorData = error.response.data;
                errorMessage = errorData.message || errorData.error || errorMessage;
                if (errorData.error === 'insufficient_stock') {
                    errorTitle = "Insufficient Stock";
                }
                else if (errorData.error === 'transfer_not_found') {
                    errorTitle = "Transfer Not Found";
                }
            }
            else if (error.message && !error.message.includes('HTTP')) {
                errorMessage = error.message;
            }
            toast({
                title: errorTitle,
                description: errorMessage,
                variant: "destructive"
            });
        }
    };
    const handleViewTransfer = (transfer) => {
        setSelectedTransfer(transfer);
        setShowViewTransferDialog(true);
    };
    const getAlertIcon = (alertType) => {
        switch (alertType) {
            case 'LOW_STOCK':
                return _jsx(AlertTriangle, { className: "w-4 h-4 text-amber-600" });
            case 'OUT_OF_STOCK':
                return _jsx(AlertTriangle, { className: "w-4 h-4 text-red-600" });
            case 'OVERSTOCK':
                return _jsx(TrendingUp, { className: "w-4 h-4 text-blue-600" });
            case 'EXPIRING_SOON':
                return _jsx(Calendar, { className: "w-4 h-4 text-orange-600" });
            case 'EXPIRED':
                return _jsx(Calendar, { className: "w-4 h-4 text-red-600" });
            default:
                return _jsx(Bell, { className: "w-4 h-4 text-gray-600" });
        }
    };
    const getTransferStatusBadge = (status) => {
        switch (status) {
            case 'PENDING':
                return _jsx(Badge, { variant: "secondary", children: "Pending" });
            case 'IN_TRANSIT':
                return _jsx(Badge, { variant: "default", children: "In Transit" });
            case 'COMPLETED':
                return _jsx(Badge, { variant: "default", className: "bg-green-100 text-green-800", children: "Completed" });
            case 'CANCELLED':
                return _jsx(Badge, { variant: "destructive", children: "Cancelled" });
            default:
                return _jsx(Badge, { variant: "outline", children: status });
        }
    };
    const getMovementIcon = (movementType) => {
        switch (movementType) {
            case 'INBOUND':
                return _jsx(TrendingUp, { className: "w-4 h-4 text-green-600" });
            case 'OUTBOUND':
                return _jsx(TrendingUp, { className: "w-4 h-4 text-red-600 rotate-180" });
            case 'TRANSFER_IN':
                return _jsx(ArrowRightLeft, { className: "w-4 h-4 text-blue-600" });
            case 'TRANSFER_OUT':
                return _jsx(ArrowRightLeft, { className: "w-4 h-4 text-blue-600 rotate-180" });
            case 'ADJUSTMENT_IN':
                return _jsx(Plus, { className: "w-4 h-4 text-green-600" });
            case 'ADJUSTMENT_OUT':
                return _jsx(Plus, { className: "w-4 h-4 text-red-600 rotate-45" });
            default:
                return _jsx(Package, { className: "w-4 h-4 text-gray-600" });
        }
    };
    return (_jsx(PageLayout, { children: _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-balance", children: " Inventory Management" }), _jsx("p", { className: "text-muted-foreground", children: "Advanced inventory tracking with multi-location support, serial numbers, and AI insights" })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(BarcodeScanner, { onScan: (barcode) => {
                                        setSearchTerm(barcode);
                                        toast({
                                            title: "Barcode Scanned",
                                            description: `Searching for: ${barcode}`,
                                        });
                                    }, onProductFound: (product) => {
                                        toast({
                                            title: "Product Found",
                                            description: `${product.name} (${product.sku})`,
                                        });
                                    } }), _jsx(BulkOperations, { onImport: (data) => {
                                        toast({
                                            title: "Import Successful",
                                            description: `Imported ${data.length} items`,
                                        });
                                        // Refresh queries
                                        queryClient.invalidateQueries({ queryKey: ['products'] });
                                    }, onExport: (format) => {
                                        toast({
                                            title: "Export Started",
                                            description: `Exporting data in ${format.toUpperCase()} format`,
                                        });
                                    } }), _jsxs(Button, { variant: "outline", onClick: handleRefresh, children: [_jsx(RefreshCw, { className: "w-4 h-4 mr-2" }), "Refresh"] }), _jsxs(Button, { onClick: () => setShowAddProductDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "Add Product"] })] })] }), analyticsQuery.isLoading ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [1, 2, 3, 4].map((i) => (_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(RefreshCw, { className: "w-5 h-5 text-gray-400 animate-spin" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Loading..." }), _jsx("p", { className: "text-xl font-bold", children: "-" })] })] }) }) }, i))) })) : analyticsQuery.error ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center", children: _jsx(AlertTriangle, { className: "w-5 h-5 text-red-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Error loading analytics" }), _jsx("p", { className: "text-xl font-bold", children: "-" })] })] }) }) }) })) : analytics ? (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Total Products" }), _jsx("p", { className: "text-xl font-bold", children: analytics?.totalProducts || 0 })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center", children: _jsx(DollarSign, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Inventory Value" }), _jsxs("p", { className: "text-xl font-bold", children: ["$", (analytics?.totalValue || 0).toLocaleString()] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center", children: _jsx(AlertTriangle, { className: "w-5 h-5 text-amber-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Low Stock Items" }), _jsx("p", { className: "text-xl font-bold", children: analytics?.lowStockItems || 0 })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-red-600 font-semibold", children: "0" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Out of Stock" }), _jsx("p", { className: "text-xl font-bold", children: analytics?.outOfStockItems || 0 })] })] }) }) })] })) : (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-5 h-5 text-gray-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Total Products" }), _jsx("p", { className: "text-xl font-bold", children: allProducts?.length || 0 })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(MapPin, { className: "w-5 h-5 text-gray-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Locations" }), _jsx("p", { className: "text-xl font-bold", children: locations?.length || 0 })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(ArrowRightLeft, { className: "w-5 h-5 text-gray-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Movements" }), _jsx("p", { className: "text-xl font-bold", children: movements?.length || 0 })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(Bell, { className: "w-5 h-5 text-gray-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Alerts" }), _jsx("p", { className: "text-xl font-bold", children: alerts?.length || 0 })] })] }) }) })] })), kpisQuery.isLoading ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4", children: [1, 2, 3, 4, 5, 6].map((i) => (_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(RefreshCw, { className: "w-5 h-5 text-gray-400 animate-spin" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Loading..." }), _jsx("p", { className: "text-xl font-bold", children: "-" })] })] }) }) }, i))) })) : kpisQuery.error ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4", children: _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center", children: _jsx(AlertTriangle, { className: "w-5 h-5 text-red-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Error loading KPIs" }), _jsx("p", { className: "text-xl font-bold", children: "-" })] })] }) }) }) })) : kpis ? (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center", children: _jsx(Activity, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Turnover Rate" }), _jsxs("p", { className: "text-xl font-bold", children: [kpis?.inventoryTurnover?.toFixed(1) || '0.0', "x"] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center", children: _jsx(Calendar, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Avg Days in Stock" }), _jsx("p", { className: "text-xl font-bold", children: kpis?.averageDaysInStock?.toFixed(0) || '0' })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center", children: _jsx(AlertTriangle, { className: "w-5 h-5 text-red-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Stockout Rate" }), _jsxs("p", { className: "text-xl font-bold", children: [((kpis?.stockoutRate || 0) * 100).toFixed(1), "%"] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-5 h-5 text-amber-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Overstock Rate" }), _jsxs("p", { className: "text-xl font-bold", children: [((kpis?.overstockRate || 0) * 100).toFixed(1), "%"] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center", children: _jsx(BarChart3, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Accuracy Rate" }), _jsxs("p", { className: "text-xl font-bold", children: [((kpis?.accuracyRate || 0) * 100).toFixed(1), "%"] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4 ", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center", children: _jsx(DollarSign, { className: "w-5 h-5 text-cyan-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Carrying Cost" }), _jsxs("p", { className: "text-md font-bold", children: ["$", kpis?.carryingCost?.toFixed(0) || '0'] })] })] }) }) })] })) : null, _jsxs(Tabs, { defaultValue: "products", className: "space-y-4", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-9", children: [_jsx(TabsTrigger, { value: "products", children: "Products" }), _jsx(TabsTrigger, { value: "locations", children: "Locations" }), _jsx(TabsTrigger, { value: "movements", children: "Movements" }), _jsx(TabsTrigger, { value: "alerts", children: "Alerts" }), _jsx(TabsTrigger, { value: "transfers", children: "Transfers" }), _jsx(TabsTrigger, { value: "analytics", children: "Analytics" }), _jsx(TabsTrigger, { value: "advanced-analytics", children: "Advanced Analytics" }), _jsx(TabsTrigger, { value: "optimization", children: "Optimization" }), _jsx(TabsTrigger, { value: "ai-forecasting", children: "AI Forecasting" })] }), _jsx(TabsContent, { value: "products", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { children: "Product Inventory" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" }), _jsx(Input, { placeholder: "Search products...", className: "pl-10 w-64", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value) })] }), _jsxs(Select, { value: selectedCategory, onValueChange: setSelectedCategory, children: [_jsx(SelectTrigger, { className: "w-40", children: _jsx(SelectValue, { placeholder: "Category" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Categories" }), categories.map(category => (_jsx(SelectItem, { value: category.id, children: category.name }, category.id)))] })] }), _jsxs(Select, { value: selectedLocation, onValueChange: setSelectedLocation, children: [_jsx(SelectTrigger, { className: "w-40", children: _jsx(SelectValue, { placeholder: "Location" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Locations" }), locations.map(location => (_jsx(SelectItem, { value: location.id, children: location.name }, location.id)))] })] }), _jsxs(Select, { value: selectedStatus, onValueChange: setSelectedStatus, children: [_jsx(SelectTrigger, { className: "w-40", children: _jsx(SelectValue, { placeholder: "Status" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Status" }), _jsx(SelectItem, { value: "ACTIVE", children: "Active" }), _jsx(SelectItem, { value: "INACTIVE", children: "Inactive" }), _jsx(SelectItem, { value: "DISCONTINUED", children: "Discontinued" })] })] }), _jsxs(Button, { variant: "outline", size: "sm", children: [_jsx(Filter, { className: "w-4 h-4 mr-2" }), "Filter"] })] })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: productsQuery.isLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-6 w-6 animate-spin mr-2" }), _jsx("span", { className: "text-sm text-gray-500", children: "Loading products..." })] })) : productsQuery.error ? (_jsxs("div", { className: "flex items-center justify-center py-8 text-red-600", children: [_jsx(AlertTriangle, { className: "h-6 w-6 mr-2" }), _jsxs("span", { className: "text-sm", children: ["Error loading products: ", productsQuery.error?.message || productsQuery.error?.toString() || 'Unknown error'] })] })) : products?.length === 0 ? (_jsxs("div", { className: "flex items-center justify-center py-8 text-gray-500", children: [_jsx(Package, { className: "h-8 w-8 mr-2" }), _jsx("span", { className: "text-sm", children: "No products found" })] })) : (products.map((product) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-6 h-6 text-gray-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: product.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [product.sku, " \u2022 ", categories.find(c => c.id === product.categoryId)?.name || 'Uncategorized'] }), _jsxs("div", { className: "flex items-center gap-2 mt-1", children: [_jsx(Badge, { variant: "outline", className: "text-xs", children: (product.type || 'PRODUCT') === 'PRODUCT' ? 'Inventory' : 'Non-Inventory' }), _jsx(Badge, { variant: "outline", className: "text-xs", children: product.status })] })] })] }), _jsxs("div", { className: "flex items-center gap-6", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: product.stockQuantity }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Total Stock" })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: Number(product.stockQuantity) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Available" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "font-medium", children: ["$", Number(product.unitPrice).toFixed(2)] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Unit Price" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "font-medium", children: ["$", (Number(product.stockQuantity) * Number(product.costPrice)).toFixed(2)] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Total Value" })] }), getStatusBadge(product), _jsxs("div", { className: "flex gap-1", children: [_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleViewProduct(product), children: _jsx(Eye, { className: "w-4 h-4" }) }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleEditProduct(product), children: _jsx(Edit, { className: "w-4 h-4" }) }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleQRCode(product), children: _jsx(QrCode, { className: "w-4 h-4" }) })] })] })] }, product.id)))) }) })] }) }), _jsx(TabsContent, { value: "locations", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { children: "Warehouse Locations" }), _jsxs(Button, { onClick: () => setShowAddLocationDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "Add Location"] })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: locations.map((location) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center", children: _jsx(MapPin, { className: "w-5 h-5 text-cyan-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: location.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [location.code, " \u2022 ", location.type, " \u2022 ", location.address] }), location.isDefault && (_jsx(Badge, { variant: "default", className: "text-xs mt-1", children: "Default" }))] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: location._count?.products || 0 }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Products" })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: allProducts
                                                                            .filter(p => p.locations?.some(loc => loc.locationId === location.id))
                                                                            .reduce((total, p) => {
                                                                            const locationData = p.locations?.find(loc => loc.locationId === location.id);
                                                                            return total + Number(locationData?.stockQuantity || 0);
                                                                        }, 0) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Total Stock" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "font-medium", children: ["$", allProducts
                                                                                .filter(p => p.locations?.some(loc => loc.locationId === location.id))
                                                                                .reduce((total, p) => {
                                                                                const locationData = p.locations?.find(loc => loc.locationId === location.id);
                                                                                const quantity = Number(locationData?.stockQuantity || 0);
                                                                                return total + (quantity * Number(p.costPrice || 0));
                                                                            }, 0)
                                                                                .toFixed(2)] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Stock Value" })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: location._count.movements }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Movements" })] }), _jsxs("div", { className: "flex gap-1", children: [_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleViewLocation(location), children: _jsx(Eye, { className: "w-4 h-4" }) }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleEditLocation(location), children: _jsx(Edit, { className: "w-4 h-4" }) })] })] })] }, location.id))) }) })] }) }), _jsx(TabsContent, { value: "movements", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { children: "Inventory Movements" }), _jsxs(Button, { onClick: () => setShowNewMovementDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "New Movement"] })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: movements.map((movement) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: getMovementIcon(movement.movementType) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: movement.product.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [movement.product.sku, " \u2022 ", movement.movementType.replace('_', ' ')] }), movement.reason && (_jsx("p", { className: "text-xs text-muted-foreground mt-1", children: movement.reason }))] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs("div", { className: "text-center", children: [_jsxs("p", { className: `font-medium ${movement.quantity > 0 ? 'text-green-600' : 'text-red-600'}`, children: [movement.quantity > 0 ? '+' : '', movement.quantity] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Quantity" })] }), movement.unitCost && (_jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "font-medium", children: ["$", Number(movement.unitCost || 0).toFixed(2)] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Unit Cost" })] })), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: new Date(movement.movementDate).toLocaleDateString() }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Date" })] }), movement.location && (_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: movement.location.name }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Location" })] })), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleViewMovement(movement), children: _jsx(Eye, { className: "w-4 h-4" }) })] })] }, movement.id))) }) })] }) }), _jsx(TabsContent, { value: "alerts", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { children: "Inventory Alerts" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Button, { variant: "outline", onClick: handleGenerateAlerts, disabled: alertsQuery.isLoading, children: [_jsx(RefreshCw, { className: `w-4 h-4 mr-2 ${alertsQuery.isLoading ? 'animate-spin' : ''}` }), "Generate Alerts"] }), _jsxs(Button, { variant: "outline", onClick: () => setShowAlertSettingsDialog(true), children: [_jsx(Settings, { className: "w-4 h-4 mr-2" }), "Alert Settings"] })] })] }) }), _jsx(CardContent, { children: alertsQuery.isLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-4 w-4 animate-spin mr-2" }), _jsx("span", { className: "text-sm text-muted-foreground", children: "Loading alerts..." })] })) : alerts?.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-muted-foreground", children: [_jsx(Bell, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), _jsx("p", { className: "text-lg font-medium", children: "No alerts found" }), _jsx("p", { className: "text-sm", children: "Generate alerts to see inventory warnings and recommendations" }), _jsxs(Button, { className: "mt-4", onClick: handleGenerateAlerts, disabled: alertsQuery.isLoading, children: [_jsx(RefreshCw, { className: `w-4 h-4 mr-2 ${alertsQuery.isLoading ? 'animate-spin' : ''}` }), "Generate Alerts"] })] })) : (_jsx("div", { className: "space-y-4", children: alerts.map((alert) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center", children: getAlertIcon(alert.alertType) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: alert.product.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [alert.product.sku, " \u2022 ", alert.alertType.replace('_', ' ')] }), _jsxs("p", { className: "text-xs text-muted-foreground mt-1", children: ["Current: ", alert.product.stockQuantity, " \u2022 Threshold: ", alert.threshold] }), alert.message && (_jsx("p", { className: "text-xs text-muted-foreground mt-1 italic", children: alert.message }))] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsx(Badge, { variant: alert.status === 'PENDING' ? 'destructive' :
                                                                    alert.status === 'ACKNOWLEDGED' ? 'secondary' :
                                                                        'default', children: alert.status }), alert.location && (_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "font-medium", children: alert.location.name }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Location" })] })), _jsxs("div", { className: "flex gap-1", children: [alert.status === 'PENDING' && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleAcknowledgeAlert(alert.id), children: _jsx(Check, { className: "w-4 h-4" }) })), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleDismissAlert(alert.id), children: _jsx(X, { className: "w-4 h-4" }) })] })] })] }, alert.id))) })) })] }) }), _jsx(TabsContent, { value: "transfers", className: "space-y-4", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { children: "Inventory Transfers" }), _jsxs(Button, { onClick: () => setShowNewTransferDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "New Transfer"] })] }) }), _jsx(CardContent, { children: transfersQuery.isLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-4 w-4 animate-spin mr-2" }), _jsx("span", { className: "text-sm text-muted-foreground", children: "Loading transfers..." })] })) : transfers?.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-muted-foreground", children: [_jsx(ArrowRightLeft, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), _jsx("p", { className: "text-lg font-medium", children: "No transfers found" }), _jsx("p", { className: "text-sm", children: "Create your first inventory transfer between locations" }), _jsxs(Button, { className: "mt-4", onClick: () => setShowNewTransferDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "New Transfer"] })] })) : (_jsx("div", { className: "space-y-4", children: transfers.map((transfer) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center", children: _jsx(ArrowRightLeft, { className: "w-4 h-4 text-blue-600" }) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: transfer.product.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [transfer.product.sku, " \u2022 ", transfer.quantity, " units"] }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: transfer.fromLocation ?
                                                                            `${transfer.fromLocation.name} → ${transfer.toLocation.name}` :
                                                                            `→ ${transfer.toLocation.name}` }), transfer.reference && (_jsxs("p", { className: "text-xs text-muted-foreground mt-1", children: ["Ref: ", transfer.reference] }))] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [getTransferStatusBadge(transfer.status), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "text-sm font-medium", children: new Date(transfer.transferDate).toLocaleDateString() }), _jsx("p", { className: "text-xs text-muted-foreground", children: transfer.requestedBy && `by ${transfer.requestedBy}` })] }), _jsxs("div", { className: "flex gap-1", children: [transfer.status === 'PENDING' && (_jsxs(_Fragment, { children: [_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleUpdateTransferStatus(transfer.id, 'IN_TRANSIT'), children: _jsx(ArrowRight, { className: "w-4 h-4" }) }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleUpdateTransferStatus(transfer.id, 'CANCELLED'), children: _jsx(X, { className: "w-4 h-4" }) })] })), transfer.status === 'IN_TRANSIT' && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleUpdateTransferStatus(transfer.id, 'COMPLETED'), children: _jsx(Check, { className: "w-4 h-4" }) })), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleViewTransfer(transfer), children: _jsx(Eye, { className: "w-4 h-4" }) })] })] })] }, transfer.id))) })) })] }) }), _jsx(TabsContent, { value: "analytics", className: "space-y-4", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "w-5 h-5" }), "Top Products by Value"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: (analytics?.topProducts || []).slice(0, 5).map((product, index) => (_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-sm font-medium text-blue-600", children: index + 1 }) }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: product.name }), _jsx("p", { className: "text-sm text-muted-foreground", children: product.sku })] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("p", { className: "font-medium", children: ["$", (Number(product.stockQuantity) * Number(product.costPrice)).toFixed(2)] }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [Number(product.stockQuantity), " units"] })] })] }, product.id))) }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(PieChart, { className: "w-5 h-5" }), "Category Breakdown"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: (analytics?.categoryBreakdown || []).length === 0 ? (_jsx("p", { className: "text-sm text-muted-foreground text-center py-4", children: "No category data available" })) : ((analytics?.categoryBreakdown || []).map((category, index) => (_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "font-medium", children: category.category || 'Uncategorized' }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [category._count?.categoryId || 0, " products"] })] }), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "font-medium", children: category._sum?.stockQuantity || 0 }), _jsx("p", { className: "text-sm text-muted-foreground", children: "units" })] })] }, category.categoryId || `uncategorized-${index}`)))) }) })] })] }) }), _jsx(TabsContent, { value: "advanced-analytics", className: "space-y-4", children: _jsx(InventoryAnalyticsComponent, { products: allProducts, movements: movements, locations: locations, categories: categories, alerts: alerts, analytics: analytics, kpis: kpis, onRefresh: () => {
                                    queryClient.invalidateQueries({ queryKey: ['products'] });
                                    queryClient.invalidateQueries({ queryKey: ['movements'] });
                                    queryClient.invalidateQueries({ queryKey: ['analytics'] });
                                    queryClient.invalidateQueries({ queryKey: ['categories'] });
                                } }) }), _jsx(TabsContent, { value: "optimization", className: "space-y-4", children: _jsx(InventoryOptimization, { products: allProducts, movements: movements, locations: locations, alerts: alerts, analytics: analytics, kpis: kpis, onApplyRecommendation: (recommendation) => {
                                    toast({
                                        title: "Recommendation Applied",
                                        description: recommendation.title,
                                    });
                                }, onRefresh: () => {
                                    queryClient.invalidateQueries({ queryKey: ['products'] });
                                    queryClient.invalidateQueries({ queryKey: ['analytics'] });
                                    queryClient.invalidateQueries({ queryKey: ['kpis'] });
                                } }) }), _jsx(TabsContent, { value: "ai-forecasting", className: "space-y-4", children: _jsx(DemandForecasting, { forecasts: forecasts || [], insights: insights || {}, recommendations: Array.isArray(recommendations) ? recommendations : [], products: allProducts, movements: movements, alerts: alerts, onRefresh: () => {
                                    queryClient.invalidateQueries({ queryKey: ['forecasts'] });
                                    queryClient.invalidateQueries({ queryKey: ['insights'] });
                                    queryClient.invalidateQueries({ queryKey: ['recommendations'] });
                                    queryClient.invalidateQueries({ queryKey: ['alerts'] });
                                } }) })] }), _jsx(Dialog, { open: showAddProductDialog, onOpenChange: setShowAddProductDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-slate-100/50", children: [_jsxs(DialogHeader, { className: "pb-6 border-b border-slate-200", children: [_jsxs(DialogTitle, { className: "flex items-center gap-3 text-2xl font-bold text-slate-800", children: [_jsx("div", { className: "p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl text-white shadow-lg", children: _jsx(Package, { className: "w-6 h-6" }) }), "Add New Product"] }), _jsx(DialogDescription, { className: "text-slate-600 text-base mt-2", children: "Create a comprehensive product profile with all essential details for your inventory and sales" }), _jsxs("div", { className: "flex items-center justify-between mt-4 px-4 py-3 bg-white/50 rounded-lg border border-slate-200", children: [_jsx("div", { className: "flex items-center gap-3", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-500" }), _jsx("span", { className: "text-sm font-medium text-slate-700", children: "Step 1 of 6" })] }) }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("span", { className: "text-xs text-slate-500", children: "Required fields marked with" }), _jsx("span", { className: "text-red-500 font-bold", children: "*" })] })] })] }), _jsxs(Tabs, { defaultValue: "basic", className: "w-full mt-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-6 bg-white shadow-sm border border-slate-200 rounded-xl p-1", children: [_jsx(TabsTrigger, { value: "basic", className: "data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Package, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Basic Info" })] }) }), _jsx(TabsTrigger, { value: "pricing", className: "data-[state=active]:bg-green-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(DollarSign, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Pricing" })] }) }), _jsx(TabsTrigger, { value: "inventory", className: "data-[state=active]:bg-purple-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(BarChart3, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Inventory" })] }) }), _jsx(TabsTrigger, { value: "shipping", className: "data-[state=active]:bg-orange-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Shipping" })] }) }), _jsx(TabsTrigger, { value: "seo", className: "data-[state=active]:bg-pink-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Marketing" })] }) }), _jsx(TabsTrigger, { value: "advanced", className: "data-[state=active]:bg-slate-600 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:block", children: "Advanced" })] }) })] }), _jsxs(TabsContent, { value: "basic", className: "space-y-8 mt-6", children: [_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Essential Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Core product details required for identification" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "name", className: "flex items-center gap-2 text-sm font-medium text-slate-700", children: ["Product Name ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "name", value: newProduct.name, onChange: (e) => setNewProduct({ ...newProduct, name: e.target.value }), placeholder: "e.g., MacBook Pro 14-inch", className: `pl-4 pr-4 py-3 text-base transition-all duration-200 ${newProduct.name?.trim()
                                                                                    ? 'border-green-300 bg-green-50/30'
                                                                                    : 'border-slate-300 focus:border-blue-400'}` }), newProduct.name?.trim() && (_jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2", children: _jsx(Check, { className: "w-4 h-4 text-green-500" }) }))] }), _jsx("p", { className: "text-xs text-slate-500", children: "This will be displayed to customers" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "sku", className: "flex items-center gap-2 text-sm font-medium text-slate-700", children: ["SKU (Stock Keeping Unit) ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "sku", value: newProduct.sku, onChange: (e) => setNewProduct({ ...newProduct, sku: e.target.value.toUpperCase() }), placeholder: "e.g., MBP-14-256-SLV", className: `pl-4 pr-12 py-3 text-base font-mono transition-all duration-200 ${newProduct.sku?.trim()
                                                                                    ? 'border-green-300 bg-green-50/30'
                                                                                    : 'border-slate-300 focus:border-blue-400'}` }), _jsx(Button, { type: "button", variant: "ghost", size: "sm", className: "absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 p-0", onClick: () => {
                                                                                    const randomSku = `PRD-${Date.now().toString().slice(-6)}`;
                                                                                    setNewProduct({ ...newProduct, sku: randomSku });
                                                                                }, children: _jsx(RefreshCw, { className: "w-3 h-3" }) })] }), _jsx("p", { className: "text-xs text-slate-500", children: "Unique identifier for inventory tracking" })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(Filter, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Product Classification" }), _jsx("p", { className: "text-sm text-slate-600", children: "Categorize and define your product type" })] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "category", className: "text-sm font-medium text-slate-700", children: "Category" }), _jsxs(Select, { value: newProduct.categoryId || '', onValueChange: (value) => {
                                                                        if (value === 'create-new') {
                                                                            setShowAddCategoryDialog(true);
                                                                        }
                                                                        else {
                                                                            setNewProduct({ ...newProduct, categoryId: value });
                                                                        }
                                                                    }, children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select a category" }) }), _jsxs(SelectContent, { children: [categories.map((category) => (_jsx(SelectItem, { value: category.id, className: "py-3", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-500" }), category.name] }) }, category.id))), _jsx(SelectItem, { value: "create-new", className: "py-3 border-t border-slate-200 mt-2", children: _jsxs("div", { className: "flex items-center gap-2 text-blue-600", children: [_jsx(Plus, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Create New Category" })] }) })] })] })] }) }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "type", className: "text-sm font-medium text-slate-700", children: "Product Type" }), _jsxs(Select, { value: newProduct.type, onValueChange: (value) => setNewProduct({ ...newProduct, type: value }), children: [_jsx(SelectTrigger, { className: "py-4 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200 h-auto min-h-[60px]", children: _jsx(SelectValue, { placeholder: "Select product type" }) }), _jsxs(SelectContent, { className: "w-full", children: [_jsx(SelectItem, { value: "PRODUCT", className: "py-4 cursor-pointer hover:bg-blue-50", children: _jsxs("div", { className: "flex items-center gap-4 w-full", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { className: "flex-1", children: [_jsx("div", { className: "font-semibold text-base text-slate-900", children: "Physical Product" }), _jsx("div", { className: "text-sm text-slate-600 mt-1", children: "Tangible items that require shipping and inventory tracking" })] })] }) }), _jsx(SelectItem, { value: "SERVICE", className: "py-4 cursor-pointer hover:bg-purple-50", children: _jsxs("div", { className: "flex items-center gap-4 w-full", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { className: "flex-1", children: [_jsx("div", { className: "font-semibold text-base text-slate-900", children: "Service" }), _jsx("div", { className: "text-sm text-slate-600 mt-1", children: "Time-based services, consultations, or labor" })] })] }) }), _jsx(SelectItem, { value: "DIGITAL", className: "py-4 cursor-pointer hover:bg-green-50", children: _jsxs("div", { className: "flex items-center gap-4 w-full", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(Activity, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { className: "flex-1", children: [_jsx("div", { className: "font-semibold text-base text-slate-900", children: "Digital Product" }), _jsx("div", { className: "text-sm text-slate-600 mt-1", children: "Downloads, software, licenses, or digital content" })] })] }) })] })] }), _jsx("p", { className: "text-xs text-slate-500 mt-2", children: "Choose the type that best describes your product for proper handling and display" })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(Edit, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Product Descriptions" }), _jsx("p", { className: "text-sm text-slate-600", children: "Help customers understand your product" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "shortDescription", className: "text-sm font-medium text-slate-700", children: ["Short Description", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(appears in product listings)" })] }), _jsx(Input, { id: "shortDescription", value: newProduct.shortDescription, onChange: (e) => setNewProduct({ ...newProduct, shortDescription: e.target.value }), placeholder: "Brief, compelling product summary...", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", maxLength: 160 }), _jsxs("div", { className: "flex justify-between items-center text-xs", children: [_jsx("span", { className: "text-slate-500", children: "Keep it concise and engaging" }), _jsxs("span", { className: `${newProduct.shortDescription?.length > 140 ? 'text-orange-500' : 'text-slate-400'}`, children: [newProduct.shortDescription?.length || 0, "/160"] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "description", className: "text-sm font-medium text-slate-700", children: ["Full Description", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(detailed product information)" })] }), _jsx(Textarea, { id: "description", value: newProduct.description, onChange: (e) => setNewProduct({ ...newProduct, description: e.target.value }), placeholder: "Detailed product description, features, benefits, specifications...", rows: 4, className: "text-base resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Include features, benefits, and specifications customers need to know" })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(QrCode, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Additional Details" }), _jsx("p", { className: "text-sm text-slate-600", children: "Tags, barcodes, and other identifiers" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "tags", className: "text-sm font-medium text-slate-700", children: ["Tags", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(for search and filtering)" })] }), _jsx(Input, { id: "tags", value: newProduct.tags, onChange: (e) => setNewProduct({ ...newProduct, tags: e.target.value }), placeholder: "laptop, electronics, apple, premium", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Separate tags with commas - helps customers find your product" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "barcode", className: "text-sm font-medium text-slate-700", children: ["Barcode/UPC", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(optional)" })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "barcode", value: newProduct.barcode, onChange: (e) => setNewProduct({ ...newProduct, barcode: e.target.value }), placeholder: "Enter or scan barcode", className: "py-3 text-base font-mono border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx(Button, { type: "button", variant: "outline", size: "sm", className: "px-4 py-3", children: _jsx(QrCode, { className: "w-4 h-4" }) })] }), _jsx("p", { className: "text-xs text-slate-500", children: "For inventory scanning and POS systems" })] })] })] })] }), _jsxs(TabsContent, { value: "pricing", className: "space-y-8 mt-6", children: [_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(DollarSign, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Pricing Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set your selling price and cost structure" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "unitPrice", className: "flex items-center gap-2 text-sm font-medium text-slate-700", children: ["Selling Price ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("div", { className: "relative", children: [_jsx("div", { className: "absolute left-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "$" }), _jsx(Input, { id: "unitPrice", type: "number", step: "0.01", min: "0", value: newProduct.unitPrice || '', onChange: (e) => setNewProduct({ ...newProduct, unitPrice: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: `pl-8 pr-4 py-3 text-base font-semibold transition-all duration-200 ${newProduct.unitPrice > 0
                                                                                    ? 'border-green-300 bg-green-50/30'
                                                                                    : 'border-slate-300 focus:border-green-400'}` })] }), _jsx("p", { className: "text-xs text-slate-500", children: "The price customers will pay" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "costPrice", className: "text-sm font-medium text-slate-700", children: ["Cost Price", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(your cost)" })] }), _jsxs("div", { className: "relative", children: [_jsx("div", { className: "absolute left-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "$" }), _jsx(Input, { id: "costPrice", type: "number", step: "0.01", min: "0", value: newProduct.costPrice || '', onChange: (e) => setNewProduct({ ...newProduct, costPrice: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pl-8 pr-4 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsx("p", { className: "text-xs text-slate-500", children: "What you pay for this product" })] })] }), newProduct.unitPrice > 0 && newProduct.costPrice > 0 && (_jsx("div", { className: "mt-6 p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg border border-blue-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800", children: "Profit Analysis" }), _jsxs("div", { className: "flex items-center gap-4 mt-2", children: [_jsxs("div", { className: "text-xs", children: [_jsx("span", { className: "text-slate-600", children: "Profit: " }), _jsxs("span", { className: "font-semibold text-green-600", children: ["$", (newProduct.unitPrice - newProduct.costPrice).toFixed(2)] })] }), _jsxs("div", { className: "text-xs", children: [_jsx("span", { className: "text-slate-600", children: "Margin: " }), _jsxs("span", { className: "font-semibold text-blue-600", children: [(((newProduct.unitPrice - newProduct.costPrice) / newProduct.unitPrice) * 100).toFixed(1), "%"] })] })] })] }), _jsx(PieChart, { className: "w-6 h-6 text-blue-600" })] }) }))] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-yellow-100 rounded-lg", children: _jsx(Calculator, { className: "w-5 h-5 text-yellow-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Tax Configuration" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set up tax rates and preferences" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "taxRate", className: "text-sm font-medium text-slate-700", children: "Tax Rate" }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "taxRate", type: "number", step: "0.01", min: "0", max: "100", value: newProduct.taxRate || '', onChange: (e) => setNewProduct({ ...newProduct, taxRate: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pr-8 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "%" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "taxCode", className: "text-sm font-medium text-slate-700", children: "Tax Code" }), _jsxs(Select, { value: newProduct.taxCode || '', onValueChange: (value) => setNewProduct({ ...newProduct, taxCode: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select tax code" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "STANDARD", children: "Standard Tax" }), _jsx(SelectItem, { value: "GST", children: "GST (Goods & Services Tax)" }), _jsx(SelectItem, { value: "VAT", children: "VAT (Value Added Tax)" }), _jsx(SelectItem, { value: "SALES_TAX", children: "Sales Tax" }), _jsx(SelectItem, { value: "EXCISE", children: "Excise Tax" }), _jsx(SelectItem, { value: "IMPORT_DUTY", children: "Import Duty" }), _jsx(SelectItem, { value: "LUXURY_TAX", children: "Luxury Tax" }), _jsx(SelectItem, { value: "ZERO_RATED", children: "Zero-Rated" }), _jsx(SelectItem, { value: "EXEMPT", children: "Tax Exempt" })] })] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Classification for tax reporting and compliance" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Configuration" }), _jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "taxInclusive", checked: newProduct.taxInclusive, onChange: (e) => setNewProduct({ ...newProduct, taxInclusive: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "taxInclusive", className: "text-sm font-medium cursor-pointer", children: "Price includes tax" }), _jsx("p", { className: "text-xs text-slate-500", children: "Tax is already included in the selling price" })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Exemption" }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "taxExempt", checked: newProduct.taxExempt, onChange: (e) => setNewProduct({ ...newProduct, taxExempt: e.target.checked }), className: "w-5 h-5 text-blue-600 bg-white border-2 border-slate-300 rounded focus:ring-blue-500 focus:ring-2 cursor-pointer" }), _jsxs("div", { className: "flex-1", children: [_jsx(Label, { htmlFor: "taxExempt", className: "text-sm font-medium cursor-pointer text-slate-800", children: "Tax exempt product" }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "This product is exempt from all taxes" })] })] })] })] }), newProduct.unitPrice > 0 && (_jsxs("div", { className: "mt-6 p-4 bg-gradient-to-br from-yellow-50 to-amber-50 rounded-lg border border-yellow-200", children: [_jsxs("div", { className: "flex items-center gap-2 mb-3", children: [_jsx(Calculator, { className: "w-4 h-4 text-yellow-600" }), _jsx("h4", { className: "text-sm font-semibold text-slate-800", children: "Tax Calculation Preview" }), newProduct.taxCode && (_jsx("span", { className: "px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full", children: newProduct.taxCode }))] }), newProduct.taxExempt ? (_jsxs("div", { className: "text-center py-3", children: [_jsxs("div", { className: "inline-flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg", children: [_jsx(Shield, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Tax Exempt Product" })] }), _jsx("p", { className: "text-sm text-slate-600 mt-2", children: "No tax will be applied to this product" })] })) : newProduct.taxRate > 0 ? (_jsx("div", { className: "grid grid-cols-2 gap-4 text-sm", children: newProduct.taxInclusive ? (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Price (tax inclusive): " }), _jsxs("span", { className: "font-semibold", children: ["$", Number(newProduct.unitPrice).toFixed(2)] })] }), _jsxs("div", { children: [_jsxs("span", { className: "text-slate-600", children: ["Tax amount (", newProduct.taxRate, "%): "] }), _jsxs("span", { className: "font-semibold text-yellow-600", children: ["$", ((Number(newProduct.unitPrice) * Number(newProduct.taxRate)) / (100 + Number(newProduct.taxRate))).toFixed(2)] })] }), _jsxs("div", { className: "col-span-2 pt-2 border-t border-yellow-200", children: [_jsx("span", { className: "text-slate-600", children: "Net price (excluding tax): " }), _jsxs("span", { className: "font-bold text-slate-800", children: ["$", (Number(newProduct.unitPrice) - ((Number(newProduct.unitPrice) * Number(newProduct.taxRate)) / (100 + Number(newProduct.taxRate)))).toFixed(2)] })] })] })) : (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Base price: " }), _jsxs("span", { className: "font-semibold", children: ["$", Number(newProduct.unitPrice).toFixed(2)] })] }), _jsxs("div", { children: [_jsxs("span", { className: "text-slate-600", children: ["Tax amount (", newProduct.taxRate, "%): "] }), _jsxs("span", { className: "font-semibold text-yellow-600", children: ["$", (Number(newProduct.unitPrice) * (Number(newProduct.taxRate) / 100)).toFixed(2)] })] }), _jsxs("div", { className: "col-span-2 pt-2 border-t border-yellow-200", children: [_jsx("span", { className: "text-slate-600", children: "Total price (including tax): " }), _jsxs("span", { className: "font-bold text-slate-800", children: ["$", (Number(newProduct.unitPrice) * (1 + Number(newProduct.taxRate) / 100)).toFixed(2)] })] })] })) })) : (_jsxs("div", { className: "text-center py-3", children: [_jsxs("div", { className: "inline-flex items-center gap-2 px-3 py-2 bg-slate-100 text-slate-600 rounded-lg", children: [_jsx(AlertCircle, { className: "w-4 h-4" }), _jsx("span", { children: "No tax rate specified" })] }), _jsx("p", { className: "text-sm text-slate-500 mt-2", children: "Enter a tax rate to see calculations" })] }))] }))] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-pink-100 rounded-lg", children: _jsx(TrendingUp, { className: "w-5 h-5 text-pink-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Marketing & Promotion" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set special product badges and promotion flags" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "isFeatured", checked: newProduct.isFeatured, onChange: (e) => setNewProduct({ ...newProduct, isFeatured: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsxs(Label, { htmlFor: "isFeatured", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), "Featured Product"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Highlight in featured sections" })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "isBestSeller", checked: newProduct.isBestSeller, onChange: (e) => setNewProduct({ ...newProduct, isBestSeller: e.target.checked }), className: "w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500" }), _jsxs("div", { children: [_jsxs(Label, { htmlFor: "isBestSeller", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), "Best Seller"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Popular choice badge" })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "isNewArrival", checked: newProduct.isNewArrival, onChange: (e) => setNewProduct({ ...newProduct, isNewArrival: e.target.checked }), className: "w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500" }), _jsxs("div", { children: [_jsxs(Label, { htmlFor: "isNewArrival", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), "New Arrival"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Recently added product" })] })] })] })] })] }), _jsxs(TabsContent, { value: "inventory", className: "space-y-8 mt-6", children: [_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(BarChart3, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Stock Management" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set initial stock and inventory thresholds" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "stockQuantity", className: "text-sm font-medium text-slate-700", children: "Initial Stock Quantity" }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "stockQuantity", type: "number", min: "0", step: "1", value: newProduct.stockQuantity || '', onChange: (e) => setNewProduct({ ...newProduct, stockQuantity: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "pr-12 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 text-sm", children: "units" })] }), _jsx("p", { className: "text-xs text-slate-500", children: "How many units you currently have in stock" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "reorderPoint", className: "text-sm font-medium text-slate-700", children: ["Reorder Point", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(alert threshold)" })] }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "reorderPoint", type: "number", min: "0", step: "1", value: newProduct.reorderPoint || '', onChange: (e) => setNewProduct({ ...newProduct, reorderPoint: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "pr-12 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 text-sm", children: "units" })] }), _jsx("p", { className: "text-xs text-slate-500", children: "Get notified when stock reaches this level" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "minStockLevel", className: "text-sm font-medium text-slate-700", children: "Minimum Stock Level" }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "minStockLevel", type: "number", min: "0", step: "1", value: newProduct.minStockLevel || '', onChange: (e) => setNewProduct({ ...newProduct, minStockLevel: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "pr-12 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 text-sm", children: "units" })] }), _jsx("p", { className: "text-xs text-slate-500", children: "Never let stock go below this amount" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "maxStockLevel", className: "text-sm font-medium text-slate-700", children: ["Maximum Stock Level", _jsx("span", { className: "ml-2 text-xs text-slate-500", children: "(storage capacity)" })] }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "maxStockLevel", type: "number", min: "0", step: "1", value: newProduct.maxStockLevel || '', onChange: (e) => setNewProduct({ ...newProduct, maxStockLevel: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "pr-12 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 text-sm", children: "units" })] }), _jsx("p", { className: "text-xs text-slate-500", children: "Maximum units you can store" })] })] }), newProduct.stockQuantity > 0 && newProduct.reorderPoint > 0 && (_jsxs("div", { className: "mt-6 p-4 bg-gradient-to-br from-slate-50 to-slate-100 rounded-lg border border-slate-200", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800", children: "Stock Status" }), _jsx("div", { className: `px-2 py-1 rounded-full text-xs font-medium ${newProduct.stockQuantity <= newProduct.reorderPoint
                                                                            ? 'bg-red-100 text-red-700'
                                                                            : newProduct.stockQuantity <= (newProduct.reorderPoint * 2)
                                                                                ? 'bg-yellow-100 text-yellow-700'
                                                                                : 'bg-green-100 text-green-700'}`, children: newProduct.stockQuantity <= newProduct.reorderPoint
                                                                            ? 'Low Stock'
                                                                            : newProduct.stockQuantity <= (newProduct.reorderPoint * 2)
                                                                                ? 'Normal'
                                                                                : 'Well Stocked' })] }), _jsxs("div", { className: "flex items-center gap-2 text-sm", children: [_jsx("span", { className: "text-slate-600", children: "Current:" }), _jsxs("span", { className: "font-semibold", children: [newProduct.stockQuantity, " units"] }), _jsx("span", { className: "text-slate-400", children: "\u2022" }), _jsx("span", { className: "text-slate-600", children: "Reorder at:" }), _jsxs("span", { className: "font-semibold", children: [newProduct.reorderPoint, " units"] })] })] }))] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Inventory Settings" }), _jsx("p", { className: "text-sm text-slate-600", children: "Configure how this product behaves in inventory" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center gap-4 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "trackInventory", checked: newProduct.trackInventory, onChange: (e) => setNewProduct({ ...newProduct, trackInventory: e.target.checked }), className: "w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex-1", children: [_jsxs(Label, { htmlFor: "trackInventory", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx(Activity, { className: "w-4 h-4 text-blue-600" }), "Track Inventory"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Monitor stock levels and movements for this product" })] })] }), _jsxs("div", { className: "flex items-center gap-4 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "allowBackorder", checked: newProduct.allowBackorder, onChange: (e) => setNewProduct({ ...newProduct, allowBackorder: e.target.checked }), className: "w-5 h-5 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex-1", children: [_jsxs(Label, { htmlFor: "allowBackorder", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx(ArrowRightLeft, { className: "w-4 h-4 text-orange-600" }), "Allow Backorder"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Customers can order even when out of stock" })] })] }), _jsxs("div", { className: "flex items-center gap-4 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "allowPreorder", checked: newProduct.allowPreorder, onChange: (e) => setNewProduct({ ...newProduct, allowPreorder: e.target.checked }), className: "w-5 h-5 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500" }), _jsxs("div", { className: "flex-1", children: [_jsxs(Label, { htmlFor: "allowPreorder", className: "text-sm font-medium cursor-pointer flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-purple-600" }), "Allow Preorder"] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Accept orders before product becomes available" })] })] })] })] }), newProduct.allowPreorder && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(Calendar, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Preorder Configuration" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set when this product will become available" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "preorderDate", className: "text-sm font-medium text-slate-700", children: "Available From Date" }), _jsx(Input, { id: "preorderDate", type: "date", value: newProduct.preorderDate, onChange: (e) => setNewProduct({ ...newProduct, preorderDate: e.target.value }), min: new Date().toISOString().split('T')[0], className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Customers will be notified when the product becomes available" })] }), newProduct.preorderDate && (_jsx("div", { className: "mt-4 p-3 bg-purple-50 rounded-lg border border-purple-200", children: _jsxs("div", { className: "flex items-center gap-2 text-sm", children: [_jsx(Bell, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-purple-800 font-medium", children: ["Product will be available on ", new Date(newProduct.preorderDate).toLocaleDateString()] })] }) }))] }))] }), _jsxs(TabsContent, { value: "shipping", className: "space-y-6", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "weight", children: "Weight (kg)" }), _jsx(Input, { id: "weight", type: "number", step: "0.01", value: newProduct.weight, onChange: (e) => setNewProduct({ ...newProduct, weight: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "text-sm font-medium", children: "Dimensions (cm)" }), _jsxs("div", { className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "length", children: "Length" }), _jsx(Input, { id: "length", type: "number", step: "0.01", value: newProduct.dimensions?.length || 0, onChange: (e) => setNewProduct({
                                                                            ...newProduct,
                                                                            dimensions: {
                                                                                ...newProduct.dimensions,
                                                                                length: parseFloat(e.target.value) || 0,
                                                                                width: newProduct.dimensions?.width || 0,
                                                                                height: newProduct.dimensions?.height || 0
                                                                            }
                                                                        }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "width", children: "Width" }), _jsx(Input, { id: "width", type: "number", step: "0.01", value: newProduct.dimensions?.width || 0, onChange: (e) => setNewProduct({
                                                                            ...newProduct,
                                                                            dimensions: {
                                                                                ...newProduct.dimensions,
                                                                                width: parseFloat(e.target.value) || 0,
                                                                                length: newProduct.dimensions?.length || 0,
                                                                                height: newProduct.dimensions?.height || 0
                                                                            }
                                                                        }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "height", children: "Height" }), _jsx(Input, { id: "height", type: "number", step: "0.01", value: newProduct.dimensions?.height || 0, onChange: (e) => setNewProduct({
                                                                            ...newProduct,
                                                                            dimensions: {
                                                                                ...newProduct.dimensions,
                                                                                width: newProduct.dimensions?.width || 0,
                                                                                length: newProduct.dimensions?.length || 0,
                                                                                height: parseFloat(e.target.value) || 0
                                                                            }
                                                                        }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "shippingClass", children: "Shipping Class" }), _jsxs(Select, { value: newProduct.shippingClass, onValueChange: (value) => setNewProduct({ ...newProduct, shippingClass: value }), children: [_jsx(SelectTrigger, { className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select shipping class" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "standard", children: "Standard" }), _jsx(SelectItem, { value: "express", children: "Express" }), _jsx(SelectItem, { value: "overnight", children: "Overnight" }), _jsx(SelectItem, { value: "fragile", children: "Fragile" }), _jsx(SelectItem, { value: "hazardous", children: "Hazardous" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "text-sm font-medium", children: "Product Type Flags" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("input", { type: "checkbox", id: "isPhysical", checked: newProduct.isPhysical, onChange: (e) => setNewProduct({ ...newProduct, isPhysical: e.target.checked }), className: "rounded" }), _jsx(Label, { htmlFor: "isPhysical", className: "text-sm", children: "Physical Product" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("input", { type: "checkbox", id: "isDigital", checked: newProduct.isDigital, onChange: (e) => setNewProduct({ ...newProduct, isDigital: e.target.checked }), className: "rounded" }), _jsx(Label, { htmlFor: "isDigital", className: "text-sm", children: "Digital Product" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("input", { type: "checkbox", id: "isService", checked: newProduct.isService, onChange: (e) => setNewProduct({ ...newProduct, isService: e.target.checked }), className: "rounded" }), _jsx(Label, { htmlFor: "isService", className: "text-sm", children: "Service" })] })] })] })] }), _jsxs(TabsContent, { value: "seo", className: "space-y-6", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "seoTitle", children: "SEO Title" }), _jsx(Input, { id: "seoTitle", value: newProduct.seoTitle, onChange: (e) => setNewProduct({ ...newProduct, seoTitle: e.target.value }), placeholder: "SEO optimized title", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "seoDescription", children: "SEO Description" }), _jsx(Textarea, { id: "seoDescription", value: newProduct.seoDescription, onChange: (e) => setNewProduct({ ...newProduct, seoDescription: e.target.value }), placeholder: "SEO meta description", rows: 3, className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "metaKeywords", children: "Meta Keywords" }), _jsx(Input, { id: "metaKeywords", value: newProduct.metaKeywords, onChange: (e) => setNewProduct({ ...newProduct, metaKeywords: e.target.value }), placeholder: "Keywords separated by commas", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs(TabsContent, { value: "advanced", className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "warrantyPeriod", children: "Warranty Period" }), _jsx(Input, { id: "warrantyPeriod", type: "number", value: newProduct.warrantyPeriod, onChange: (e) => setNewProduct({ ...newProduct, warrantyPeriod: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "warrantyUnit", children: "Warranty Unit" }), _jsxs(Select, { value: newProduct.warrantyUnit, onValueChange: (value) => setNewProduct({ ...newProduct, warrantyUnit: value }), children: [_jsx(SelectTrigger, { className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "DAYS", children: "Days" }), _jsx(SelectItem, { value: "WEEKS", children: "Weeks" }), _jsx(SelectItem, { value: "MONTHS", children: "Months" }), _jsx(SelectItem, { value: "YEARS", children: "Years" })] })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "returnPolicy", children: "Return Policy" }), _jsx(Textarea, { id: "returnPolicy", value: newProduct.returnPolicy, onChange: (e) => setNewProduct({ ...newProduct, returnPolicy: e.target.value }), placeholder: "Return policy details", rows: 3, className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "status", children: "Status" }), _jsxs(Select, { value: newProduct.status, onValueChange: (value) => setNewProduct({ ...newProduct, status: value }), children: [_jsx(SelectTrigger, { className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "ACTIVE", children: "Active" }), _jsx(SelectItem, { value: "INACTIVE", children: "Inactive" }), _jsx(SelectItem, { value: "DISCONTINUED", children: "Discontinued" }), _jsx(SelectItem, { value: "DRAFT", children: "Draft" })] })] })] })] })] }), _jsxs("div", { className: "sticky bottom-0 bg-white border-t border-slate-200 px-6 py-4 mt-8", children: [_jsxs("div", { className: "mb-4", children: [(!newProduct.name?.trim() || !newProduct.sku?.trim() || newProduct.unitPrice <= 0) && (_jsxs("div", { className: "flex items-start gap-3 p-3 bg-red-50 border border-red-200 rounded-lg mb-4", children: [_jsx(AlertTriangle, { className: "w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" }), _jsxs("div", { className: "text-sm", children: [_jsx("div", { className: "font-medium text-red-800 mb-1", children: "Please complete required fields:" }), _jsxs("ul", { className: "text-red-700 space-y-1", children: [!newProduct.name?.trim() && _jsx("li", { children: "\u2022 Product name is required" }), !newProduct.sku?.trim() && _jsx("li", { children: "\u2022 SKU is required" }), newProduct.unitPrice <= 0 && _jsx("li", { children: "\u2022 Selling price must be greater than 0" })] })] })] })), newProduct.name?.trim() && newProduct.sku?.trim() && newProduct.unitPrice > 0 && (_jsxs("div", { className: "flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg mb-4", children: [_jsx(Check, { className: "w-4 h-4 text-green-500" }), _jsxs("div", { className: "text-sm", children: [_jsx("div", { className: "font-medium text-green-800", children: "Ready to create product" }), _jsx("div", { className: "text-green-700", children: "All required information has been provided" })] })] }))] }), _jsxs(DialogFooter, { className: "gap-3", children: [_jsxs(Button, { variant: "outline", onClick: () => setShowAddProductDialog(false), className: "px-6 py-2.5 text-base font-medium", children: [_jsx(X, { className: "w-4 h-4 mr-2" }), "Cancel"] }), _jsxs(Button, { disabled: !newProduct.name?.trim() ||
                                                    !newProduct.sku?.trim() ||
                                                    newProduct.unitPrice <= 0 ||
                                                    newProduct.costPrice < 0 ||
                                                    newProduct.stockQuantity < 0 ||
                                                    !newProduct.status?.trim() ||
                                                    createProductMutation.isPending, 
                                                    className: "px-6 py-2.5 text-base font-medium bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed", 
                                                    onClick: () => {
                                                        // Comprehensive validation with specific error messages
                                                        if (!newProduct.name?.trim()) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "Product name is required",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (!newProduct.sku?.trim()) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "SKU is required",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (newProduct.unitPrice <= 0) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "Unit price must be greater than 0",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (newProduct.costPrice < 0) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "Cost price cannot be negative",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (newProduct.stockQuantity < 0) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "Stock quantity cannot be negative",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (!newProduct.status?.trim()) {
                                                            toast({
                                                                title: "Validation Error",
                                                                description: "Product status is required",
                                                                variant: "destructive"
                                                            });
                                                            return;
                                                        }
                                                        if (!newProduct.categoryId || newProduct.categoryId === '') {
                                                            toast({
                                                                title: "Validation Warning",
                                                                description: "No category selected. Product will be marked as uncategorized.",
                                                                variant: "default"
                                                            });
                                                        }
                                                        
                                                        // Use the mutation to create the product
                                                        createProductMutation.mutate({
                                                            ...newProduct,
                                                            companyId: companyId,
                                                            type: 'PRODUCT',
                                                            unitPrice: newProduct.unitPrice,
                                                            costPrice: newProduct.costPrice,
                                                            stockQuantity: newProduct.stockQuantity,
                                                            availableQuantity: newProduct.stockQuantity,
                                                            reservedQuantity: 0,
                                                            trackSerialNumbers: false,
                                                            trackBatches: false,
                                                            costingMethod: 'WEIGHTED_AVERAGE',
                                                            taxInclusive: newProduct.taxInclusive,
                                                            taxExempt: newProduct.taxExempt,
                                                            warrantyUnit: newProduct.warrantyUnit,
                                                            status: newProduct.status.toUpperCase(),
                                                            // Convert JSON fields to strings
                                                            images: JSON.stringify(newProduct.images || []),
                                                            variants: JSON.stringify(newProduct.variants || []),
                                                            relatedProducts: JSON.stringify(newProduct.relatedProducts || []),
                                                            upsellProducts: JSON.stringify(newProduct.upsellProducts || []),
                                                            crossSellProducts: JSON.stringify(newProduct.crossSellProducts || []),
                                                            customFields: JSON.stringify(newProduct.customFields || {}),
                                                            // Convert dimensions object to individual fields
                                                            dimensionsLength: newProduct.dimensions?.length || 0,
                                                            dimensionsWidth: newProduct.dimensions?.width || 0,
                                                            dimensionsHeight: newProduct.dimensions?.height || 0,
                                                            // Remove the dimensions object to avoid conflicts
                                                            dimensions: undefined
                                                        });
                                                    }, 
                                                    children: [
                                                        createProductMutation.isPending ? 
                                                            _jsx(RefreshCw, { className: "w-4 h-4 mr-2 animate-spin" }) : 
                                                            _jsx(Package, { className: "w-4 h-4 mr-2" }), 
                                                        createProductMutation.isPending ? "Creating..." : "Create Product"
                                                    ] })] })] })] }) }), _jsx(Dialog, { open: showViewProductDialog, onOpenChange: setShowViewProductDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-slate-100/50", children: [_jsxs(DialogHeader, { className: "pb-6 border-b border-slate-200", children: [_jsxs(DialogTitle, { className: "flex items-center gap-3 text-2xl font-bold text-slate-800", children: [_jsx("div", { className: "p-2 bg-gradient-to-br from-green-500 to-green-600 rounded-xl text-white shadow-lg", children: _jsx(Eye, { className: "w-6 h-6" }) }), "Product Details"] }), _jsx(DialogDescription, { className: "text-slate-600 text-base mt-2", children: "Comprehensive view of product information and analytics" })] }), selectedProduct && (_jsxs("div", { className: "space-y-8 mt-6", children: [_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Essential Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Core product details and identification" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Product Name" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-semibold text-slate-900", children: selectedProduct.name }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "SKU (Stock Keeping Unit)" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-mono text-slate-900", children: selectedProduct.sku }) })] })] }), selectedProduct.description && (_jsxs("div", { className: "mt-6 space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Description" }), _jsx("div", { className: "p-4 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base text-slate-900 leading-relaxed", children: selectedProduct.description }) })] }))] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(DollarSign, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Pricing & Financial Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Costs, pricing, and profit analysis" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Selling Price" }), _jsx("div", { className: "p-3 bg-green-50 border border-green-200 rounded-lg", children: _jsxs("p", { className: "text-xl font-bold text-green-700", children: ["$", Number(selectedProduct.unitPrice).toFixed(2)] }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Cost Price" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsxs("p", { className: "text-xl font-semibold text-slate-700", children: ["$", Number(selectedProduct.costPrice).toFixed(2)] }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Profit per Unit" }), _jsxs("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: [_jsxs("p", { className: "text-xl font-bold text-blue-700", children: ["$", (Number(selectedProduct.unitPrice) - Number(selectedProduct.costPrice)).toFixed(2)] }), _jsxs("p", { className: "text-xs text-blue-600 mt-1", children: [(((Number(selectedProduct.unitPrice) - Number(selectedProduct.costPrice)) / Number(selectedProduct.unitPrice)) * 100).toFixed(1), "% margin"] })] })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(BarChart3, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Inventory & Stock Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Current stock levels and inventory value" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Current Stock Quantity" }), _jsx("div", { className: "p-4 bg-purple-50 border border-purple-200 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("p", { className: "text-2xl font-bold text-purple-700", children: Number(selectedProduct.stockQuantity) }), _jsx("span", { className: "text-sm text-purple-600 font-medium", children: "units" })] }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Total Inventory Value" }), _jsx("div", { className: "p-4 bg-indigo-50 border border-indigo-200 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("p", { className: "text-2xl font-bold text-indigo-700", children: ["$", (Number(selectedProduct.stockQuantity) * Number(selectedProduct.costPrice)).toFixed(2)] }), _jsx("span", { className: "text-sm text-indigo-600 font-medium", children: "total value" })] }) })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Filter, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Classification & Status" }), _jsx("p", { className: "text-sm text-slate-600", children: "Category, type, and current status" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Category" }), _jsx("div", { className: "p-3 bg-orange-50 border border-orange-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 rounded-full bg-orange-500" }), _jsx("p", { className: "text-base font-medium text-orange-800", children: categories.find(c => c.id === selectedProduct.categoryId)?.name || 'Uncategorized' })] }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Product Type" }), _jsx("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: _jsxs("div", { className: "flex items-center gap-2", children: [selectedProduct.type === 'PRODUCT' && _jsx(Package, { className: "w-4 h-4 text-blue-600" }), selectedProduct.type === 'SERVICE' && _jsx(Settings, { className: "w-4 h-4 text-purple-600" }), selectedProduct.type === 'DIGITAL' && _jsx(Activity, { className: "w-4 h-4 text-green-600" }), _jsx("p", { className: "text-base font-medium text-slate-800", children: selectedProduct.type === 'PRODUCT' ? 'Physical Product' :
                                                                                selectedProduct.type === 'SERVICE' ? 'Service' : 'Digital Product' })] }) })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Status" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("div", { className: `inline-flex px-2 py-1 rounded-full text-sm font-medium ${selectedProduct.status === 'ACTIVE' ? 'bg-green-100 text-green-800' :
                                                                        selectedProduct.status === 'INACTIVE' ? 'bg-red-100 text-red-800' :
                                                                            selectedProduct.status === 'DRAFT' ? 'bg-yellow-100 text-yellow-800' :
                                                                                'bg-gray-100 text-gray-800'}`, children: selectedProduct.status }) })] })] }), (selectedProduct.brand || selectedProduct.model || selectedProduct.tags) && (_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6", children: [selectedProduct.brand && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Brand" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-medium text-slate-800", children: selectedProduct.brand }) })] })), selectedProduct.model && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Model" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-medium text-slate-800", children: selectedProduct.model }) })] })), selectedProduct.tags && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tags" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("div", { className: "flex flex-wrap gap-1", children: selectedProduct.tags.split(',').map((tag, index) => (_jsx("span", { className: "px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full", children: tag.trim() }, index))) }) })] }))] }))] }), (selectedProduct.taxRate || selectedProduct.taxCode || selectedProduct.taxExempt) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-yellow-100 rounded-lg", children: _jsx(Calculator, { className: "w-5 h-5 text-yellow-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Tax Management" }), _jsx("p", { className: "text-sm text-slate-600", children: "Tax rates, codes, and exemption status" })] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: selectedProduct.taxExempt ? (_jsx("div", { className: "col-span-full", children: _jsxs("div", { className: "flex items-center justify-center gap-2 p-4 bg-green-50 border border-green-200 rounded-lg", children: [_jsx(Shield, { className: "w-5 h-5 text-green-600" }), _jsx("span", { className: "text-lg font-semibold text-green-800", children: "Tax Exempt Product" })] }) })) : (_jsxs(_Fragment, { children: [selectedProduct.taxRate && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Rate" }), _jsx("div", { className: "p-3 bg-yellow-50 border border-yellow-200 rounded-lg", children: _jsxs("p", { className: "text-xl font-bold text-yellow-700", children: [selectedProduct.taxRate, "%"] }) })] })), selectedProduct.taxCode && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Code" }), _jsx("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: _jsx("p", { className: "text-base font-medium text-blue-800", children: selectedProduct.taxCode }) })] })), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Configuration" }), _jsxs("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg space-y-2", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-slate-600", children: "Tax Type:" }), _jsx("span", { className: `text-sm font-medium ${selectedProduct.taxInclusive ? 'text-green-600' : 'text-blue-600'}`, children: selectedProduct.taxInclusive ? 'Tax Inclusive' : 'Tax Exclusive' })] }), selectedProduct.taxRate > 0 ? (_jsxs(_Fragment, { children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-slate-600", children: "Tax Rate:" }), _jsxs("span", { className: "text-sm font-semibold text-slate-800", children: [selectedProduct.taxRate, "%"] })] }), _jsx("div", { className: "pt-2 border-t border-slate-300", children: _jsxs("div", { className: "grid grid-cols-2 gap-3 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Unit Price:" }), _jsxs("p", { className: "font-semibold text-slate-800", children: ["$", Number(selectedProduct.unitPrice).toFixed(2)] })] }), selectedProduct.taxInclusive ? (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Tax Amount:" }), _jsxs("p", { className: "font-semibold text-yellow-600", children: ["$", ((Number(selectedProduct.unitPrice) * Number(selectedProduct.taxRate)) / (100 + Number(selectedProduct.taxRate))).toFixed(2)] })] }), _jsxs("div", { className: "col-span-2 pt-1 border-t border-slate-200", children: [_jsx("span", { className: "text-slate-600", children: "Net Price (excl. tax):" }), _jsxs("p", { className: "font-bold text-slate-800", children: ["$", (Number(selectedProduct.unitPrice) - ((Number(selectedProduct.unitPrice) * Number(selectedProduct.taxRate)) / (100 + Number(selectedProduct.taxRate)))).toFixed(2)] })] })] })) : (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Tax Amount:" }), _jsxs("p", { className: "font-semibold text-yellow-600", children: ["$", (Number(selectedProduct.unitPrice) * Number(selectedProduct.taxRate) / 100).toFixed(2)] })] }), _jsxs("div", { className: "col-span-2 pt-1 border-t border-slate-200", children: [_jsx("span", { className: "text-slate-600", children: "Total Price (incl. tax):" }), _jsxs("p", { className: "font-bold text-slate-800", children: ["$", (Number(selectedProduct.unitPrice) + (Number(selectedProduct.unitPrice) * Number(selectedProduct.taxRate) / 100)).toFixed(2)] })] })] }))] }) })] })) : (_jsx("div", { className: "text-center py-2", children: _jsx("span", { className: "text-sm text-slate-500", children: "No tax applied" }) })), selectedProduct.taxCode && (_jsxs("div", { className: "flex items-center justify-between pt-2 border-t border-slate-300", children: [_jsx("span", { className: "text-sm text-slate-600", children: "Tax Code:" }), _jsx("span", { className: "text-sm font-medium text-slate-800", children: selectedProduct.taxCode })] })), selectedProduct.taxExempt && (_jsx("div", { className: "flex items-center justify-center pt-2 border-t border-slate-300", children: _jsx("span", { className: "text-sm font-medium text-green-600 bg-green-50 px-2 py-1 rounded", children: "Tax Exempt Product" }) }))] })] })] })) })] })), (selectedProduct.weight || selectedProduct.dimensions || selectedProduct.barcode || selectedProduct.shippingClass) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-teal-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-teal-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Physical Properties & Shipping" }), _jsx("p", { className: "text-sm text-slate-600", children: "Dimensions, weight, and shipping information" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [selectedProduct.weight && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Weight" }), _jsx("div", { className: "p-3 bg-teal-50 border border-teal-200 rounded-lg", children: _jsxs("p", { className: "text-base font-medium text-teal-800", children: [selectedProduct.weight, " kg"] }) })] })), selectedProduct.dimensions && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Dimensions (L\u00D7W\u00D7H)" }), _jsx("div", { className: "p-3 bg-teal-50 border border-teal-200 rounded-lg", children: _jsx("p", { className: "text-base font-medium text-teal-800", children: typeof selectedProduct.dimensions === 'string'
                                                                        ? selectedProduct.dimensions
                                                                        : `${selectedProduct.dimensions?.length || 0} × ${selectedProduct.dimensions?.width || 0} × ${selectedProduct.dimensions?.height || 0} cm` }) })] })), selectedProduct.barcode && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Barcode" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-mono text-slate-800", children: selectedProduct.barcode }) })] })), selectedProduct.shippingClass && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Shipping Class" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base font-medium text-slate-800", children: selectedProduct.shippingClass }) })] }))] })] })), (selectedProduct.isFeatured || selectedProduct.isBestSeller || selectedProduct.isNewArrival ||
                                        selectedProduct.seoTitle || selectedProduct.seoDescription) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-pink-100 rounded-lg", children: _jsx(TrendingUp, { className: "w-5 h-5 text-pink-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Marketing & SEO" }), _jsx("p", { className: "text-sm text-slate-600", children: "Promotional flags and SEO optimization" })] })] }), (selectedProduct.isFeatured || selectedProduct.isBestSeller || selectedProduct.isNewArrival) && (_jsxs("div", { className: "mb-6", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700 mb-3 block", children: "Promotional Badges" }), _jsxs("div", { className: "flex flex-wrap gap-3", children: [selectedProduct.isFeatured && (_jsxs("div", { className: "px-3 py-2 bg-purple-100 text-purple-800 rounded-lg flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), _jsx("span", { className: "font-medium", children: "Featured Product" })] })), selectedProduct.isBestSeller && (_jsxs("div", { className: "px-3 py-2 bg-orange-100 text-orange-800 rounded-lg flex items-center gap-2", children: [_jsx(TrendingUp, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Best Seller" })] })), selectedProduct.isNewArrival && (_jsxs("div", { className: "px-3 py-2 bg-green-100 text-green-800 rounded-lg flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsx("span", { className: "font-medium", children: "New Arrival" })] }))] })] })), (selectedProduct.seoTitle || selectedProduct.seoDescription || selectedProduct.metaKeywords) && (_jsxs("div", { className: "space-y-4", children: [selectedProduct.seoTitle && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "SEO Title" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base text-slate-800", children: selectedProduct.seoTitle }) })] })), selectedProduct.seoDescription && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "SEO Description" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base text-slate-800", children: selectedProduct.seoDescription }) })] })), selectedProduct.metaKeywords && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Meta Keywords" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("div", { className: "flex flex-wrap gap-1", children: selectedProduct.metaKeywords.split(',').map((keyword, index) => (_jsx("span", { className: "px-2 py-1 bg-indigo-100 text-indigo-800 text-xs rounded-full", children: keyword.trim() }, index))) }) })] }))] }))] })), (selectedProduct.minStockLevel || selectedProduct.maxStockLevel || selectedProduct.reorderPoint ||
                                        selectedProduct.allowBackorder || selectedProduct.allowPreorder) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-indigo-100 rounded-lg", children: _jsx(BarChart3, { className: "w-5 h-5 text-indigo-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Advanced Stock Management" }), _jsx("p", { className: "text-sm text-slate-600", children: "Stock levels, reorder points, and ordering policies" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [selectedProduct.minStockLevel && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Minimum Stock Level" }), _jsx("div", { className: "p-3 bg-red-50 border border-red-200 rounded-lg", children: _jsx("p", { className: "text-xl font-bold text-red-700", children: selectedProduct.minStockLevel }) })] })), selectedProduct.maxStockLevel && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Maximum Stock Level" }), _jsx("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: _jsx("p", { className: "text-xl font-bold text-blue-700", children: selectedProduct.maxStockLevel }) })] })), selectedProduct.reorderPoint && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Reorder Point" }), _jsx("div", { className: "p-3 bg-yellow-50 border border-yellow-200 rounded-lg", children: _jsx("p", { className: "text-xl font-bold text-yellow-700", children: selectedProduct.reorderPoint }) })] }))] }), (selectedProduct.allowBackorder || selectedProduct.allowPreorder) && (_jsxs("div", { className: "mt-6", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700 mb-3 block", children: "Ordering Policies" }), _jsxs("div", { className: "flex flex-wrap gap-3", children: [selectedProduct.allowBackorder && (_jsxs("div", { className: "px-3 py-2 bg-amber-100 text-amber-800 rounded-lg flex items-center gap-2", children: [_jsx(Check, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Backorders Allowed" })] })), selectedProduct.allowPreorder && (_jsxs("div", { className: "px-3 py-2 bg-cyan-100 text-cyan-800 rounded-lg flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Pre-orders Allowed" }), selectedProduct.preorderDate && (_jsxs("span", { className: "text-xs", children: ["(", new Date(selectedProduct.preorderDate).toLocaleDateString(), ")"] }))] }))] })] }))] })), (selectedProduct.warrantyPeriod || selectedProduct.returnPolicy) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-emerald-100 rounded-lg", children: _jsx(Shield, { className: "w-5 h-5 text-emerald-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Warranty & Service" }), _jsx("p", { className: "text-sm text-slate-600", children: "Warranty coverage and return policies" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [selectedProduct.warrantyPeriod && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Warranty Period" }), _jsx("div", { className: "p-3 bg-emerald-50 border border-emerald-200 rounded-lg", children: _jsxs("p", { className: "text-xl font-bold text-emerald-700", children: [selectedProduct.warrantyPeriod, " ", selectedProduct.warrantyUnit?.toLowerCase() || 'months'] }) })] })), selectedProduct.returnPolicy && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Return Policy" }), _jsx("div", { className: "p-3 bg-slate-50 border border-slate-200 rounded-lg", children: _jsx("p", { className: "text-base text-slate-800", children: selectedProduct.returnPolicy }) })] }))] })] }))] })), _jsx("div", { className: "sticky bottom-0 bg-white border-t border-slate-200 px-6 py-4 mt-8", children: _jsxs(DialogFooter, { className: "gap-3", children: [_jsxs(Button, { variant: "outline", onClick: () => setShowViewProductDialog(false), className: "px-6 py-2.5 text-base font-medium", children: [_jsx(X, { className: "w-4 h-4 mr-2" }), "Close"] }), _jsxs(Button, { onClick: () => {
                                                setShowViewProductDialog(false);
                                                handleEditProduct(selectedProduct);
                                            }, className: "px-6 py-2.5 text-base font-medium bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg", children: [_jsx(Edit, { className: "w-4 h-4 mr-2" }), "Edit Product"] })] }) })] }) }), _jsx(Dialog, { open: showEditProductDialog, onOpenChange: setShowEditProductDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-slate-100/50", children: [_jsxs(DialogHeader, { className: "pb-6 border-b border-slate-200", children: [_jsxs(DialogTitle, { className: "flex items-center gap-3 text-2xl font-bold text-slate-800", children: [_jsx("div", { className: "p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl text-white shadow-lg", children: _jsx(Edit, { className: "w-6 h-6" }) }), "Edit Product"] }), _jsx(DialogDescription, { className: "text-slate-600 text-base mt-2", children: "Update product information with comprehensive details and settings" })] }), _jsx("div", { className: "space-y-8 mt-6", children: _jsxs(Tabs, { defaultValue: "basic", className: "w-full", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-6 bg-white p-1 rounded-xl shadow-sm border border-slate-200", children: [_jsxs(TabsTrigger, { value: "basic", className: "flex items-center gap-2 data-[state=active]:bg-blue-500 data-[state=active]:text-white", children: [_jsx(Package, { className: "w-4 h-4" }), "Basic"] }), _jsxs(TabsTrigger, { value: "pricing", className: "flex items-center gap-2 data-[state=active]:bg-green-500 data-[state=active]:text-white", children: [_jsx(DollarSign, { className: "w-4 h-4" }), "Pricing"] }), _jsxs(TabsTrigger, { value: "inventory", className: "flex items-center gap-2 data-[state=active]:bg-purple-500 data-[state=active]:text-white", children: [_jsx(BarChart3, { className: "w-4 h-4" }), "Inventory"] }), _jsxs(TabsTrigger, { value: "shipping", className: "flex items-center gap-2 data-[state=active]:bg-orange-500 data-[state=active]:text-white", children: [_jsx(Package, { className: "w-4 h-4" }), "Shipping"] }), _jsxs(TabsTrigger, { value: "marketing", className: "flex items-center gap-2 data-[state=active]:bg-pink-500 data-[state=active]:text-white", children: [_jsx(TrendingUp, { className: "w-4 h-4" }), "Marketing"] }), _jsxs(TabsTrigger, { value: "advanced", className: "flex items-center gap-2 data-[state=active]:bg-slate-500 data-[state=active]:text-white", children: [_jsx(Settings, { className: "w-4 h-4" }), "Advanced"] })] }), _jsx(TabsContent, { value: "basic", className: "mt-8", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Basic Product Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential product details and identification" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-name", className: "text-sm font-medium text-slate-700", children: "Product Name *" }), _jsx(Input, { id: "edit-name", value: newProduct.name, onChange: (e) => setNewProduct({ ...newProduct, name: e.target.value }), placeholder: "Enter product name", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-sku", className: "text-sm font-medium text-slate-700", children: "SKU *" }), _jsx(Input, { id: "edit-sku", value: newProduct.sku, onChange: (e) => setNewProduct({ ...newProduct, sku: e.target.value }), placeholder: "Enter SKU", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-category", className: "text-sm font-medium text-slate-700", children: "Category" }), _jsxs(Select, { value: newProduct.categoryId || '', onValueChange: (value) => {
                                                                            if (value === 'create-new') {
                                                                                setShowAddCategoryDialog(true);
                                                                            }
                                                                            else {
                                                                                setNewProduct({ ...newProduct, categoryId: value });
                                                                            }
                                                                        }, children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select a category" }) }), _jsxs(SelectContent, { children: [categories.map((category) => (_jsx(SelectItem, { value: category.id, children: category.name }, category.id))), _jsx(SelectItem, { value: "create-new", className: "border-t border-slate-200 mt-2", children: _jsxs("div", { className: "flex items-center gap-2 text-blue-600", children: [_jsx(Plus, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Create New Category" })] }) })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-type", className: "text-sm font-medium text-slate-700", children: "Product Type" }), _jsxs(Select, { value: newProduct.type, onValueChange: (value) => setNewProduct({ ...newProduct, type: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select product type" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "PRODUCT", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Package, { className: "w-4 h-4 text-blue-600" }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: "Physical Product" }), _jsx("p", { className: "text-xs text-slate-500", children: "Tangible items with inventory tracking" })] })] }) }), _jsx(SelectItem, { value: "SERVICE", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Settings, { className: "w-4 h-4 text-purple-600" }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: "Service" }), _jsx("p", { className: "text-xs text-slate-500", children: "Intangible services without stock" })] })] }) }), _jsx(SelectItem, { value: "DIGITAL", children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Activity, { className: "w-4 h-4 text-green-600" }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: "Digital Product" }), _jsx("p", { className: "text-xs text-slate-500", children: "Digital downloads and subscriptions" })] })] }) })] })] })] })] }), _jsxs("div", { className: "space-y-3 mt-6", children: [_jsx(Label, { htmlFor: "edit-shortDescription", className: "text-sm font-medium text-slate-700", children: "Short Description" }), _jsx(Textarea, { id: "edit-shortDescription", value: newProduct.shortDescription, onChange: (e) => setNewProduct({ ...newProduct, shortDescription: e.target.value }), placeholder: "Brief product summary for listings...", rows: 2, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3 mt-6", children: [_jsx(Label, { htmlFor: "edit-description", className: "text-sm font-medium text-slate-700", children: "Full Description" }), _jsx(Textarea, { id: "edit-description", value: newProduct.description, onChange: (e) => setNewProduct({ ...newProduct, description: e.target.value }), placeholder: "Detailed product description...", rows: 4, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-brand", className: "text-sm font-medium text-slate-700", children: "Brand" }), _jsx(Input, { id: "edit-brand", value: newProduct.brand, onChange: (e) => setNewProduct({ ...newProduct, brand: e.target.value }), placeholder: "Product brand", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-model", className: "text-sm font-medium text-slate-700", children: "Model" }), _jsx(Input, { id: "edit-model", value: newProduct.model, onChange: (e) => setNewProduct({ ...newProduct, model: e.target.value }), placeholder: "Product model", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-status", className: "text-sm font-medium text-slate-700", children: "Status" }), _jsxs(Select, { value: newProduct.status, onValueChange: (value) => setNewProduct({ ...newProduct, status: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "ACTIVE", children: "Active" }), _jsx(SelectItem, { value: "INACTIVE", children: "Inactive" }), _jsx(SelectItem, { value: "DRAFT", children: "Draft" }), _jsx(SelectItem, { value: "DISCONTINUED", children: "Discontinued" })] })] })] })] })] }) }), _jsx(TabsContent, { value: "pricing", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(DollarSign, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Pricing & Tax Management" }), _jsx("p", { className: "text-sm text-slate-600", children: "Set prices, costs, and tax configuration" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-unitPrice", className: "text-sm font-medium text-slate-700", children: "Selling Price *" }), _jsxs("div", { className: "relative", children: [_jsx("div", { className: "absolute left-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "$" }), _jsx(Input, { id: "edit-unitPrice", type: "number", step: "0.01", min: "0", value: newProduct.unitPrice || '', onChange: (e) => setNewProduct({ ...newProduct, unitPrice: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pl-8 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), newProduct.unitPrice > 0 && (_jsxs("div", { className: "flex items-center gap-2 text-xs text-green-600", children: [_jsx(Check, { className: "w-3 h-3" }), "Valid selling price"] }))] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-costPrice", className: "text-sm font-medium text-slate-700", children: "Cost Price *" }), _jsxs("div", { className: "relative", children: [_jsx("div", { className: "absolute left-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "$" }), _jsx(Input, { id: "edit-costPrice", type: "number", step: "0.01", min: "0", value: newProduct.costPrice || '', onChange: (e) => setNewProduct({ ...newProduct, costPrice: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pl-8 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] })] }), newProduct.unitPrice > 0 && newProduct.costPrice > 0 && (_jsxs("div", { className: "mt-6 p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg border border-blue-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Profit Analysis" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Profit per unit: " }), _jsxs("span", { className: `font-bold ${(newProduct.unitPrice - newProduct.costPrice) >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", (newProduct.unitPrice - newProduct.costPrice).toFixed(2)] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Profit margin: " }), _jsxs("span", { className: `font-bold ${(((newProduct.unitPrice - newProduct.costPrice) / newProduct.unitPrice) * 100) >= 0 ? 'text-green-600' : 'text-red-600'}`, children: [(((newProduct.unitPrice - newProduct.costPrice) / newProduct.unitPrice) * 100).toFixed(1), "%"] })] })] })] })), _jsxs("div", { className: "mt-8 pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-base font-semibold text-slate-800 mb-4", children: "Tax Configuration" }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-taxRate", className: "text-sm font-medium text-slate-700", children: "Tax Rate" }), _jsxs("div", { className: "relative", children: [_jsx(Input, { id: "edit-taxRate", type: "number", step: "0.01", min: "0", max: "100", value: newProduct.taxRate || '', onChange: (e) => setNewProduct({ ...newProduct, taxRate: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pr-8 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-slate-500 font-medium", children: "%" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-taxCode", className: "text-sm font-medium text-slate-700", children: "Tax Code" }), _jsxs(Select, { value: newProduct.taxCode || '', onValueChange: (value) => setNewProduct({ ...newProduct, taxCode: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select tax code" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "STANDARD", children: "Standard Tax" }), _jsx(SelectItem, { value: "GST", children: "GST (Goods & Services Tax)" }), _jsx(SelectItem, { value: "VAT", children: "VAT (Value Added Tax)" }), _jsx(SelectItem, { value: "SALES_TAX", children: "Sales Tax" }), _jsx(SelectItem, { value: "EXCISE", children: "Excise Tax" }), _jsx(SelectItem, { value: "IMPORT_DUTY", children: "Import Duty" }), _jsx(SelectItem, { value: "LUXURY_TAX", children: "Luxury Tax" }), _jsx(SelectItem, { value: "ZERO_RATED", children: "Zero-Rated" }), _jsx(SelectItem, { value: "EXEMPT", children: "Tax Exempt" })] })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Configuration" }), _jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "edit-taxInclusive", checked: newProduct.taxInclusive, onChange: (e) => setNewProduct({ ...newProduct, taxInclusive: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-taxInclusive", className: "text-sm font-medium cursor-pointer", children: "Price includes tax" }), _jsx("p", { className: "text-xs text-slate-500", children: "Tax is already included in the selling price" })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { className: "text-sm font-medium text-slate-700", children: "Tax Exemption" }), _jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "edit-taxExempt", checked: newProduct.taxExempt, onChange: (e) => setNewProduct({ ...newProduct, taxExempt: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-taxExempt", className: "text-sm font-medium cursor-pointer", children: "Tax exempt product" }), _jsx("p", { className: "text-xs text-slate-500", children: "This product is exempt from all taxes" })] })] })] })] }), newProduct.unitPrice > 0 && (_jsxs("div", { className: "mt-6 p-4 bg-gradient-to-br from-yellow-50 to-amber-50 rounded-lg border border-yellow-200", children: [_jsxs("div", { className: "flex items-center gap-2 mb-3", children: [_jsx(Calculator, { className: "w-4 h-4 text-yellow-600" }), _jsx("h4", { className: "text-sm font-semibold text-slate-800", children: "Tax Calculation Preview" }), newProduct.taxCode && (_jsx("span", { className: "px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full", children: newProduct.taxCode }))] }), newProduct.taxExempt ? (_jsxs("div", { className: "text-center py-3", children: [_jsxs("div", { className: "inline-flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg", children: [_jsx(Shield, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: "Tax Exempt Product" })] }), _jsx("p", { className: "text-sm text-slate-600 mt-2", children: "No tax will be applied to this product" })] })) : newProduct.taxRate > 0 ? (_jsx("div", { className: "grid grid-cols-2 gap-4 text-sm", children: newProduct.taxInclusive ? (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Price (tax inclusive): " }), _jsxs("span", { className: "font-semibold", children: ["$", Number(newProduct.unitPrice).toFixed(2)] })] }), _jsxs("div", { children: [_jsxs("span", { className: "text-slate-600", children: ["Tax amount (", newProduct.taxRate, "%): "] }), _jsxs("span", { className: "font-semibold text-yellow-600", children: ["$", ((Number(newProduct.unitPrice) * Number(newProduct.taxRate)) / (100 + Number(newProduct.taxRate))).toFixed(2)] })] })] })) : (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Base price: " }), _jsxs("span", { className: "font-semibold", children: ["$", Number(newProduct.unitPrice).toFixed(2)] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-slate-600", children: "Total price (including tax): " }), _jsxs("span", { className: "font-semibold text-yellow-600", children: ["$", (Number(newProduct.unitPrice) * (1 + Number(newProduct.taxRate) / 100)).toFixed(2)] })] })] })) })) : (_jsxs("div", { className: "text-center py-3", children: [_jsxs("div", { className: "inline-flex items-center gap-2 px-3 py-2 bg-slate-100 text-slate-600 rounded-lg", children: [_jsx(AlertCircle, { className: "w-4 h-4" }), _jsx("span", { children: "No tax rate specified" })] }), _jsx("p", { className: "text-sm text-slate-500 mt-2", children: "Enter a tax rate to see calculations" })] }))] }))] })] }) }), _jsx(TabsContent, { value: "inventory", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(BarChart3, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Inventory Management" }), _jsx("p", { className: "text-sm text-slate-600", children: "Stock levels, reorder points, and inventory tracking" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-stockQuantity", className: "text-sm font-medium text-slate-700", children: "Current Stock Quantity" }), _jsx(Input, { id: "edit-stockQuantity", type: "number", min: "0", step: "1", value: newProduct.stockQuantity || '', onChange: (e) => setNewProduct({ ...newProduct, stockQuantity: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-reorderPoint", className: "text-sm font-medium text-slate-700", children: "Reorder Point" }), _jsx(Input, { id: "edit-reorderPoint", type: "number", min: "0", step: "1", value: newProduct.reorderPoint || '', onChange: (e) => setNewProduct({ ...newProduct, reorderPoint: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Trigger reorder when stock falls below this level" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-minStockLevel", className: "text-sm font-medium text-slate-700", children: "Minimum Stock Level" }), _jsx(Input, { id: "edit-minStockLevel", type: "number", min: "0", step: "1", value: newProduct.minStockLevel || '', onChange: (e) => setNewProduct({ ...newProduct, minStockLevel: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Absolute minimum stock to maintain" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-maxStockLevel", className: "text-sm font-medium text-slate-700", children: "Maximum Stock Level" }), _jsx(Input, { id: "edit-maxStockLevel", type: "number", min: "0", step: "1", value: newProduct.maxStockLevel || '', onChange: (e) => setNewProduct({ ...newProduct, maxStockLevel: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Maximum stock capacity or target level" })] })] }), newProduct.stockQuantity > 0 && newProduct.reorderPoint > 0 && (_jsxs("div", { className: "mt-6 p-4 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg border border-purple-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Stock Level Analysis" }), _jsx("div", { className: "space-y-2", children: _jsxs("div", { className: `flex items-center gap-2 text-sm ${newProduct.stockQuantity <= newProduct.reorderPoint
                                                                        ? 'text-red-600'
                                                                        : newProduct.stockQuantity <= (newProduct.reorderPoint * 2)
                                                                            ? 'text-yellow-600'
                                                                            : 'text-green-600'}`, children: [newProduct.stockQuantity <= newProduct.reorderPoint
                                                                            ? _jsx(AlertTriangle, { className: "w-4 h-4" })
                                                                            : newProduct.stockQuantity <= (newProduct.reorderPoint * 2)
                                                                                ? _jsx(AlertTriangle, { className: "w-4 h-4" })
                                                                                : _jsx(Check, { className: "w-4 h-4" }), _jsx("span", { className: "font-medium", children: newProduct.stockQuantity <= newProduct.reorderPoint
                                                                                ? 'Critical Stock Level - Immediate Reorder Required'
                                                                                : newProduct.stockQuantity <= (newProduct.reorderPoint * 2)
                                                                                    ? 'Low Stock Level - Consider Reordering Soon'
                                                                                    : 'Stock Level is Healthy' })] }) })] })), _jsxs("div", { className: "mt-8 pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Product Type Flags" }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "edit-trackInventory", checked: newProduct.trackInventory, onChange: (e) => setNewProduct({ ...newProduct, trackInventory: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-trackInventory", className: "text-sm font-medium cursor-pointer", children: "Track inventory" }), _jsx("p", { className: "text-xs text-slate-500", children: "Monitor stock levels for this product" })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "edit-allowBackorder", checked: newProduct.allowBackorder, onChange: (e) => setNewProduct({ ...newProduct, allowBackorder: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-allowBackorder", className: "text-sm font-medium cursor-pointer", children: "Allow backorders" }), _jsx("p", { className: "text-xs text-slate-500", children: "Accept orders when out of stock" })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-3 border border-slate-200 rounded-lg", children: [_jsx("input", { type: "checkbox", id: "edit-allowPreorder", checked: newProduct.allowPreorder, onChange: (e) => setNewProduct({ ...newProduct, allowPreorder: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-allowPreorder", className: "text-sm font-medium cursor-pointer", children: "Allow pre-orders" }), _jsx("p", { className: "text-xs text-slate-500", children: "Accept orders before product availability" })] })] }), newProduct.allowPreorder && (_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-preorderDate", className: "text-sm font-medium text-slate-700", children: "Pre-order Available Date" }), _jsx(Input, { id: "edit-preorderDate", type: "date", value: newProduct.preorderDate, onChange: (e) => setNewProduct({ ...newProduct, preorderDate: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }))] })] })] }) }), _jsx(TabsContent, { value: "shipping", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Physical Properties & Shipping" }), _jsx("p", { className: "text-sm text-slate-600", children: "Dimensions, weight, and shipping configuration" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-weight", className: "text-sm font-medium text-slate-700", children: "Weight (kg)" }), _jsx(Input, { id: "edit-weight", type: "number", step: "0.01", min: "0", value: newProduct.weight || '', onChange: (e) => setNewProduct({ ...newProduct, weight: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-barcode", className: "text-sm font-medium text-slate-700", children: "Barcode" }), _jsx(Input, { id: "edit-barcode", value: newProduct.barcode, onChange: (e) => setNewProduct({ ...newProduct, barcode: e.target.value }), placeholder: "Enter or scan barcode", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-4 mt-6", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800", children: "Dimensions (cm)" }), _jsxs("div", { className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "edit-length", children: "Length" }), _jsx(Input, { id: "edit-length", type: "number", step: "0.01", value: newProduct.dimensions?.length || 0, onChange: (e) => setNewProduct({
                                                                                    ...newProduct,
                                                                                    dimensions: {
                                                                                        ...newProduct.dimensions,
                                                                                        length: parseFloat(e.target.value) || 0,
                                                                                        width: newProduct.dimensions?.width || 0,
                                                                                        height: newProduct.dimensions?.height || 0
                                                                                    }
                                                                                }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "edit-width", children: "Width" }), _jsx(Input, { id: "edit-width", type: "number", step: "0.01", value: newProduct.dimensions?.width || 0, onChange: (e) => setNewProduct({
                                                                                    ...newProduct,
                                                                                    dimensions: {
                                                                                        ...newProduct.dimensions,
                                                                                        width: parseFloat(e.target.value) || 0,
                                                                                        length: newProduct.dimensions?.length || 0,
                                                                                        height: newProduct.dimensions?.height || 0
                                                                                    }
                                                                                }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "edit-height", children: "Height" }), _jsx(Input, { id: "edit-height", type: "number", step: "0.01", value: newProduct.dimensions?.height || 0, onChange: (e) => setNewProduct({
                                                                                    ...newProduct,
                                                                                    dimensions: {
                                                                                        ...newProduct.dimensions,
                                                                                        width: newProduct.dimensions?.width || 0,
                                                                                        length: newProduct.dimensions?.length || 0,
                                                                                        height: parseFloat(e.target.value) || 0
                                                                                    }
                                                                                }), placeholder: "0.00", className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] })] }), _jsxs("div", { className: "space-y-2 mt-6", children: [_jsx(Label, { htmlFor: "edit-shippingClass", children: "Shipping Class" }), _jsxs(Select, { value: newProduct.shippingClass, onValueChange: (value) => setNewProduct({ ...newProduct, shippingClass: value }), children: [_jsx(SelectTrigger, { className: "border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select shipping class" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "STANDARD", children: "Standard Shipping" }), _jsx(SelectItem, { value: "EXPEDITED", children: "Expedited Shipping" }), _jsx(SelectItem, { value: "OVERNIGHT", children: "Overnight Shipping" }), _jsx(SelectItem, { value: "FREIGHT", children: "Freight Shipping" }), _jsx(SelectItem, { value: "DIGITAL", children: "Digital Delivery" }), _jsx(SelectItem, { value: "PICKUP", children: "Pickup Only" }), _jsx(SelectItem, { value: "FREE", children: "Free Shipping" })] })] }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Choose appropriate shipping method for this product" })] }), _jsxs("div", { className: "mt-8 pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Warranty & Returns" }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-warrantyPeriod", className: "text-sm font-medium text-slate-700", children: "Warranty Period" }), _jsx(Input, { id: "edit-warrantyPeriod", type: "number", min: "0", step: "1", value: newProduct.warrantyPeriod, onChange: (e) => setNewProduct({ ...newProduct, warrantyPeriod: parseFloat(e.target.value) || 0 }), placeholder: "0", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-warrantyUnit", className: "text-sm font-medium text-slate-700", children: "Warranty Unit" }), _jsxs(Select, { value: newProduct.warrantyUnit, onValueChange: (value) => setNewProduct({ ...newProduct, warrantyUnit: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select unit" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "DAYS", children: "Days" }), _jsx(SelectItem, { value: "WEEKS", children: "Weeks" }), _jsx(SelectItem, { value: "MONTHS", children: "Months" }), _jsx(SelectItem, { value: "YEARS", children: "Years" })] })] })] })] }), _jsxs("div", { className: "space-y-3 mt-6", children: [_jsx(Label, { htmlFor: "edit-returnPolicy", className: "text-sm font-medium text-slate-700", children: "Return Policy" }), _jsx(Textarea, { id: "edit-returnPolicy", value: newProduct.returnPolicy, onChange: (e) => setNewProduct({ ...newProduct, returnPolicy: e.target.value }), placeholder: "Describe the return policy for this product...", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] })] }) }), _jsx(TabsContent, { value: "marketing", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-pink-100 rounded-lg", children: _jsx(TrendingUp, { className: "w-5 h-5 text-pink-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Marketing & SEO" }), _jsx("p", { className: "text-sm text-slate-600", children: "Promotional features, SEO optimization, and marketing flags" })] })] }), _jsxs("div", { className: "mb-8", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Product Promotion Flags" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-isFeatured", checked: newProduct.isFeatured, onChange: (e) => setNewProduct({ ...newProduct, isFeatured: e.target.checked }), className: "w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-3 h-3 bg-purple-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-isFeatured", className: "text-sm font-medium cursor-pointer", children: "Featured Product" }), _jsx("p", { className: "text-xs text-slate-500", children: "Highlight in featured sections" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-isBestSeller", checked: newProduct.isBestSeller, onChange: (e) => setNewProduct({ ...newProduct, isBestSeller: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(TrendingUp, { className: "w-4 h-4 text-orange-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-isBestSeller", className: "text-sm font-medium cursor-pointer", children: "Best Seller" }), _jsx("p", { className: "text-xs text-slate-500", children: "Mark as top-selling product" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-isNewArrival", checked: newProduct.isNewArrival, onChange: (e) => setNewProduct({ ...newProduct, isNewArrival: e.target.checked }), className: "w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-3 h-3 bg-green-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-isNewArrival", className: "text-sm font-medium cursor-pointer", children: "New Arrival" }), _jsx("p", { className: "text-xs text-slate-500", children: "Show as recently added" })] })] })] })] })] }), _jsxs("div", { className: "space-y-3 mb-8", children: [_jsx(Label, { htmlFor: "edit-tags", className: "text-sm font-medium text-slate-700", children: "Product Tags" }), _jsx(Textarea, { id: "edit-tags", value: newProduct.tags, onChange: (e) => setNewProduct({ ...newProduct, tags: e.target.value }), placeholder: "e.g., organic, premium, limited-edition (comma separated)", rows: 2, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Separate multiple tags with commas for better searchability" })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "SEO Optimization" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-seoTitle", className: "text-sm font-medium text-slate-700", children: "SEO Title" }), _jsx(Input, { id: "edit-seoTitle", value: newProduct.seoTitle, onChange: (e) => setNewProduct({ ...newProduct, seoTitle: e.target.value }), placeholder: "Optimized title for search engines (50-60 characters)", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("p", { className: "text-xs text-slate-500", children: "Recommended: 50-60 characters for optimal display" }), _jsxs("span", { className: `text-xs ${newProduct.seoTitle?.length > 60 ? 'text-orange-500' : 'text-slate-400'}`, children: [newProduct.seoTitle?.length || 0, "/60"] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-seoDescription", className: "text-sm font-medium text-slate-700", children: "SEO Description" }), _jsx(Textarea, { id: "edit-seoDescription", value: newProduct.seoDescription, onChange: (e) => setNewProduct({ ...newProduct, seoDescription: e.target.value }), placeholder: "Compelling description for search results (150-160 characters)", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("p", { className: "text-xs text-slate-500", children: "Recommended: 150-160 characters for search snippets" }), _jsxs("span", { className: `text-xs ${newProduct.seoDescription?.length > 160 ? 'text-orange-500' : 'text-slate-400'}`, children: [newProduct.seoDescription?.length || 0, "/160"] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-metaKeywords", className: "text-sm font-medium text-slate-700", children: "Meta Keywords" }), _jsx(Textarea, { id: "edit-metaKeywords", value: newProduct.metaKeywords, onChange: (e) => setNewProduct({ ...newProduct, metaKeywords: e.target.value }), placeholder: "relevant, keywords, for, search, engines (comma separated)", rows: 2, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Comma-separated keywords relevant to your product" })] })] })] }), (newProduct.seoTitle || newProduct.seoDescription) && (_jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg border border-blue-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Search Result Preview" }), _jsxs("div", { className: "bg-white p-4 rounded border", children: [_jsx("div", { className: "text-blue-600 text-lg hover:underline cursor-pointer", children: newProduct.seoTitle || newProduct.name || 'Product Title' }), _jsxs("div", { className: "text-green-600 text-sm", children: ["yourstore.com/products/", newProduct.sku?.toLowerCase() || 'product-sku'] }), _jsx("div", { className: "text-gray-600 text-sm mt-1", children: newProduct.seoDescription || newProduct.shortDescription || newProduct.description || 'Product description will appear here...' })] })] }))] }) }), _jsx(TabsContent, { value: "advanced", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Advanced Configuration" }), _jsx("p", { className: "text-sm text-slate-600", children: "Product variants, custom fields, and advanced settings" })] })] }), _jsxs("div", { className: "mb-8", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Product Status & Visibility" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-status", className: "text-sm font-medium text-slate-700", children: "Product Status" }), _jsxs("select", { id: "edit-status", value: newProduct.status || 'active', onChange: (e) => setNewProduct({ ...newProduct, status: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: [_jsx("option", { value: "active", children: "Active" }), _jsx("option", { value: "inactive", children: "Inactive" }), _jsx("option", { value: "draft", children: "Draft" }), _jsx("option", { value: "discontinued", children: "Discontinued" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-visibility", className: "text-sm font-medium text-slate-700", children: "Visibility" }), _jsxs("select", { id: "edit-visibility", value: newProduct.visibility || 'public', onChange: (e) => setNewProduct({ ...newProduct, visibility: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: [_jsx("option", { value: "public", children: "Public" }), _jsx("option", { value: "private", children: "Private" }), _jsx("option", { value: "members-only", children: "Members Only" })] })] })] })] }), _jsxs("div", { className: "mb-8", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Custom Information Fields" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-customField1", className: "text-sm font-medium text-slate-700", children: "Custom Field 1" }), _jsx(Input, { id: "edit-customField1", value: newProduct.customField1, onChange: (e) => setNewProduct({ ...newProduct, customField1: e.target.value }), placeholder: "e.g., Material composition", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-customField2", className: "text-sm font-medium text-slate-700", children: "Custom Field 2" }), _jsx(Input, { id: "edit-customField2", value: newProduct.customField2, onChange: (e) => setNewProduct({ ...newProduct, customField2: e.target.value }), placeholder: "e.g., Care instructions", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-customField3", className: "text-sm font-medium text-slate-700", children: "Custom Field 3" }), _jsx(Input, { id: "edit-customField3", value: newProduct.customField3, onChange: (e) => setNewProduct({ ...newProduct, customField3: e.target.value }), placeholder: "e.g., Certifications", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-customField4", className: "text-sm font-medium text-slate-700", children: "Custom Field 4" }), _jsx(Input, { id: "edit-customField4", value: newProduct.customField4, onChange: (e) => setNewProduct({ ...newProduct, customField4: e.target.value }), placeholder: "e.g., Origin country", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] })] }), _jsxs("div", { className: "mb-8", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Product Variants & Options" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-variants", className: "text-sm font-medium text-slate-700", children: "Available Variants" }), _jsx(Textarea, { id: "edit-variants", value: Array.isArray(newProduct.variants) ? newProduct.variants.join(', ') : '', onChange: (e) => setNewProduct({ ...newProduct, variants: e.target.value.split(',').map(v => v.trim()).filter(Boolean) }), placeholder: "e.g., Size: S,M,L,XL | Color: Red,Blue,Green", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Define variants using format: Attribute: Option1,Option2" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-relatedProducts", className: "text-sm font-medium text-slate-700", children: "Related Products" }), _jsx(Textarea, { id: "edit-relatedProducts", value: Array.isArray(newProduct.relatedProducts) ? newProduct.relatedProducts.join(', ') : '', onChange: (e) => setNewProduct({ ...newProduct, relatedProducts: e.target.value.split(',').map(v => v.trim()).filter(Boolean) }), placeholder: "e.g., SKU001, SKU002, SKU003", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Comma-separated list of related product SKUs" })] })] })] }), _jsxs("div", { className: "mb-8", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Additional Product Flags" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-isDigital", checked: newProduct.isDigital, onChange: (e) => setNewProduct({ ...newProduct, isDigital: e.target.checked }), className: "w-4 h-4 text-indigo-600 bg-gray-100 border-gray-300 rounded focus:ring-indigo-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-3 h-3 bg-indigo-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-isDigital", className: "text-sm font-medium cursor-pointer", children: "Digital Product" }), _jsx("p", { className: "text-xs text-slate-500", children: "No physical shipping required" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-requiresLicense", checked: newProduct.requiresLicense, onChange: (e) => setNewProduct({ ...newProduct, requiresLicense: e.target.checked }), className: "w-4 h-4 text-red-600 bg-gray-100 border-gray-300 rounded focus:ring-red-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-4 h-4 text-red-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-requiresLicense", className: "text-sm font-medium cursor-pointer", children: "License Required" }), _jsx("p", { className: "text-xs text-slate-500", children: "Regulatory compliance needed" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-hasExpiryDate", checked: newProduct.hasExpiryDate, onChange: (e) => setNewProduct({ ...newProduct, hasExpiryDate: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-orange-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-hasExpiryDate", className: "text-sm font-medium cursor-pointer", children: "Has Expiry Date" }), _jsx("p", { className: "text-xs text-slate-500", children: "Track product expiration" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-isBundle", checked: newProduct.isBundle, onChange: (e) => setNewProduct({ ...newProduct, isBundle: e.target.checked }), className: "w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Package, { className: "w-4 h-4 text-green-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-isBundle", className: "text-sm font-medium cursor-pointer", children: "Bundle Product" }), _jsx("p", { className: "text-xs text-slate-500", children: "Contains multiple items" })] })] })] })] })] }), _jsx("div", { className: "pt-6 border-t border-slate-200", children: _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-notes", className: "text-sm font-medium text-slate-700", children: "Internal Notes" }), _jsx(Textarea, { id: "edit-notes", value: newProduct.notes, onChange: (e) => setNewProduct({ ...newProduct, notes: e.target.value }), placeholder: "Internal notes for staff use only (not visible to customers)", rows: 4, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "These notes are for internal use and won't be displayed to customers" })] }) }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg border border-purple-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Configuration Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newProduct.status === 'active' ? 'bg-green-500' : 'bg-orange-500'}` }), _jsxs("span", { className: "text-slate-600", children: ["Status: ", newProduct.status || 'Active'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newProduct.isDigital ? 'bg-blue-500' : 'bg-gray-400'}` }), _jsxs("span", { className: "text-slate-600", children: [newProduct.isDigital ? 'Digital' : 'Physical', " Product"] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newProduct.isBundle ? 'bg-green-500' : 'bg-gray-400'}` }), _jsxs("span", { className: "text-slate-600", children: [newProduct.isBundle ? 'Bundle' : 'Single', " Item"] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newProduct.hasExpiryDate ? 'bg-orange-500' : 'bg-gray-400'}` }), _jsx("span", { className: "text-slate-600", children: newProduct.hasExpiryDate ? 'Expires' : 'No Expiry' })] })] })] })] }) })] }) }), _jsxs(DialogFooter, { children: [_jsx(Button, { variant: "outline", onClick: () => setShowEditProductDialog(false), children: "Cancel" }), _jsx(Button, { disabled: !newProduct.name?.trim() ||
                                            !newProduct.sku?.trim() ||
                                            newProduct.unitPrice <= 0 ||
                                            newProduct.costPrice < 0 ||
                                            newProduct.stockQuantity < 0 ||
                                            !newProduct.status?.trim(), onClick: async () => {
                                            try {
                                                // Comprehensive validation with specific error messages
                                                if (!newProduct.name?.trim()) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Product name is required",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                if (!newProduct.sku?.trim()) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "SKU is required",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                if (newProduct.unitPrice <= 0) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Unit price must be greater than 0",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                if (newProduct.costPrice < 0) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Cost price cannot be negative",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                if (newProduct.stockQuantity < 0) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Stock quantity cannot be negative",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                if (!newProduct.status?.trim()) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Product status is required",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                // Validate status value
                                                const validStatuses = ['ACTIVE', 'INACTIVE', 'DISCONTINUED', 'DRAFT'];
                                                if (!validStatuses.includes(newProduct.status)) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: `Invalid status: ${newProduct.status}. Must be one of: ${validStatuses.join(', ')}`,
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                console.log('🔍 Product Update Debug:', {
                                                    originalStatus: newProduct.status,
                                                    statusType: typeof newProduct.status,
                                                    statusTrimmed: newProduct.status?.trim(),
                                                    isValidStatus: ['ACTIVE', 'INACTIVE', 'DISCONTINUED', 'DRAFT'].includes(newProduct.status)
                                                });
                                                const updateData = {
                                                    ...newProduct,
                                                    unitPrice: newProduct.unitPrice,
                                                    costPrice: newProduct.costPrice,
                                                    stockQuantity: newProduct.stockQuantity,
                                                    status: newProduct.status.toUpperCase(),
                                                    type: newProduct.type,
                                                    warrantyUnit: newProduct.warrantyUnit,
                                                    // Convert JSON fields to strings
                                                    images: JSON.stringify(newProduct.images || []),
                                                    variants: JSON.stringify(newProduct.variants || []),
                                                    relatedProducts: JSON.stringify(newProduct.relatedProducts || []),
                                                    upsellProducts: JSON.stringify(newProduct.upsellProducts || []),
                                                    crossSellProducts: JSON.stringify(newProduct.crossSellProducts || []),
                                                    customFields: JSON.stringify(newProduct.customFields || {}),
                                                    // Convert dimensions object to individual fields
                                                    dimensionsLength: newProduct.dimensions?.length || 0,
                                                    dimensionsWidth: newProduct.dimensions?.width || 0,
                                                    dimensionsHeight: newProduct.dimensions?.height || 0,
                                                    // Remove the dimensions object to avoid conflicts
                                                    dimensions: undefined
                                                };
                                                console.log('Updating product with data:', updateData);
                                                console.log('Product ID:', selectedProduct.id);
                                                console.log('🔍 Status Debug:', {
                                                    status: updateData.status,
                                                    statusType: typeof updateData.status,
                                                    statusLength: updateData.status?.length,
                                                    isValidStatus: ['ACTIVE', 'INACTIVE', 'DISCONTINUED', 'DRAFT'].includes(updateData.status),
                                                    fullUpdateDataKeys: Object.keys(updateData),
                                                    statusFieldInData: updateData.status
                                                });
                                                await inventoryApi.updateProduct(selectedProduct.id, updateData);
                                                toast({
                                                    title: "Success",
                                                    description: "Product updated successfully",
                                                });
                                                setShowEditProductDialog(false);
                                                queryClient.invalidateQueries({ queryKey: ['products'] });
                                                queryClient.invalidateQueries({ queryKey: ['categories'] });
                                                queryClient.invalidateQueries({ queryKey: ['analytics'] });
                                                queryClient.invalidateQueries({ queryKey: ['kpis'] });
                                            }
                                            catch (error) {
                                                console.error('Product update error:', error);
                                                console.error('Error response:', error?.response);
                                                console.error('Error data:', error?.response?.data);
                                                let errorMessage = "Failed to update product. Please try again.";
                                                if (error?.response?.status === 409) {
                                                    errorMessage = `SKU "${newProduct.sku}" already exists for this company. Please use a different SKU.`;
                                                }
                                                else if (error?.response?.status === 400) {
                                                    const validationErrors = error?.response?.data?.errors || [];
                                                    if (validationErrors.length > 0) {
                                                        errorMessage = `Validation errors: ${validationErrors.join(', ')}`;
                                                    }
                                                    else {
                                                        errorMessage = error?.response?.data?.message || "Invalid product data. Please check your inputs.";
                                                    }
                                                }
                                                else if (error?.response?.status === 401) {
                                                    errorMessage = "Authentication error. Please refresh the page and try again.";
                                                }
                                                else if (error?.response?.status === 403) {
                                                    errorMessage = "Permission denied. You don't have access to update this product.";
                                                }
                                                else if (error?.response?.status === 404) {
                                                    errorMessage = "Product not found. It may have been deleted.";
                                                }
                                                else if (error?.response?.status === 500) {
                                                    errorMessage = "Server error. Please try again later.";
                                                }
                                                else {
                                                    const backendError = error?.response?.data?.error ||
                                                        error?.response?.data?.message ||
                                                        error?.response?.statusText ||
                                                        error?.message;
                                                    if (backendError && backendError !== "Conflict" && backendError !== "Bad Request" && backendError.length > 10) {
                                                        errorMessage = backendError;
                                                    }
                                                }
                                                toast({
                                                    title: "Error Updating Product",
                                                    description: errorMessage,
                                                    variant: "destructive"
                                                });
                                            }
                                        }, children: "Update Product" })] })] }) }), _jsx(Dialog, { open: showAddLocationDialog, onOpenChange: setShowAddLocationDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-blue-50", children: [_jsx(DialogHeader, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg", children: _jsx(MapPin, { className: "w-6 h-6 text-white" }) }), _jsxs("div", { children: [_jsx(DialogTitle, { className: "text-2xl font-bold text-slate-800", children: "Add New Location" }), _jsx("p", { className: "text-slate-600 mt-1", children: "Create a new warehouse, store, or distribution center" })] })] }) }), _jsx("div", { className: "flex-1", children: _jsxs(Tabs, { defaultValue: "basic", className: "h-full flex flex-col", children: [_jsx("div", { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-2 mb-4", children: _jsxs(TabsList, { className: "grid w-full grid-cols-4 gap-1", children: [_jsxs(TabsTrigger, { value: "basic", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-indigo-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Info, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Basic Info" })] }), _jsxs(TabsTrigger, { value: "address", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-emerald-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Address" })] }), _jsxs(TabsTrigger, { value: "contact", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(User, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Contact" })] }), _jsxs(TabsTrigger, { value: "settings", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Settings, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Settings" })] })] }) }), _jsxs("div", { className: "flex-1", children: [_jsx(TabsContent, { value: "basic", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Info, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Basic Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential location details and identification" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-name", className: "text-sm font-medium text-slate-700", children: "Location Name *" }), _jsx(Input, { id: "location-name", value: newLocation.name, onChange: (e) => setNewLocation({ ...newLocation, name: e.target.value }), placeholder: "e.g., Main Warehouse, Downtown Store", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-code", className: "text-sm font-medium text-slate-700", children: "Location Code" }), _jsx(Input, { id: "location-code", value: newLocation.code, onChange: (e) => setNewLocation({ ...newLocation, code: e.target.value }), placeholder: "e.g., WH-001, STORE-NYC", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-description", className: "text-sm font-medium text-slate-700", children: "Description" }), _jsx(Textarea, { id: "location-description", value: newLocation.description, onChange: (e) => setNewLocation({ ...newLocation, description: e.target.value }), placeholder: "Brief description of the location, its purpose, and key features", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-type", className: "text-sm font-medium text-slate-700", children: "Location Type" }), _jsxs("select", { id: "location-type", value: newLocation.locationType, onChange: (e) => setNewLocation({ ...newLocation, locationType: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: [_jsx("option", { value: "WAREHOUSE", children: "Warehouse" }), _jsx("option", { value: "STORE", children: "Retail Store" }), _jsx("option", { value: "DISTRIBUTION_CENTER", children: "Distribution Center" }), _jsx("option", { value: "MANUFACTURING", children: "Manufacturing Plant" }), _jsx("option", { value: "OFFICE", children: "Office" }), _jsx("option", { value: "COLD_STORAGE", children: "Cold Storage" }), _jsx("option", { value: "FULFILLMENT", children: "Fulfillment Center" }), _jsx("option", { value: "OTHER", children: "Other" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-capacity", className: "text-sm font-medium text-slate-700", children: "Storage Capacity" }), _jsx(Input, { id: "location-capacity", value: newLocation.capacity, onChange: (e) => setNewLocation({ ...newLocation, capacity: e.target.value }), placeholder: "e.g., 10,000 sq ft, 500 pallets", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Location Status" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "location-active", checked: newLocation.isActive, onChange: (e) => setNewLocation({ ...newLocation, isActive: e.target.checked }), className: "w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-3 h-3 bg-green-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "location-active", className: "text-sm font-medium cursor-pointer", children: "Active Location" }), _jsx("p", { className: "text-xs text-slate-500", children: "Location is operational and accepting inventory" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "location-default", checked: newLocation.isDefault, onChange: (e) => setNewLocation({ ...newLocation, isDefault: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Star, { className: "w-4 h-4 text-blue-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "location-default", className: "text-sm font-medium cursor-pointer", children: "Default Location" }), _jsx("p", { className: "text-xs text-slate-500", children: "Set as default for new inventory" })] })] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "address", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(MapPin, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Address Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Physical location and geographic coordinates" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-address", className: "text-sm font-medium text-slate-700", children: "Street Address" }), _jsx(Input, { id: "location-address", value: newLocation.address, onChange: (e) => setNewLocation({ ...newLocation, address: e.target.value }), placeholder: "e.g., 123 Business Park Drive", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-address2", className: "text-sm font-medium text-slate-700", children: "Address Line 2 (Optional)" }), _jsx(Input, { id: "location-address2", value: newLocation.address2, onChange: (e) => setNewLocation({ ...newLocation, address2: e.target.value }), placeholder: "e.g., Suite 100, Building A", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-city", className: "text-sm font-medium text-slate-700", children: "City" }), _jsx(Input, { id: "location-city", value: newLocation.city, onChange: (e) => setNewLocation({ ...newLocation, city: e.target.value }), placeholder: "e.g., New York", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-state", className: "text-sm font-medium text-slate-700", children: "State/Province" }), _jsx(Input, { id: "location-state", value: newLocation.state, onChange: (e) => setNewLocation({ ...newLocation, state: e.target.value }), placeholder: "e.g., NY", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-postal", className: "text-sm font-medium text-slate-700", children: "Postal Code" }), _jsx(Input, { id: "location-postal", value: newLocation.postalCode, onChange: (e) => setNewLocation({ ...newLocation, postalCode: e.target.value }), placeholder: "e.g., 10001", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-country", className: "text-sm font-medium text-slate-700", children: "Country" }), _jsx(Input, { id: "location-country", value: newLocation.country, onChange: (e) => setNewLocation({ ...newLocation, country: e.target.value }), placeholder: "e.g., United States", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800", children: "Geographic Coordinates (Optional)" }), _jsxs(Button, { type: "button", variant: "outline", size: "sm", onClick: async () => {
                                                                                            if (!navigator.geolocation) {
                                                                                                toast({
                                                                                                    title: "Geolocation Not Supported",
                                                                                                    description: "Your browser doesn't support geolocation. Please enter coordinates manually.",
                                                                                                    variant: "destructive"
                                                                                                });
                                                                                                return;
                                                                                            }
                                                                                            toast({
                                                                                                title: "Getting Location...",
                                                                                                description: "Please allow location access to automatically fill coordinates.",
                                                                                            });
                                                                                            navigator.geolocation.getCurrentPosition((position) => {
                                                                                                const { latitude, longitude } = position.coords;
                                                                                                setNewLocation({
                                                                                                    ...newLocation,
                                                                                                    latitude: latitude.toString(),
                                                                                                    longitude: longitude.toString()
                                                                                                });
                                                                                                toast({
                                                                                                    title: "Location Retrieved",
                                                                                                    description: `Coordinates set: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
                                                                                                });
                                                                                            }, (error) => {
                                                                                                let errorMessage = "Unable to retrieve location.";
                                                                                                switch (error.code) {
                                                                                                    case error.PERMISSION_DENIED:
                                                                                                        errorMessage = "Location access denied. Please enable location permissions.";
                                                                                                        break;
                                                                                                    case error.POSITION_UNAVAILABLE:
                                                                                                        errorMessage = "Location information unavailable.";
                                                                                                        break;
                                                                                                    case error.TIMEOUT:
                                                                                                        errorMessage = "Location request timed out.";
                                                                                                        break;
                                                                                                }
                                                                                                toast({
                                                                                                    title: "Location Error",
                                                                                                    description: errorMessage,
                                                                                                    variant: "destructive"
                                                                                                });
                                                                                            }, {
                                                                                                enableHighAccuracy: true,
                                                                                                timeout: 10000,
                                                                                                maximumAge: 300000 // 5 minutes
                                                                                            });
                                                                                        }, className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4" }), "Get Current Location"] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "location-latitude", className: "text-sm font-medium text-slate-700 flex items-center gap-2", children: ["Latitude", newLocation.latitude && (_jsxs("div", { className: "flex items-center gap-1 text-green-600", children: [_jsx(Check, { className: "w-3 h-3" }), _jsx("span", { className: "text-xs", children: "Auto-filled" })] }))] }), _jsx(Input, { id: "location-latitude", value: newLocation.latitude, onChange: (e) => setNewLocation({ ...newLocation, latitude: e.target.value }), placeholder: "e.g., 40.7128", className: `py-3 text-base transition-all duration-200 ${newLocation.latitude
                                                                                                    ? 'border-green-300 bg-green-50/30 focus:border-green-400 focus:ring-1 focus:ring-green-100'
                                                                                                    : 'border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100'}` })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "location-longitude", className: "text-sm font-medium text-slate-700 flex items-center gap-2", children: ["Longitude", newLocation.longitude && (_jsxs("div", { className: "flex items-center gap-1 text-green-600", children: [_jsx(Check, { className: "w-3 h-3" }), _jsx("span", { className: "text-xs", children: "Auto-filled" })] }))] }), _jsx(Input, { id: "location-longitude", value: newLocation.longitude, onChange: (e) => setNewLocation({ ...newLocation, longitude: e.target.value }), placeholder: "e.g., -74.0060", className: `py-3 text-base transition-all duration-200 ${newLocation.longitude
                                                                                                    ? 'border-green-300 bg-green-50/30 focus:border-green-400 focus:ring-1 focus:ring-green-100'
                                                                                                    : 'border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100'}` })] })] }), _jsx("p", { className: "text-xs text-slate-500 mt-2", children: "Coordinates help with routing and mapping integrations" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-timezone", className: "text-sm font-medium text-slate-700", children: "Timezone" }), _jsxs("select", { id: "location-timezone", value: newLocation.timezone, onChange: (e) => setNewLocation({ ...newLocation, timezone: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200", children: [_jsx("option", { value: "", children: "Select timezone" }), _jsx("option", { value: "America/New_York", children: "Eastern Time (EST/EDT)" }), _jsx("option", { value: "America/Chicago", children: "Central Time (CST/CDT)" }), _jsx("option", { value: "America/Denver", children: "Mountain Time (MST/MDT)" }), _jsx("option", { value: "America/Los_Angeles", children: "Pacific Time (PST/PDT)" }), _jsx("option", { value: "Europe/London", children: "Greenwich Mean Time (GMT)" }), _jsx("option", { value: "Europe/Paris", children: "Central European Time (CET)" }), _jsx("option", { value: "Asia/Tokyo", children: "Japan Standard Time (JST)" }), _jsx("option", { value: "Asia/Shanghai", children: "China Standard Time (CST)" })] })] })] })] }) }), _jsx(TabsContent, { value: "contact", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(User, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Contact Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Primary contacts and management details" })] })] }), _jsxs("div", { className: "space-y-8", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Primary Contact" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-contact-name", className: "text-sm font-medium text-slate-700", children: "Contact Name" }), _jsx(Input, { id: "location-contact-name", value: newLocation.contactName, onChange: (e) => setNewLocation({ ...newLocation, contactName: e.target.value }), placeholder: "e.g., John Smith", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-contact-phone", className: "text-sm font-medium text-slate-700", children: "Phone Number" }), _jsx(Input, { id: "location-contact-phone", value: newLocation.contactPhone, onChange: (e) => setNewLocation({ ...newLocation, contactPhone: e.target.value }), placeholder: "e.g., +1 (555) 123-4567", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-contact-email", className: "text-sm font-medium text-slate-700", children: "Email Address" }), _jsx(Input, { id: "location-contact-email", type: "email", value: newLocation.contactEmail, onChange: (e) => setNewLocation({ ...newLocation, contactEmail: e.target.value }), placeholder: "e.g., contact@location.com", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Location Manager" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-manager-name", className: "text-sm font-medium text-slate-700", children: "Manager Name" }), _jsx(Input, { id: "location-manager-name", value: newLocation.managerName, onChange: (e) => setNewLocation({ ...newLocation, managerName: e.target.value }), placeholder: "e.g., Sarah Johnson", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-manager-phone", className: "text-sm font-medium text-slate-700", children: "Manager Phone" }), _jsx(Input, { id: "location-manager-phone", value: newLocation.managerPhone, onChange: (e) => setNewLocation({ ...newLocation, managerPhone: e.target.value }), placeholder: "e.g., +1 (555) 987-6543", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-manager-email", className: "text-sm font-medium text-slate-700", children: "Manager Email" }), _jsx(Input, { id: "location-manager-email", type: "email", value: newLocation.managerEmail, onChange: (e) => setNewLocation({ ...newLocation, managerEmail: e.target.value }), placeholder: "e.g., manager@location.com", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] })] }), _jsx("div", { className: "pt-6 border-t border-slate-200", children: _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-hours", className: "text-sm font-medium text-slate-700", children: "Operating Hours" }), _jsx(Textarea, { id: "location-hours", value: newLocation.operatingHours, onChange: (e) => setNewLocation({ ...newLocation, operatingHours: e.target.value }), placeholder: "e.g., Mon-Fri: 8:00 AM - 6:00 PM, Sat: 9:00 AM - 4:00 PM, Sun: Closed", rows: 3, className: "resize-none border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "Specify the operational hours for this location" })] }) }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Contact Summary" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Phone, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Primary: ", newLocation.contactPhone || 'Not provided'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Mail, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Email: ", newLocation.contactEmail || 'Not provided'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(UserCheck, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Manager: ", newLocation.managerName || 'Not assigned'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Clock, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Hours: ", newLocation.operatingHours ? 'Configured' : 'Not set'] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "settings", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Advanced Settings" }), _jsx("p", { className: "text-sm text-slate-600", children: "Specialized configurations and operational parameters" })] })] }), _jsxs("div", { className: "space-y-8", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Warehouse Configuration" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-zone", className: "text-sm font-medium text-slate-700", children: "Warehouse Zone" }), _jsx(Input, { id: "location-zone", value: newLocation.warehouseZone, onChange: (e) => setNewLocation({ ...newLocation, warehouseZone: e.target.value }), placeholder: "e.g., Zone A, Sector 1, North Wing", className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-security", className: "text-sm font-medium text-slate-700", children: "Security Level" }), _jsxs("select", { id: "location-security", value: newLocation.securityLevel, onChange: (e) => setNewLocation({ ...newLocation, securityLevel: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200", children: [_jsx("option", { value: "STANDARD", children: "Standard Security" }), _jsx("option", { value: "HIGH", children: "High Security" }), _jsx("option", { value: "MAXIMUM", children: "Maximum Security" }), _jsx("option", { value: "RESTRICTED", children: "Restricted Access" })] })] })] })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Special Features" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-1 gap-4", children: _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "location-temperature", checked: newLocation.temperatureControlled, onChange: (e) => setNewLocation({ ...newLocation, temperatureControlled: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Thermometer, { className: "w-4 h-4 text-blue-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "location-temperature", className: "text-sm font-medium cursor-pointer", children: "Temperature Controlled" }), _jsx("p", { className: "text-xs text-slate-500", children: "Climate-controlled environment for sensitive products" })] })] })] }) })] }), _jsx("div", { className: "pt-6 border-t border-slate-200", children: _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-instructions", className: "text-sm font-medium text-slate-700", children: "Special Instructions" }), _jsx(Textarea, { id: "location-instructions", value: newLocation.specialInstructions, onChange: (e) => setNewLocation({ ...newLocation, specialInstructions: e.target.value }), placeholder: "Any special handling requirements, access procedures, or operational notes", rows: 4, className: "resize-none border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] }) }), _jsx("div", { className: "pt-6 border-t border-slate-200", children: _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "location-notes", className: "text-sm font-medium text-slate-700", children: "Internal Notes" }), _jsx(Textarea, { id: "location-notes", value: newLocation.notes, onChange: (e) => setNewLocation({ ...newLocation, notes: e.target.value }), placeholder: "Internal notes for staff use only (not visible to customers)", rows: 4, className: "resize-none border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "These notes are for internal use and won't be displayed to external users" })] }) }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-orange-50 to-red-50 rounded-lg border border-orange-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Configuration Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newLocation.isActive ? 'bg-green-500' : 'bg-orange-500'}` }), _jsx("span", { className: "text-slate-600", children: newLocation.isActive ? 'Active' : 'Inactive' })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newLocation.isDefault ? 'bg-blue-500' : 'bg-gray-400'}` }), _jsx("span", { className: "text-slate-600", children: newLocation.isDefault ? 'Default' : 'Standard' })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newLocation.temperatureControlled ? 'bg-blue-500' : 'bg-gray-400'}` }), _jsx("span", { className: "text-slate-600", children: newLocation.temperatureControlled ? 'Climate Controlled' : 'Standard Storage' })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-3 h-3 text-orange-600" }), _jsxs("span", { className: "text-slate-600", children: [newLocation.securityLevel || 'Standard', " Security"] })] })] })] })] })] }) })] })] }) }), _jsx(DialogFooter, { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-6", children: _jsxs("div", { className: "flex items-center justify-between w-full", children: [_jsxs("div", { className: "text-sm text-slate-600", children: [_jsx("span", { className: "font-medium", children: newLocation.name || 'New Location' }), newLocation.locationType && (_jsx("span", { className: "ml-2 px-2 py-1 bg-slate-100 text-slate-600 rounded text-xs", children: newLocation.locationType.replace('_', ' ') }))] }), _jsxs("div", { className: "flex gap-3", children: [_jsx(Button, { variant: "outline", onClick: () => setShowAddLocationDialog(false), className: "px-6", children: "Cancel" }), _jsx(Button, { onClick: async () => {
                                                        try {
                                                            if (!newLocation.name) {
                                                                toast({
                                                                    title: "Validation Error",
                                                                    description: "Location name is required",
                                                                    variant: "destructive"
                                                                });
                                                                return;
                                                            }
                                                            // Generate a unique code if none provided
                                                            const locationData = {
                                                                ...newLocation,
                                                                companyId: companyId,
                                                                tenantId: getTenantId()
                                                            };
                                                            // If no code provided, generate one
                                                            if (!locationData.code || locationData.code.trim() === '') {
                                                                locationData.code = `LOC-${Date.now()}-${Math.random().toString(36).substr(2, 4)}`;
                                                            }
                                                            console.log('Creating location with data:', locationData);
                                                            const createdLocation = await inventoryApi.createLocation(locationData);
                                                            console.log('Created location response:', createdLocation);
                                                            toast({
                                                                title: "Success",
                                                                description: "Location created successfully",
                                                            });
                                                            // Reset form
                                                            setNewLocation({
                                                                name: '',
                                                                code: '',
                                                                description: '',
                                                                locationType: 'WAREHOUSE',
                                                                address: '',
                                                                address2: '',
                                                                city: '',
                                                                state: '',
                                                                country: '',
                                                                postalCode: '',
                                                                latitude: '',
                                                                longitude: '',
                                                                contactName: '',
                                                                contactPhone: '',
                                                                contactEmail: '',
                                                                managerName: '',
                                                                managerEmail: '',
                                                                managerPhone: '',
                                                                isActive: true,
                                                                isDefault: false,
                                                                capacity: '',
                                                                timezone: '',
                                                                operatingHours: '',
                                                                specialInstructions: '',
                                                                warehouseZone: '',
                                                                temperatureControlled: false,
                                                                securityLevel: 'STANDARD',
                                                                notes: ''
                                                            });
                                                            setShowAddLocationDialog(false);
                                                            // Refresh locations list
                                                            queryClient.invalidateQueries({ queryKey: ['locations'] });
                                                        }
                                                        catch (error) {
                                                            console.error('Location creation error:', error);
                                                            let errorMessage = "Failed to create location. Please try again.";
                                                            if (error?.response?.data?.error === 'Location code already exists') {
                                                                errorMessage = error.response.data.message || "A location with this code already exists. Please choose a different code.";
                                                            }
                                                            else if (error?.response?.data?.message) {
                                                                errorMessage = error.response.data.message;
                                                            }
                                                            else if (error?.message) {
                                                                errorMessage = error.message;
                                                            }
                                                            toast({
                                                                title: "Error",
                                                                description: errorMessage,
                                                                variant: "destructive"
                                                            });
                                                        }
                                                    }, className: "px-8 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700", children: "Create Location" })] })] }) })] }) }), _jsx(Dialog, { open: showViewLocationDialog, onOpenChange: setShowViewLocationDialog, children: _jsxs(DialogContent, { className: "!max-w-6xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-blue-50", children: [_jsx(DialogHeader, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg", children: _jsx(MapPin, { className: "w-6 h-6 text-white" }) }), _jsxs("div", { children: [_jsx(DialogTitle, { className: "text-2xl font-bold text-slate-800", children: "Location Details" }), _jsx("p", { className: "text-slate-600 mt-1", children: "Complete location information and statistics" })] })] }) }), selectedLocationForDialog && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Info, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Basic Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential location details and identification" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Location Name" }), _jsx("p", { className: "text-lg font-semibold text-slate-800", children: selectedLocationForDialog.name })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Location Code" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.code || 'Not specified' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Location Type" }), _jsx(Badge, { variant: "outline", className: "mt-1", children: selectedLocationForDialog.locationType || selectedLocationForDialog.type || 'WAREHOUSE' })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Status" }), _jsxs("div", { className: "flex items-center gap-2 mt-1", children: [_jsx(Badge, { variant: selectedLocationForDialog.isActive ? "default" : "secondary", children: selectedLocationForDialog.isActive ? 'Active' : 'Inactive' }), selectedLocationForDialog.isDefault && (_jsx(Badge, { variant: "outline", children: "Default Location" }))] })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Description" }), _jsx("p", { className: "text-sm text-slate-700 mt-1", children: selectedLocationForDialog.description || 'No description provided' })] })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(MapPin, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Address Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Physical location and geographic coordinates" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Street Address" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.address || 'No address provided' })] }), selectedLocationForDialog.address2 && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Address Line 2" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.address2 })] })), _jsxs("div", { className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "City" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.city || 'Not specified' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "State" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.state || 'Not specified' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Postal Code" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.postalCode || 'Not specified' })] })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Country" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.country || 'Not specified' })] })] }), _jsxs("div", { className: "space-y-4", children: [(selectedLocationForDialog.latitude || selectedLocationForDialog.longitude) && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Geographic Coordinates" }), _jsxs("div", { className: "flex gap-4 mt-1", children: [_jsxs("div", { children: [_jsx("span", { className: "text-xs text-gray-500", children: "Latitude:" }), _jsx("p", { className: "text-sm font-mono text-slate-700", children: selectedLocationForDialog.latitude || 'Not set' })] }), _jsxs("div", { children: [_jsx("span", { className: "text-xs text-gray-500", children: "Longitude:" }), _jsx("p", { className: "text-sm font-mono text-slate-700", children: selectedLocationForDialog.longitude || 'Not set' })] })] })] })), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Timezone" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.timezone || 'Not specified' })] })] })] })] }), (selectedLocationForDialog.contactName || selectedLocationForDialog.managerName) && (_jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(User, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Contact Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Primary contacts and management details" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [selectedLocationForDialog.contactName && (_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-3", children: "Primary Contact" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Contact Name" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.contactName })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Phone" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.contactPhone || 'Not provided' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Email" }), _jsx("p", { className: "text-sm text-slate-700 break-words", children: selectedLocationForDialog.contactEmail || 'Not provided' })] })] })] })), selectedLocationForDialog.managerName && (_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-3", children: "Manager Information" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Manager Name" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.managerName })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Manager Phone" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.managerPhone || 'Not provided' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Manager Email" }), _jsx("p", { className: "text-sm text-slate-700 break-words", children: selectedLocationForDialog.managerEmail || 'Not provided' })] })] })] }))] })] })), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Settings & Operations" }), _jsx("p", { className: "text-sm text-slate-600", children: "Operational settings and special configurations" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Storage Capacity" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.capacity || 'Not specified' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Operating Hours" }), _jsx("p", { className: "text-sm text-slate-700", children: selectedLocationForDialog.operatingHours || 'Not specified' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Security Level" }), _jsx(Badge, { variant: "outline", className: "mt-1", children: selectedLocationForDialog.securityLevel || 'STANDARD' })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Special Features" }), _jsxs("div", { className: "flex flex-wrap gap-2 mt-1", children: [selectedLocationForDialog.temperatureControlled && (_jsx(Badge, { variant: "secondary", children: "Temperature Controlled" })), selectedLocationForDialog.isDefault && (_jsx(Badge, { variant: "outline", children: "Default Location" }))] })] }), selectedLocationForDialog.notes && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Notes" }), _jsx("p", { className: "text-sm text-slate-700 mt-1", children: selectedLocationForDialog.notes })] }))] })] })] }), _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-indigo-100 rounded-lg", children: _jsx(BarChart3, { className: "w-5 h-5 text-indigo-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Location Statistics" }), _jsx("p", { className: "text-sm text-slate-600", children: "Inventory and activity metrics" })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs("div", { className: "text-center p-4 bg-blue-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-blue-600", children: selectedLocationForDialog._count?.products || 0 }), _jsx("p", { className: "text-sm text-gray-500", children: "Products" })] }), _jsxs("div", { className: "text-center p-4 bg-green-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-green-600", children: selectedLocationForDialog._count?.movements || 0 }), _jsx("p", { className: "text-sm text-gray-500", children: "Movements" })] }), _jsxs("div", { className: "text-center p-4 bg-purple-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-purple-600", children: selectedLocationForDialog._count?.transfers || 0 }), _jsx("p", { className: "text-sm text-gray-500", children: "Transfers" })] }), _jsxs("div", { className: "text-center p-4 bg-orange-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-orange-600", children: selectedLocationForDialog._count?.alerts || 0 }), _jsx("p", { className: "text-sm text-gray-500", children: "Alerts" })] })] })] })] })), _jsxs(DialogFooter, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: [_jsx(Button, { variant: "outline", onClick: () => setShowViewLocationDialog(false), children: "Close" }), _jsx(Button, { onClick: () => {
                                            setShowViewLocationDialog(false);
                                            handleEditLocation(selectedLocationForDialog);
                                        }, className: "bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700", children: "Edit Location" })] })] }) }), _jsx(Dialog, { open: showEditLocationDialog, onOpenChange: setShowEditLocationDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-blue-50", children: [_jsx(DialogHeader, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg", children: _jsx(MapPin, { className: "w-6 h-6 text-white" }) }), _jsxs("div", { children: [_jsx(DialogTitle, { className: "text-2xl font-bold text-slate-800", children: "Edit Location" }), _jsx("p", { className: "text-slate-600 mt-1", children: "Update location information and settings" })] })] }) }), _jsx("div", { className: "flex-1", children: _jsxs(Tabs, { defaultValue: "basic", className: "h-full flex flex-col", children: [_jsx("div", { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-2 mb-4", children: _jsxs(TabsList, { className: "grid w-full grid-cols-4 gap-1", children: [_jsxs(TabsTrigger, { value: "basic", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-indigo-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Info, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Basic Info" })] }), _jsxs(TabsTrigger, { value: "address", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-emerald-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Address" })] }), _jsxs(TabsTrigger, { value: "contact", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(User, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Contact" })] }), _jsxs(TabsTrigger, { value: "settings", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Settings, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Settings" })] })] }) }), _jsxs("div", { className: "flex-1", children: [_jsx(TabsContent, { value: "basic", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Info, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Basic Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential location details and identification" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-name", className: "text-sm font-medium text-slate-700", children: "Location Name *" }), _jsx(Input, { id: "edit-location-name", value: newLocation.name, onChange: (e) => setNewLocation({ ...newLocation, name: e.target.value }), placeholder: "e.g., Main Warehouse, Downtown Store", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-code", className: "text-sm font-medium text-slate-700", children: "Location Code" }), _jsx(Input, { id: "edit-location-code", value: newLocation.code, onChange: (e) => setNewLocation({ ...newLocation, code: e.target.value }), placeholder: "e.g., WH-001, STORE-NYC", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-description", className: "text-sm font-medium text-slate-700", children: "Description" }), _jsx(Textarea, { id: "edit-location-description", value: newLocation.description, onChange: (e) => setNewLocation({ ...newLocation, description: e.target.value }), placeholder: "Brief description of the location, its purpose, and key features", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-type", className: "text-sm font-medium text-slate-700", children: "Location Type" }), _jsxs(Select, { value: newLocation.locationType, onValueChange: (value) => setNewLocation({ ...newLocation, locationType: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select location type" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "WAREHOUSE", children: "Warehouse" }), _jsx(SelectItem, { value: "STORE", children: "Store" }), _jsx(SelectItem, { value: "OFFICE", children: "Office" }), _jsx(SelectItem, { value: "DISTRIBUTION_CENTER", children: "Distribution Center" }), _jsx(SelectItem, { value: "FACTORY", children: "Factory" }), _jsx(SelectItem, { value: "SHOWROOM", children: "Showroom" }), _jsx(SelectItem, { value: "OTHER", children: "Other" })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-location-active", checked: newLocation.isActive, onChange: (e) => setNewLocation({ ...newLocation, isActive: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-location-active", className: "text-sm font-medium cursor-pointer", children: "Active Location" }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Location is operational and available" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-location-default", checked: newLocation.isDefault, onChange: (e) => setNewLocation({ ...newLocation, isDefault: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Star, { className: "w-4 h-4 text-blue-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-location-default", className: "text-sm font-medium cursor-pointer", children: "Default Location" }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Set as default for new inventory" })] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "address", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(MapPin, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Address Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Physical location and geographic coordinates" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-address", className: "text-sm font-medium text-slate-700", children: "Street Address" }), _jsx(Input, { id: "edit-location-address", value: newLocation.address, onChange: (e) => setNewLocation({ ...newLocation, address: e.target.value }), placeholder: "e.g., 123 Business Park Drive", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-address2", className: "text-sm font-medium text-slate-700", children: "Address Line 2 (Optional)" }), _jsx(Input, { id: "edit-location-address2", value: newLocation.address2, onChange: (e) => setNewLocation({ ...newLocation, address2: e.target.value }), placeholder: "e.g., Suite 100, Building A", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-city", className: "text-sm font-medium text-slate-700", children: "City" }), _jsx(Input, { id: "edit-location-city", value: newLocation.city, onChange: (e) => setNewLocation({ ...newLocation, city: e.target.value }), placeholder: "e.g., New York", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-state", className: "text-sm font-medium text-slate-700", children: "State/Province" }), _jsx(Input, { id: "edit-location-state", value: newLocation.state, onChange: (e) => setNewLocation({ ...newLocation, state: e.target.value }), placeholder: "e.g., NY", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-postal", className: "text-sm font-medium text-slate-700", children: "Postal Code" }), _jsx(Input, { id: "edit-location-postal", value: newLocation.postalCode, onChange: (e) => setNewLocation({ ...newLocation, postalCode: e.target.value }), placeholder: "e.g., 10001", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-country", className: "text-sm font-medium text-slate-700", children: "Country" }), _jsx(Input, { id: "edit-location-country", value: newLocation.country, onChange: (e) => setNewLocation({ ...newLocation, country: e.target.value }), placeholder: "e.g., United States", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800", children: "Geographic Coordinates (Optional)" }), _jsxs(Button, { type: "button", variant: "outline", size: "sm", onClick: async () => {
                                                                                            if (!navigator.geolocation) {
                                                                                                toast({
                                                                                                    title: "Geolocation Not Supported",
                                                                                                    description: "Your browser doesn't support geolocation. Please enter coordinates manually.",
                                                                                                    variant: "destructive"
                                                                                                });
                                                                                                return;
                                                                                            }
                                                                                            toast({
                                                                                                title: "Getting Location...",
                                                                                                description: "Please allow location access to automatically fill coordinates.",
                                                                                            });
                                                                                            navigator.geolocation.getCurrentPosition((position) => {
                                                                                                const { latitude, longitude } = position.coords;
                                                                                                setNewLocation({
                                                                                                    ...newLocation,
                                                                                                    latitude: latitude.toString(),
                                                                                                    longitude: longitude.toString()
                                                                                                });
                                                                                                toast({
                                                                                                    title: "Location Retrieved",
                                                                                                    description: `Coordinates set: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
                                                                                                });
                                                                                            }, (error) => {
                                                                                                let errorMessage = "Unable to retrieve location.";
                                                                                                switch (error.code) {
                                                                                                    case error.PERMISSION_DENIED:
                                                                                                        errorMessage = "Location access denied. Please enable location permissions.";
                                                                                                        break;
                                                                                                    case error.POSITION_UNAVAILABLE:
                                                                                                        errorMessage = "Location information unavailable.";
                                                                                                        break;
                                                                                                    case error.TIMEOUT:
                                                                                                        errorMessage = "Location request timed out.";
                                                                                                        break;
                                                                                                }
                                                                                                toast({
                                                                                                    title: "Location Error",
                                                                                                    description: errorMessage,
                                                                                                    variant: "destructive"
                                                                                                });
                                                                                            }, {
                                                                                                enableHighAccuracy: true,
                                                                                                timeout: 10000,
                                                                                                maximumAge: 300000 // 5 minutes
                                                                                            });
                                                                                        }, className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4" }), "Get Current Location"] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "edit-location-latitude", className: "text-sm font-medium text-slate-700 flex items-center gap-2", children: ["Latitude", newLocation.latitude && (_jsxs("div", { className: "flex items-center gap-1 text-green-600", children: [_jsx(Check, { className: "w-3 h-3" }), _jsx("span", { className: "text-xs", children: "Auto-filled" })] }))] }), _jsx(Input, { id: "edit-location-latitude", value: newLocation.latitude, onChange: (e) => setNewLocation({ ...newLocation, latitude: e.target.value }), placeholder: "e.g., 40.7128", className: `py-3 text-base transition-all duration-200 ${newLocation.latitude
                                                                                                    ? 'border-green-300 bg-green-50/30 focus:border-green-400 focus:ring-1 focus:ring-green-100'
                                                                                                    : 'border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100'}` })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs(Label, { htmlFor: "edit-location-longitude", className: "text-sm font-medium text-slate-700 flex items-center gap-2", children: ["Longitude", newLocation.longitude && (_jsxs("div", { className: "flex items-center gap-1 text-green-600", children: [_jsx(Check, { className: "w-3 h-3" }), _jsx("span", { className: "text-xs", children: "Auto-filled" })] }))] }), _jsx(Input, { id: "edit-location-longitude", value: newLocation.longitude, onChange: (e) => setNewLocation({ ...newLocation, longitude: e.target.value }), placeholder: "e.g., -74.0060", className: `py-3 text-base transition-all duration-200 ${newLocation.longitude
                                                                                                    ? 'border-green-300 bg-green-50/30 focus:border-green-400 focus:ring-1 focus:ring-green-100'
                                                                                                    : 'border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100'}` })] })] }), _jsx("p", { className: "text-xs text-slate-500 mt-2", children: "Coordinates help with routing and mapping integrations" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-timezone", className: "text-sm font-medium text-slate-700", children: "Timezone" }), _jsxs("select", { id: "edit-location-timezone", value: newLocation.timezone, onChange: (e) => setNewLocation({ ...newLocation, timezone: e.target.value }), className: "w-full px-3 py-3 bg-white border border-slate-300 rounded-lg text-base focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200", children: [_jsx("option", { value: "", children: "Select timezone" }), _jsx("option", { value: "America/New_York", children: "Eastern Time (EST/EDT)" }), _jsx("option", { value: "America/Chicago", children: "Central Time (CST/CDT)" }), _jsx("option", { value: "America/Denver", children: "Mountain Time (MST/MDT)" }), _jsx("option", { value: "America/Los_Angeles", children: "Pacific Time (PST/PDT)" }), _jsx("option", { value: "Europe/London", children: "Greenwich Mean Time (GMT)" }), _jsx("option", { value: "Europe/Paris", children: "Central European Time (CET)" }), _jsx("option", { value: "Asia/Tokyo", children: "Japan Standard Time (JST)" }), _jsx("option", { value: "Asia/Shanghai", children: "China Standard Time (CST)" })] })] })] })] }) }), _jsx(TabsContent, { value: "contact", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(User, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Contact Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Primary contacts and management details" })] })] }), _jsxs("div", { className: "space-y-8", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Primary Contact" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-contact-name", className: "text-sm font-medium text-slate-700", children: "Contact Name" }), _jsx(Input, { id: "edit-location-contact-name", value: newLocation.contactName, onChange: (e) => setNewLocation({ ...newLocation, contactName: e.target.value }), placeholder: "e.g., John Smith", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-contact-phone", className: "text-sm font-medium text-slate-700", children: "Phone Number" }), _jsx(Input, { id: "edit-location-contact-phone", value: newLocation.contactPhone, onChange: (e) => setNewLocation({ ...newLocation, contactPhone: e.target.value }), placeholder: "e.g., +1 (555) 123-4567", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-contact-email", className: "text-sm font-medium text-slate-700", children: "Email Address" }), _jsx(Input, { id: "edit-location-contact-email", type: "email", value: newLocation.contactEmail, onChange: (e) => setNewLocation({ ...newLocation, contactEmail: e.target.value }), placeholder: "e.g., contact@location.com", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Manager Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-manager-name", className: "text-sm font-medium text-slate-700", children: "Manager Name" }), _jsx(Input, { id: "edit-location-manager-name", value: newLocation.managerName, onChange: (e) => setNewLocation({ ...newLocation, managerName: e.target.value }), placeholder: "e.g., Jane Doe", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-manager-phone", className: "text-sm font-medium text-slate-700", children: "Manager Phone" }), _jsx(Input, { id: "edit-location-manager-phone", value: newLocation.managerPhone, onChange: (e) => setNewLocation({ ...newLocation, managerPhone: e.target.value }), placeholder: "e.g., +1 (555) 987-6543", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-manager-email", className: "text-sm font-medium text-slate-700", children: "Manager Email" }), _jsx(Input, { id: "edit-location-manager-email", type: "email", value: newLocation.managerEmail, onChange: (e) => setNewLocation({ ...newLocation, managerEmail: e.target.value }), placeholder: "e.g., manager@location.com", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] })] })] })] }) }), _jsx(TabsContent, { value: "settings", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Location Settings" }), _jsx("p", { className: "text-sm text-slate-600", children: "Operational settings and special configurations" })] })] }), _jsxs("div", { className: "space-y-8", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Capacity & Operations" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-capacity", className: "text-sm font-medium text-slate-700", children: "Storage Capacity" }), _jsx(Input, { id: "edit-location-capacity", value: newLocation.capacity, onChange: (e) => setNewLocation({ ...newLocation, capacity: e.target.value }), placeholder: "e.g., 1000 sq ft, 500 pallets", className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-operating-hours", className: "text-sm font-medium text-slate-700", children: "Operating Hours" }), _jsx(Input, { id: "edit-location-operating-hours", value: newLocation.operatingHours, onChange: (e) => setNewLocation({ ...newLocation, operatingHours: e.target.value }), placeholder: "e.g., Mon-Fri 8AM-6PM", className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Special Features" }), _jsx("div", { className: "space-y-4", children: _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "edit-location-temperature", checked: newLocation.temperatureControlled, onChange: (e) => setNewLocation({ ...newLocation, temperatureControlled: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "edit-location-temperature", className: "text-sm font-medium cursor-pointer", children: "Temperature Controlled" }), _jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Location has climate control systems" })] })] })] }) })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Security & Notes" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-security", className: "text-sm font-medium text-slate-700", children: "Security Level" }), _jsxs(Select, { value: newLocation.securityLevel, onValueChange: (value) => setNewLocation({ ...newLocation, securityLevel: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200", children: _jsx(SelectValue, { placeholder: "Select security level" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "STANDARD", children: "Standard" }), _jsx(SelectItem, { value: "HIGH", children: "High Security" }), _jsx(SelectItem, { value: "MAXIMUM", children: "Maximum Security" })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "edit-location-notes", className: "text-sm font-medium text-slate-700", children: "Special Instructions & Notes" }), _jsx(Textarea, { id: "edit-location-notes", value: newLocation.notes, onChange: (e) => setNewLocation({ ...newLocation, notes: e.target.value }), placeholder: "Any special instructions, access requirements, or important notes about this location", rows: 4, className: "resize-none border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] })] })] })] })] }) })] })] }) }), _jsxs(DialogFooter, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: [_jsx(Button, { variant: "outline", onClick: () => setShowEditLocationDialog(false), children: "Cancel" }), _jsx(Button, { onClick: async () => {
                                            try {
                                                if (!newLocation.name) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Location name is required",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                await inventoryApi.updateLocation(selectedLocationForDialog.id, {
                                                    ...newLocation,
                                                    companyId: companyId,
                                                    tenantId: getTenantId()
                                                });
                                                toast({
                                                    title: "Success",
                                                    description: "Location updated successfully",
                                                });
                                                setShowEditLocationDialog(false);
                                                // Refresh locations list
                                                queryClient.invalidateQueries({ queryKey: ['locations'] });
                                            }
                                            catch (error) {
                                                toast({
                                                    title: "Error",
                                                    description: "Failed to update location. Please try again.",
                                                    variant: "destructive"
                                                });
                                            }
                                        }, children: "Update Location" })] })] }) }), _jsx(Dialog, { open: showNewMovementDialog, onOpenChange: setShowNewMovementDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-indigo-50", children: [_jsx(DialogHeader, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "p-3 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl shadow-lg", children: _jsx(ArrowRightLeft, { className: "w-6 h-6 text-white" }) }), _jsxs("div", { children: [_jsx(DialogTitle, { className: "text-2xl font-bold text-slate-800", children: "Create New Movement" }), _jsx("p", { className: "text-slate-600 mt-1", children: "Record inventory transactions and stock adjustments" })] })] }) }), _jsx("div", { className: "flex-1", children: _jsxs(Tabs, { defaultValue: "basic", className: "h-full flex flex-col", children: [_jsx("div", { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-2 mb-4", children: _jsxs(TabsList, { className: "grid w-full grid-cols-4 gap-1", children: [_jsxs(TabsTrigger, { value: "basic", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Package, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Basic Info" })] }), _jsxs(TabsTrigger, { value: "details", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Calculator, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Details" })] }), _jsxs(TabsTrigger, { value: "tracking", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-teal-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(QrCode, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Tracking" })] }), _jsxs(TabsTrigger, { value: "workflow", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Settings, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Workflow" })] })] }) }), _jsxs("div", { className: "flex-1", children: [_jsx(TabsContent, { value: "basic", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-indigo-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-indigo-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Movement Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential movement details and product selection" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-product", className: "text-sm font-medium text-slate-700", children: "Product *" }), _jsxs(Select, { value: newMovement.productId, onValueChange: (value) => {
                                                                                            const product = allProducts.find(p => p.id === value);
                                                                                            const unitCost = product ? Number(product.costPrice) : 0;
                                                                                            const totalCost = newMovement.autoCalculateTotal ? unitCost * newMovement.quantity : newMovement.totalCost;
                                                                                            setNewMovement({
                                                                                                ...newMovement,
                                                                                                productId: value,
                                                                                                unitCost: unitCost,
                                                                                                totalCost: totalCost
                                                                                            });
                                                                                        }, children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100", children: _jsx(SelectValue, { placeholder: "Select a product to move" }) }), _jsx(SelectContent, { children: allProducts.map((product) => (_jsx(SelectItem, { value: product.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-8 h-8 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-4 h-4 text-indigo-600" }) }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: product.name }), _jsxs("div", { className: "text-sm text-slate-500", children: ["SKU: ", product.sku] })] })] }) }, product.id))) })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-type", className: "text-sm font-medium text-slate-700", children: "Movement Type *" }), _jsxs(Select, { value: newMovement.movementType, onValueChange: (value) => setNewMovement({ ...newMovement, movementType: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "INBOUND", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsx("span", { children: "Inbound (Stock In)" })] }) }), _jsx(SelectItem, { value: "OUTBOUND", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-red-500 rounded-full" }), _jsx("span", { children: "Outbound (Stock Out)" })] }) }), _jsx(SelectItem, { value: "TRANSFER_IN", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), _jsx("span", { children: "Transfer In" })] }) }), _jsx(SelectItem, { value: "TRANSFER_OUT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsx("span", { children: "Transfer Out" })] }) }), _jsx(SelectItem, { value: "ADJUSTMENT_IN", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), _jsx("span", { children: "Adjustment In" })] }) }), _jsx(SelectItem, { value: "ADJUSTMENT_OUT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-yellow-500 rounded-full" }), _jsx("span", { children: "Adjustment Out" })] }) }), _jsx(SelectItem, { value: "RETURN_IN", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-teal-500 rounded-full" }), _jsx("span", { children: "Return In" })] }) }), _jsx(SelectItem, { value: "RETURN_OUT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-pink-500 rounded-full" }), _jsx("span", { children: "Return Out" })] }) })] })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-quantity", className: "text-sm font-medium text-slate-700", children: "Quantity *" }), _jsx(Input, { id: "movement-quantity", type: "number", min: "0", step: "1", value: newMovement.quantity, onChange: (e) => {
                                                                                            const quantity = parseFloat(e.target.value) || 0;
                                                                                            const totalCost = newMovement.autoCalculateTotal ? newMovement.unitCost * quantity : newMovement.totalCost;
                                                                                            setNewMovement({
                                                                                                ...newMovement,
                                                                                                quantity: quantity,
                                                                                                totalCost: totalCost
                                                                                            });
                                                                                        }, placeholder: "Enter quantity", className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-date", className: "text-sm font-medium text-slate-700", children: "Movement Date *" }), _jsx(Input, { id: "movement-date", type: "date", value: newMovement.movementDate, onChange: (e) => setNewMovement({ ...newMovement, movementDate: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-time", className: "text-sm font-medium text-slate-700", children: "Movement Time" }), _jsx(Input, { id: "movement-time", type: "time", value: newMovement.movementTime, onChange: (e) => setNewMovement({ ...newMovement, movementTime: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-location", className: "text-sm font-medium text-slate-700", children: "Primary Location" }), _jsxs(Select, { value: newMovement.locationId, onValueChange: (value) => setNewMovement({ ...newMovement, locationId: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100", children: _jsx(SelectValue, { placeholder: "Select a location" }) }), _jsx(SelectContent, { children: locations.map((location) => (_jsx(SelectItem, { value: location.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(MapPin, { className: "w-4 h-4 text-indigo-600" }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: location.name }), _jsx("div", { className: "text-sm text-slate-500", children: location.code })] })] }) }, location.id))) })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-reason", className: "text-sm font-medium text-slate-700", children: "Reason/Notes" }), _jsx(Textarea, { id: "movement-reason", value: newMovement.reason, onChange: (e) => setNewMovement({ ...newMovement, reason: e.target.value }), placeholder: "Enter reason or notes for this movement", rows: 3, className: "resize-none border-slate-300 focus:border-indigo-400 focus:ring-1 focus:ring-indigo-100 transition-all duration-200" })] }), newMovement.productId && (_jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-indigo-50 to-purple-50 rounded-lg border border-indigo-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Movement Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Package, { className: "w-4 h-4 text-indigo-600" }), _jsxs("span", { className: "text-slate-600", children: ["Product: ", allProducts.find(p => p.id === newMovement.productId)?.name || 'Selected'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(ArrowRightLeft, { className: "w-4 h-4 text-indigo-600" }), _jsxs("span", { className: "text-slate-600", children: ["Type: ", newMovement.movementType.replace('_', ' ')] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-indigo-500 rounded-full" }), _jsxs("span", { className: "text-slate-600", children: ["Qty: ", newMovement.quantity] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-indigo-600" }), _jsxs("span", { className: "text-slate-600", children: ["Date: ", new Date(newMovement.movementDate).toLocaleDateString()] })] })] })] }))] })] }) }), _jsx(TabsContent, { value: "details", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(Calculator, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Financial Details" }), _jsx("p", { className: "text-sm text-slate-600", children: "Cost tracking and financial information" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-unit-cost", className: "text-sm font-medium text-slate-700", children: "Unit Cost" }), _jsxs("div", { className: "relative", children: [_jsx(DollarSign, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" }), _jsx(Input, { id: "movement-unit-cost", type: "number", min: "0", step: "0.01", value: newMovement.unitCost, onChange: (e) => {
                                                                                                    const unitCost = parseFloat(e.target.value) || 0;
                                                                                                    const totalCost = newMovement.autoCalculateTotal ? unitCost * newMovement.quantity : newMovement.totalCost;
                                                                                                    setNewMovement({
                                                                                                        ...newMovement,
                                                                                                        unitCost: unitCost,
                                                                                                        totalCost: totalCost
                                                                                                    });
                                                                                                }, placeholder: "0.00", className: "pl-10 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-total-cost", className: "text-sm font-medium text-slate-700", children: "Total Cost" }), _jsxs("div", { className: "relative", children: [_jsx(DollarSign, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" }), _jsx(Input, { id: "movement-total-cost", type: "number", min: "0", step: "0.01", value: newMovement.totalCost, onChange: (e) => setNewMovement({ ...newMovement, totalCost: parseFloat(e.target.value) || 0 }), placeholder: "0.00", disabled: newMovement.autoCalculateTotal, className: `pl-10 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200 ${newMovement.autoCalculateTotal ? 'bg-slate-50 cursor-not-allowed' : ''}` })] })] }), _jsx("div", { className: "flex items-end", children: _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors w-full", children: [_jsx("input", { type: "checkbox", id: "auto-calculate-total", checked: newMovement.autoCalculateTotal, onChange: (e) => {
                                                                                                const autoCalculate = e.target.checked;
                                                                                                const totalCost = autoCalculate ? newMovement.unitCost * newMovement.quantity : newMovement.totalCost;
                                                                                                setNewMovement({
                                                                                                    ...newMovement,
                                                                                                    autoCalculateTotal: autoCalculate,
                                                                                                    totalCost: totalCost
                                                                                                });
                                                                                            }, className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "auto-calculate-total", className: "text-sm font-medium cursor-pointer", children: "Auto Calculate" }), _jsx("p", { className: "text-xs text-slate-500", children: "Calculate total automatically" })] })] }) })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-reference", className: "text-sm font-medium text-slate-700", children: "Reference Number" }), _jsx(Input, { id: "movement-reference", value: newMovement.reference, onChange: (e) => setNewMovement({ ...newMovement, reference: e.target.value }), placeholder: "e.g., PO-001, INV-123, REF-456", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-invoice", className: "text-sm font-medium text-slate-700", children: "Invoice Number" }), _jsx(Input, { id: "movement-invoice", value: newMovement.invoiceNumber, onChange: (e) => setNewMovement({ ...newMovement, invoiceNumber: e.target.value }), placeholder: "e.g., INV-2024-001", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-department", className: "text-sm font-medium text-slate-700", children: "Department" }), _jsx(Input, { id: "movement-department", value: newMovement.department, onChange: (e) => setNewMovement({ ...newMovement, department: e.target.value }), placeholder: "e.g., Warehouse, Sales", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-project", className: "text-sm font-medium text-slate-700", children: "Project" }), _jsx(Input, { id: "movement-project", value: newMovement.project, onChange: (e) => setNewMovement({ ...newMovement, project: e.target.value }), placeholder: "e.g., Project Alpha", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-cost-center", className: "text-sm font-medium text-slate-700", children: "Cost Center" }), _jsx(Input, { id: "movement-cost-center", value: newMovement.costCenter, onChange: (e) => setNewMovement({ ...newMovement, costCenter: e.target.value }), placeholder: "e.g., CC-001", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), newMovement.quantity > 0 && newMovement.unitCost > 0 && (_jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg border border-blue-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Cost Breakdown" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsxs("div", { className: "text-2xl font-bold text-blue-600", children: ["$", newMovement.unitCost.toFixed(2)] }), _jsx("div", { className: "text-sm text-slate-600", children: "Unit Cost" })] }), _jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsx("div", { className: "text-2xl font-bold text-green-600", children: newMovement.quantity }), _jsx("div", { className: "text-sm text-slate-600", children: "Quantity" })] }), _jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsxs("div", { className: "text-2xl font-bold text-indigo-600", children: ["$", newMovement.totalCost.toFixed(2)] }), _jsx("div", { className: "text-sm text-slate-600", children: "Total Cost" })] })] })] }))] })] }) }), _jsx(TabsContent, { value: "tracking", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-green-100 rounded-lg", children: _jsx(QrCode, { className: "w-5 h-5 text-green-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Tracking Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Batch numbers, serial codes, and location transfers" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-batch", className: "text-sm font-medium text-slate-700", children: "Batch Number" }), _jsx(Input, { id: "movement-batch", value: newMovement.batchNumber, onChange: (e) => setNewMovement({ ...newMovement, batchNumber: e.target.value }), placeholder: "e.g., BATCH-2024-001", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-serial", className: "text-sm font-medium text-slate-700", children: "Serial Number" }), _jsx(Input, { id: "movement-serial", value: newMovement.serialNumber, onChange: (e) => setNewMovement({ ...newMovement, serialNumber: e.target.value }), placeholder: "e.g., SN123456789", className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-expiry", className: "text-sm font-medium text-slate-700", children: "Expiry Date" }), _jsx(Input, { id: "movement-expiry", type: "date", value: newMovement.expiryDate, onChange: (e) => setNewMovement({ ...newMovement, expiryDate: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100 transition-all duration-200" })] }), (newMovement.movementType === 'TRANSFER_IN' || newMovement.movementType === 'TRANSFER_OUT') && (_jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Transfer Locations" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-from-location", className: "text-sm font-medium text-slate-700", children: "From Location" }), _jsxs(Select, { value: newMovement.fromLocationId, onValueChange: (value) => setNewMovement({ ...newMovement, fromLocationId: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100", children: _jsx(SelectValue, { placeholder: "Select source location" }) }), _jsx(SelectContent, { children: locations.map((location) => (_jsx(SelectItem, { value: location.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(MapPin, { className: "w-4 h-4 text-green-600" }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: location.name }), _jsx("div", { className: "text-sm text-slate-500", children: location.code })] })] }) }, location.id))) })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-to-location", className: "text-sm font-medium text-slate-700", children: "To Location" }), _jsxs(Select, { value: newMovement.toLocationId, onValueChange: (value) => setNewMovement({ ...newMovement, toLocationId: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-green-400 focus:ring-1 focus:ring-green-100", children: _jsx(SelectValue, { placeholder: "Select destination location" }) }), _jsx(SelectContent, { children: locations.map((location) => (_jsx(SelectItem, { value: location.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(MapPin, { className: "w-4 h-4 text-green-600" }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: location.name }), _jsx("div", { className: "text-sm text-slate-500", children: location.code })] })] }) }, location.id))) })] })] })] })] })), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-green-50 to-teal-50 rounded-lg border border-green-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Tracking Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(QrCode, { className: "w-4 h-4 text-green-600" }), _jsxs("span", { className: "text-slate-600", children: ["Batch: ", newMovement.batchNumber || 'Not set'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsxs("span", { className: "text-slate-600", children: ["Serial: ", newMovement.serialNumber || 'Not set'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-green-600" }), _jsxs("span", { className: "text-slate-600", children: ["Expiry: ", newMovement.expiryDate ? new Date(newMovement.expiryDate).toLocaleDateString() : 'No expiry'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4 text-green-600" }), _jsxs("span", { className: "text-slate-600", children: ["Transfer: ", newMovement.fromLocationId || newMovement.toLocationId ? 'Yes' : 'No'] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "workflow", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Workflow Settings" }), _jsx("p", { className: "text-sm text-slate-600", children: "Approval process, priority, and status management" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-priority", className: "text-sm font-medium text-slate-700", children: "Priority Level" }), _jsxs(Select, { value: newMovement.priority, onValueChange: (value) => setNewMovement({ ...newMovement, priority: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "LOW", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsx("span", { children: "Low Priority" })] }) }), _jsx(SelectItem, { value: "NORMAL", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), _jsx("span", { children: "Normal Priority" })] }) }), _jsx(SelectItem, { value: "HIGH", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsx("span", { children: "High Priority" })] }) }), _jsx(SelectItem, { value: "URGENT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-red-500 rounded-full" }), _jsx("span", { children: "Urgent" })] }) })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-status", className: "text-sm font-medium text-slate-700", children: "Status" }), _jsxs(Select, { value: newMovement.status, onValueChange: (value) => setNewMovement({ ...newMovement, status: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "PENDING", children: "Pending" }), _jsx(SelectItem, { value: "APPROVED", children: "Approved" }), _jsx(SelectItem, { value: "PROCESSING", children: "Processing" }), _jsx(SelectItem, { value: "COMPLETED", children: "Completed" }), _jsx(SelectItem, { value: "CANCELLED", children: "Cancelled" })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-processed-by", className: "text-sm font-medium text-slate-700", children: "Processed By" }), _jsx(Input, { id: "movement-processed-by", value: newMovement.processedBy, onChange: (e) => setNewMovement({ ...newMovement, processedBy: e.target.value }), placeholder: "Staff member name", className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Workflow Options" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "movement-urgent", checked: newMovement.isUrgent, onChange: (e) => setNewMovement({ ...newMovement, isUrgent: e.target.checked }), className: "w-4 h-4 text-red-600 bg-gray-100 border-gray-300 rounded focus:ring-red-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-4 h-4 text-red-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "movement-urgent", className: "text-sm font-medium cursor-pointer", children: "Urgent Movement" }), _jsx("p", { className: "text-xs text-slate-500", children: "Mark as urgent for priority processing" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "movement-approval", checked: newMovement.requiresApproval, onChange: (e) => setNewMovement({ ...newMovement, requiresApproval: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-4 h-4 text-orange-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "movement-approval", className: "text-sm font-medium cursor-pointer", children: "Requires Approval" }), _jsx("p", { className: "text-xs text-slate-500", children: "Movement needs manager approval" })] })] })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "movement-notes", className: "text-sm font-medium text-slate-700", children: "Internal Notes" }), _jsx(Textarea, { id: "movement-notes", value: newMovement.notes, onChange: (e) => setNewMovement({ ...newMovement, notes: e.target.value }), placeholder: "Internal notes for staff use only (not visible to external users)", rows: 4, className: "resize-none border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "These notes are for internal use and won't be displayed to external users" })] }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-orange-50 to-red-50 rounded-lg border border-orange-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Workflow Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newMovement.priority === 'URGENT' ? 'bg-red-500' : newMovement.priority === 'HIGH' ? 'bg-orange-500' : 'bg-blue-500'}` }), _jsxs("span", { className: "text-slate-600", children: ["Priority: ", newMovement.priority] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsxs("span", { className: "text-slate-600", children: ["Status: ", newMovement.status] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-3 h-3 text-orange-600" }), _jsx("span", { className: "text-slate-600", children: newMovement.isUrgent ? 'Urgent' : 'Standard' })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-3 h-3 text-orange-600" }), _jsx("span", { className: "text-slate-600", children: newMovement.requiresApproval ? 'Needs Approval' : 'Auto Process' })] })] })] })] })] }) })] })] }) }), _jsx(DialogFooter, { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-6", children: _jsxs("div", { className: "flex items-center justify-between w-full", children: [_jsxs("div", { className: "text-sm text-slate-600", children: [_jsx("span", { className: "font-medium", children: allProducts.find(p => p.id === newMovement.productId)?.name || 'No Product Selected' }), newMovement.movementType && (_jsx("span", { className: "ml-2 px-2 py-1 bg-slate-100 text-slate-600 rounded text-xs", children: newMovement.movementType.replace('_', ' ') }))] }), _jsxs("div", { className: "flex gap-3", children: [_jsx(Button, { variant: "outline", onClick: () => setShowNewMovementDialog(false), className: "px-6", children: "Cancel" }), _jsx(Button, { onClick: handleCreateMovement, className: "px-8 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700", children: "Create Movement" })] })] }) })] }) }), _jsx(Dialog, { open: showViewMovementDialog, onOpenChange: setShowViewMovementDialog, children: _jsxs(DialogContent, { className: "max-w-2xl", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Movement Details" }) }), selectedMovement && (_jsxs("div", { className: "space-y-6 py-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Product" }), _jsxs("div", { className: "flex items-center gap-3 mt-1", children: [_jsx("div", { className: "w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center", children: getMovementIcon(selectedMovement.movementType) }), _jsxs("div", { children: [_jsx("p", { className: "font-semibold", children: selectedMovement.product?.name || 'Unknown Product' }), _jsx("p", { className: "text-sm text-gray-500", children: selectedMovement.product?.sku || 'No SKU' })] })] })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Movement Type" }), _jsxs("div", { className: "flex items-center gap-2 mt-1", children: [_jsx(Badge, { variant: "outline", className: "capitalize", children: selectedMovement.movementType?.replace('_', ' ').toLowerCase() }), _jsx("div", { className: `w-3 h-3 rounded-full ${selectedMovement.quantity > 0 ? 'bg-green-500' : 'bg-red-500'}` })] })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Quantity" }), _jsxs("p", { className: `text-2xl font-bold mt-1 ${selectedMovement.quantity > 0 ? 'text-green-600' : 'text-red-600'}`, children: [selectedMovement.quantity > 0 ? '+' : '', selectedMovement.quantity] })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Movement Date" }), _jsx("p", { className: "text-sm mt-1", children: new Date(selectedMovement.movementDate).toLocaleDateString() })] })] }), _jsxs("div", { className: "space-y-4", children: [selectedMovement.unitCost && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Unit Cost" }), _jsxs("p", { className: "text-lg font-semibold mt-1", children: ["$", Number(selectedMovement.unitCost || 0).toFixed(2)] })] })), selectedMovement.totalCost && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Total Cost" }), _jsxs("p", { className: "text-lg font-semibold mt-1", children: ["$", Number(selectedMovement.totalCost || 0).toFixed(2)] })] })), selectedMovement.reference && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Reference" }), _jsx("p", { className: "text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded", children: selectedMovement.reference })] })), selectedMovement.location && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium text-gray-500", children: "Location" }), _jsxs("p", { className: "text-sm mt-1", children: [selectedMovement.location.name, " (", selectedMovement.location.code, ")"] })] }))] })] }), (selectedMovement.reason || selectedMovement.notes) && (_jsxs("div", { className: "border-t pt-4", children: [_jsx(Label, { className: "text-sm font-medium text-gray-500 mb-3 block", children: "Additional Information" }), _jsxs("div", { className: "space-y-3", children: [selectedMovement.reason && (_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Reason" }), _jsx("p", { className: "text-sm mt-1", children: selectedMovement.reason })] })), selectedMovement.notes && (_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Notes" }), _jsx("p", { className: "text-sm mt-1", children: selectedMovement.notes })] }))] })] })), (selectedMovement.serialNumbers || selectedMovement.batchNumber) && (_jsxs("div", { className: "border-t pt-4", children: [_jsx(Label, { className: "text-sm font-medium text-gray-500 mb-3 block", children: "Tracking Information" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [selectedMovement.serialNumbers && (_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Serial Numbers" }), _jsx("p", { className: "text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded", children: selectedMovement.serialNumbers })] })), selectedMovement.batchNumber && (_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Batch Number" }), _jsx("p", { className: "text-sm mt-1 font-mono bg-gray-100 px-2 py-1 rounded", children: selectedMovement.batchNumber })] }))] })] })), _jsxs("div", { className: "border-t pt-4", children: [_jsx(Label, { className: "text-sm font-medium text-gray-500 mb-3 block", children: "System Information" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Created At" }), _jsx("p", { className: "mt-1", children: new Date(selectedMovement.createdAt).toLocaleString() })] }), selectedMovement.performedBy && (_jsxs("div", { children: [_jsx(Label, { className: "text-xs text-gray-500", children: "Performed By" }), _jsx("p", { className: "mt-1", children: selectedMovement.performedBy })] }))] })] })] })), _jsx(DialogFooter, { children: _jsx(Button, { variant: "outline", onClick: () => setShowViewMovementDialog(false), children: "Close" }) })] }) }), _jsx(Dialog, { open: showQRCodeDialog, onOpenChange: setShowQRCodeDialog, children: _jsxs(DialogContent, { className: "max-w-md", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Product QR Code" }) }), selectedProduct && (_jsxs("div", { className: "space-y-4 py-4", children: [_jsx("div", { className: "text-center", children: _jsx("div", { className: "w-64 h-64 mx-auto bg-white rounded-lg flex items-center justify-center border-2 border-gray-200 shadow-sm", children: qrCodeImage ? (_jsx("img", { src: qrCodeImage, alt: "Product QR Code", className: "w-60 h-60 rounded" })) : (_jsxs("div", { className: "text-center", children: [_jsx(RefreshCw, { className: "w-8 h-8 mx-auto text-gray-400 mb-2 animate-spin" }), _jsx("p", { className: "text-sm text-gray-500", children: "Generating QR Code..." })] })) }) }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-sm font-medium", children: "Product Information" }), _jsxs("div", { className: "bg-gray-50 p-3 rounded-lg space-y-1", children: [_jsxs("p", { className: "text-sm", children: [_jsx("span", { className: "font-medium", children: "Name:" }), " ", selectedProduct.name] }), _jsxs("p", { className: "text-sm", children: [_jsx("span", { className: "font-medium", children: "SKU:" }), " ", selectedProduct.sku] }), _jsxs("p", { className: "text-sm", children: [_jsx("span", { className: "font-medium", children: "ID:" }), " ", selectedProduct.id] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-sm font-medium", children: "Actions" }), _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsxs(Button, { variant: "outline", size: "sm", onClick: () => generateQRCode(selectedProduct), children: [_jsx(RefreshCw, { className: "w-4 h-4 mr-1" }), "Regenerate"] }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                            const qrData = {
                                                                type: 'product',
                                                                id: selectedProduct.id,
                                                                sku: selectedProduct.sku,
                                                                name: selectedProduct.name,
                                                                url: `${window.location.origin}/products/${selectedProduct.id}`
                                                            };
                                                            navigator.clipboard.writeText(JSON.stringify(qrData));
                                                            toast({
                                                                title: "Copied to Clipboard",
                                                                description: "QR code data has been copied to your clipboard",
                                                            });
                                                        }, children: "Copy Data" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                            const qrData = {
                                                                type: 'product',
                                                                id: selectedProduct.id,
                                                                sku: selectedProduct.sku,
                                                                name: selectedProduct.name,
                                                                url: `${window.location.origin}/products/${selectedProduct.id}`
                                                            };
                                                            const blob = new Blob([JSON.stringify(qrData, null, 2)], { type: 'application/json' });
                                                            const url = URL.createObjectURL(blob);
                                                            const a = document.createElement('a');
                                                            a.href = url;
                                                            a.download = `${selectedProduct.sku}-qr-data.json`;
                                                            document.body.appendChild(a);
                                                            a.click();
                                                            document.body.removeChild(a);
                                                            URL.revokeObjectURL(url);
                                                            toast({
                                                                title: "Downloaded",
                                                                description: "QR code data has been downloaded as JSON file",
                                                            });
                                                        }, children: "Download JSON" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                            if (qrCodeImage) {
                                                                const a = document.createElement('a');
                                                                a.href = qrCodeImage;
                                                                a.download = `${selectedProduct.sku}-qr-code.png`;
                                                                document.body.appendChild(a);
                                                                a.click();
                                                                document.body.removeChild(a);
                                                                toast({
                                                                    title: "Downloaded",
                                                                    description: "QR code image has been downloaded as PNG file",
                                                                });
                                                            }
                                                        }, children: "Download QR" })] })] })] })), _jsxs(DialogFooter, { children: [_jsx(Button, { variant: "outline", onClick: () => setShowQRCodeDialog(false), children: "Close" }), _jsx(Button, { onClick: () => {
                                            setShowQRCodeDialog(false);
                                            handleViewProduct(selectedProduct);
                                        }, children: "View Product" })] })] }) }), _jsx(Dialog, { open: showAlertSettingsDialog, onOpenChange: setShowAlertSettingsDialog, children: _jsxs(DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Alert Settings" }) }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold", children: "Stock Thresholds" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "lowStockThreshold", children: "Low Stock Threshold" }), _jsx(Input, { id: "lowStockThreshold", type: "number", value: alertSettings.lowStockThreshold, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    lowStockThreshold: Number(e.target.value)
                                                                }) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Alert when stock \u2264 this amount" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "overstockThreshold", children: "Overstock Threshold" }), _jsx(Input, { id: "overstockThreshold", type: "number", value: alertSettings.overstockThreshold, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    overstockThreshold: Number(e.target.value)
                                                                }) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Alert when stock \u2265 this amount" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "criticalStockThreshold", children: "Critical Stock Threshold" }), _jsx(Input, { id: "criticalStockThreshold", type: "number", value: alertSettings.criticalStockThreshold, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    criticalStockThreshold: Number(e.target.value)
                                                                }) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Critical alert when stock \u2264 this amount" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold", children: "Notification Preferences" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "emailNotifications", children: "Email Notifications" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Receive alerts via email" })] }), _jsx("input", { id: "emailNotifications", type: "checkbox", checked: alertSettings.emailNotifications, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    emailNotifications: e.target.checked
                                                                }), className: "h-4 w-4" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "smsNotifications", children: "SMS Notifications" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Receive alerts via SMS" })] }), _jsx("input", { id: "smsNotifications", type: "checkbox", checked: alertSettings.smsNotifications, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    smsNotifications: e.target.checked
                                                                }), className: "h-4 w-4" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "dashboardAlerts", children: "Dashboard Alerts" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Show alerts on dashboard" })] }), _jsx("input", { id: "dashboardAlerts", type: "checkbox", checked: alertSettings.dashboardAlerts, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    dashboardAlerts: e.target.checked
                                                                }), className: "h-4 w-4" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold", children: "Alert Management" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "autoAcknowledgeDays", children: "Auto-acknowledge after (days)" }), _jsx(Input, { id: "autoAcknowledgeDays", type: "number", value: alertSettings.autoAcknowledgeDays, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    autoAcknowledgeDays: Number(e.target.value)
                                                                }) }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Automatically acknowledge alerts after this many days" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "immediateAlerts", children: "Immediate Alerts" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Send alerts immediately when generated" })] }), _jsx("input", { id: "immediateAlerts", type: "checkbox", checked: alertSettings.immediateAlerts, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    immediateAlerts: e.target.checked
                                                                }), className: "h-4 w-4" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "immediateAlertsCriticalOnly", children: "Critical Alerts Only" }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Send immediate alerts only for critical issues" })] }), _jsx("input", { id: "immediateAlertsCriticalOnly", type: "checkbox", checked: alertSettings.immediateAlertsCriticalOnly, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    immediateAlertsCriticalOnly: e.target.checked
                                                                }), className: "h-4 w-4" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold", children: "Schedule Settings" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "dailyDigestTime", children: "Daily Digest Time" }), _jsx(Input, { id: "dailyDigestTime", type: "time", value: alertSettings.dailyDigestTime, onChange: (e) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    dailyDigestTime: e.target.value
                                                                }) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "weeklySummaryDay", children: "Weekly Summary Day" }), _jsxs(Select, { value: alertSettings.weeklySummaryDay, onValueChange: (value) => setAlertSettings({
                                                                    ...alertSettings,
                                                                    weeklySummaryDay: value
                                                                }), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "MONDAY", children: "Monday" }), _jsx(SelectItem, { value: "TUESDAY", children: "Tuesday" }), _jsx(SelectItem, { value: "WEDNESDAY", children: "Wednesday" }), _jsx(SelectItem, { value: "THURSDAY", children: "Thursday" }), _jsx(SelectItem, { value: "FRIDAY", children: "Friday" }), _jsx(SelectItem, { value: "SATURDAY", children: "Saturday" }), _jsx(SelectItem, { value: "SUNDAY", children: "Sunday" })] })] })] })] })] })] }), _jsxs(DialogFooter, { children: [_jsx(Button, { variant: "outline", onClick: () => setShowAlertSettingsDialog(false), children: "Cancel" }), _jsx(Button, { onClick: handleSaveAlertSettings, children: "Save Settings" })] })] }) }), _jsx(Dialog, { open: showNewTransferDialog, onOpenChange: setShowNewTransferDialog, children: _jsxs(DialogContent, { className: "!max-w-7xl max-h-[95vh] overflow-y-auto w-[95vw] md:max-h-[90vh] md:w-[90vw] bg-gradient-to-br from-slate-50 to-emerald-50", children: [_jsx(DialogHeader, { className: "bg-white rounded-xl shadow-sm p-6 border border-slate-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "p-3 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl shadow-lg", children: _jsx(ArrowRightLeft, { className: "w-6 h-6 text-white" }) }), _jsxs("div", { children: [_jsx(DialogTitle, { className: "text-2xl font-bold text-slate-800", children: "Create New Transfer" }), _jsx("p", { className: "text-slate-600 mt-1", children: "Move inventory between locations with complete tracking" })] })] }) }), _jsx("div", { className: "flex-1", children: _jsxs(Tabs, { defaultValue: "basic", className: "h-full flex flex-col", children: [_jsx("div", { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-2 mb-4", children: _jsxs(TabsList, { className: "grid w-full grid-cols-4 gap-1", children: [_jsxs(TabsTrigger, { value: "basic", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-emerald-500 data-[state=active]:to-teal-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Package, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Transfer" })] }), _jsxs(TabsTrigger, { value: "logistics", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Logistics" })] }), _jsxs(TabsTrigger, { value: "tracking", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(QrCode, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Tracking" })] }), _jsxs(TabsTrigger, { value: "workflow", className: "flex items-center gap-2 py-3 px-4 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all duration-300", children: [_jsx(Settings, { className: "w-4 h-4" }), _jsx("span", { className: "hidden sm:inline", children: "Workflow" })] })] }) }), _jsxs("div", { className: "flex-1", children: [_jsx(TabsContent, { value: "basic", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-emerald-100 rounded-lg", children: _jsx(Package, { className: "w-5 h-5 text-emerald-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Transfer Information" }), _jsx("p", { className: "text-sm text-slate-600", children: "Essential transfer details and location selection" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-product", className: "text-sm font-medium text-slate-700", children: "Product *" }), _jsxs(Select, { value: newTransfer.productId, onValueChange: (value) => setNewTransfer({ ...newTransfer, productId: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100", children: _jsx(SelectValue, { placeholder: "Select product to transfer" }) }), _jsx(SelectContent, { children: allProducts.map((product) => (_jsx(SelectItem, { value: product.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-8 h-8 bg-gradient-to-br from-emerald-100 to-teal-100 rounded-lg flex items-center justify-center", children: _jsx(Package, { className: "w-4 h-4 text-emerald-600" }) }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: product.name }), _jsxs("div", { className: "text-sm text-slate-500", children: ["SKU: ", product.sku] })] })] }) }, product.id))) })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-quantity", className: "text-sm font-medium text-slate-700", children: "Quantity *" }), _jsx(Input, { id: "transfer-quantity", type: "number", min: "0", step: "1", value: newTransfer.quantity, onChange: (e) => setNewTransfer({ ...newTransfer, quantity: Number(e.target.value) }), placeholder: "Enter quantity to transfer", className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-from", className: "text-sm font-medium text-slate-700", children: "From Location" }), _jsxs(Select, { value: newTransfer.fromLocationId || "none", onValueChange: (value) => setNewTransfer({ ...newTransfer, fromLocationId: value === "none" ? "" : value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100", children: _jsx(SelectValue, { placeholder: "Select source location" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "none", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-gray-400 rounded-full" }), _jsx("span", { children: "External Source" })] }) }), locations.map((location) => (_jsx(SelectItem, { value: location.id, disabled: newTransfer.toLocationId === location.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(MapPin, { className: "w-4 h-4 text-emerald-600" }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: location.name }), _jsx("div", { className: "text-sm text-slate-500", children: location.code })] }), newTransfer.toLocationId === location.id && (_jsx("span", { className: "text-xs text-orange-500 ml-2", children: "(Same as destination)" }))] }) }, location.id)))] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-to", className: "text-sm font-medium text-slate-700", children: "To Location *" }), _jsxs(Select, { value: newTransfer.toLocationId, onValueChange: (value) => setNewTransfer({ ...newTransfer, toLocationId: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100", children: _jsx(SelectValue, { placeholder: "Select destination location" }) }), _jsx(SelectContent, { children: locations.map((location) => (_jsx(SelectItem, { value: location.id, disabled: newTransfer.fromLocationId === location.id, children: _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(MapPin, { className: "w-4 h-4 text-emerald-600" }), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: location.name }), _jsx("div", { className: "text-sm text-slate-500", children: location.code })] }), newTransfer.fromLocationId === location.id && (_jsx("span", { className: "text-xs text-orange-500 ml-2", children: "(Same as source)" }))] }) }, location.id))) })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-date", className: "text-sm font-medium text-slate-700", children: "Transfer Date *" }), _jsx(Input, { id: "transfer-date", type: "date", value: newTransfer.transferDate, onChange: (e) => setNewTransfer({ ...newTransfer, transferDate: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-time", className: "text-sm font-medium text-slate-700", children: "Transfer Time" }), _jsx(Input, { id: "transfer-time", type: "time", value: newTransfer.transferTime, onChange: (e) => setNewTransfer({ ...newTransfer, transferTime: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-delivery-date", className: "text-sm font-medium text-slate-700", children: "Expected Delivery" }), _jsx(Input, { id: "transfer-delivery-date", type: "date", value: newTransfer.expectedDeliveryDate, onChange: (e) => setNewTransfer({ ...newTransfer, expectedDeliveryDate: e.target.value }), className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-type", className: "text-sm font-medium text-slate-700", children: "Transfer Type" }), _jsxs(Select, { value: newTransfer.transferType, onValueChange: (value) => setNewTransfer({ ...newTransfer, transferType: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "INTER_LOCATION", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-emerald-500 rounded-full" }), _jsx("span", { children: "Inter-Location" })] }) }), _jsx(SelectItem, { value: "INTER_WAREHOUSE", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), _jsx("span", { children: "Inter-Warehouse" })] }) }), _jsx(SelectItem, { value: "CUSTOMER_SHIPMENT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), _jsx("span", { children: "Customer Shipment" })] }) }), _jsx(SelectItem, { value: "SUPPLIER_RETURN", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsx("span", { children: "Supplier Return" })] }) })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-reference", className: "text-sm font-medium text-slate-700", children: "Reference Number" }), _jsx(Input, { id: "transfer-reference", value: newTransfer.reference, onChange: (e) => setNewTransfer({ ...newTransfer, reference: e.target.value }), placeholder: "e.g., TRN-2024-001", className: "py-3 text-base border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-notes", className: "text-sm font-medium text-slate-700", children: "Transfer Notes" }), _jsx(Textarea, { id: "transfer-notes", value: newTransfer.notes, onChange: (e) => setNewTransfer({ ...newTransfer, notes: e.target.value }), placeholder: "Enter transfer notes and instructions", rows: 3, className: "resize-none border-slate-300 focus:border-emerald-400 focus:ring-1 focus:ring-emerald-100 transition-all duration-200" })] }), newTransfer.productId && newTransfer.toLocationId && (_jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-emerald-50 to-teal-50 rounded-lg border border-emerald-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Transfer Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Package, { className: "w-4 h-4 text-emerald-600" }), _jsxs("span", { className: "text-slate-600", children: ["Product: ", allProducts.find(p => p.id === newTransfer.productId)?.name || 'Selected'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(ArrowRightLeft, { className: "w-4 h-4 text-emerald-600" }), _jsxs("span", { className: "text-slate-600", children: ["Qty: ", newTransfer.quantity] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4 text-emerald-600" }), _jsxs("span", { className: "text-slate-600", children: ["From: ", newTransfer.fromLocationId ? locations.find(l => l.id === newTransfer.fromLocationId)?.name || 'Unknown' : 'External'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-emerald-600" }), _jsxs("span", { className: "text-slate-600", children: ["To: ", locations.find(l => l.id === newTransfer.toLocationId)?.name || 'Select destination'] })] })] })] }))] })] }) }), _jsx(TabsContent, { value: "logistics", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-blue-100 rounded-lg", children: _jsx(MapPin, { className: "w-5 h-5 text-blue-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Logistics & Shipping" }), _jsx("p", { className: "text-sm text-slate-600", children: "Carrier information, shipping details, and costs" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-carrier", className: "text-sm font-medium text-slate-700", children: "Carrier Name" }), _jsx(Input, { id: "transfer-carrier", value: newTransfer.carrierName, onChange: (e) => setNewTransfer({ ...newTransfer, carrierName: e.target.value }), placeholder: "e.g., FedEx, UPS, Internal Transport", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-tracking", className: "text-sm font-medium text-slate-700", children: "Tracking Number" }), _jsx(Input, { id: "transfer-tracking", value: newTransfer.trackingNumber, onChange: (e) => setNewTransfer({ ...newTransfer, trackingNumber: e.target.value }), placeholder: "e.g., 1Z999AA123456789", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-shipping-cost", className: "text-sm font-medium text-slate-700", children: "Shipping Cost" }), _jsxs("div", { className: "relative", children: [_jsx(DollarSign, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" }), _jsx(Input, { id: "transfer-shipping-cost", type: "number", min: "0", step: "0.01", value: newTransfer.shippingCost, onChange: (e) => setNewTransfer({ ...newTransfer, shippingCost: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pl-10 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-insurance", className: "text-sm font-medium text-slate-700", children: "Insurance Value" }), _jsxs("div", { className: "relative", children: [_jsx(DollarSign, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" }), _jsx(Input, { id: "transfer-insurance", type: "number", min: "0", step: "0.01", value: newTransfer.insuranceValue, onChange: (e) => setNewTransfer({ ...newTransfer, insuranceValue: parseFloat(e.target.value) || 0 }), placeholder: "0.00", className: "pl-10 py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-packing", className: "text-sm font-medium text-slate-700", children: "Packing Method" }), _jsxs(Select, { value: newTransfer.packingMethod, onValueChange: (value) => setNewTransfer({ ...newTransfer, packingMethod: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100", children: _jsx(SelectValue, { placeholder: "Select packing method" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "STANDARD_BOX", children: "Standard Box" }), _jsx(SelectItem, { value: "PADDED_ENVELOPE", children: "Padded Envelope" }), _jsx(SelectItem, { value: "PALLET", children: "Pallet" }), _jsx(SelectItem, { value: "CUSTOM_CRATE", children: "Custom Crate" }), _jsx(SelectItem, { value: "BULK", children: "Bulk" })] })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-dept-from", className: "text-sm font-medium text-slate-700", children: "Department From" }), _jsx(Input, { id: "transfer-dept-from", value: newTransfer.departmentFrom, onChange: (e) => setNewTransfer({ ...newTransfer, departmentFrom: e.target.value }), placeholder: "e.g., Warehouse Operations", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-dept-to", className: "text-sm font-medium text-slate-700", children: "Department To" }), _jsx(Input, { id: "transfer-dept-to", value: newTransfer.departmentTo, onChange: (e) => setNewTransfer({ ...newTransfer, departmentTo: e.target.value }), placeholder: "e.g., Retail Operations", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-project", className: "text-sm font-medium text-slate-700", children: "Project Code" }), _jsx(Input, { id: "transfer-project", value: newTransfer.projectCode, onChange: (e) => setNewTransfer({ ...newTransfer, projectCode: e.target.value }), placeholder: "e.g., PROJ-2024-01", className: "py-3 text-base border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-special-instructions", className: "text-sm font-medium text-slate-700", children: "Special Instructions" }), _jsx(Textarea, { id: "transfer-special-instructions", value: newTransfer.specialInstructions, onChange: (e) => setNewTransfer({ ...newTransfer, specialInstructions: e.target.value }), placeholder: "Special handling requirements, delivery instructions, etc.", rows: 3, className: "resize-none border-slate-300 focus:border-blue-400 focus:ring-1 focus:ring-blue-100 transition-all duration-200" })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Shipping Options" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "transfer-fragile", checked: newTransfer.fragile, onChange: (e) => setNewTransfer({ ...newTransfer, fragile: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-4 h-4 text-orange-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "transfer-fragile", className: "text-sm font-medium cursor-pointer", children: "Fragile Items" }), _jsx("p", { className: "text-xs text-slate-500", children: "Requires special handling" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "transfer-temperature", checked: newTransfer.temperatureControlled, onChange: (e) => setNewTransfer({ ...newTransfer, temperatureControlled: e.target.checked }), className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Thermometer, { className: "w-4 h-4 text-blue-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "transfer-temperature", className: "text-sm font-medium cursor-pointer", children: "Temperature Controlled" }), _jsx("p", { className: "text-xs text-slate-500", children: "Maintain cold chain" })] })] })] })] })] }), (newTransfer.shippingCost > 0 || newTransfer.insuranceValue > 0) && (_jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg border border-blue-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Cost Summary" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsxs("div", { className: "text-2xl font-bold text-blue-600", children: ["$", newTransfer.shippingCost.toFixed(2)] }), _jsx("div", { className: "text-sm text-slate-600", children: "Shipping Cost" })] }), _jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsxs("div", { className: "text-2xl font-bold text-green-600", children: ["$", newTransfer.insuranceValue.toFixed(2)] }), _jsx("div", { className: "text-sm text-slate-600", children: "Insurance Value" })] }), _jsxs("div", { className: "text-center p-3 bg-white rounded-lg border", children: [_jsxs("div", { className: "text-2xl font-bold text-indigo-600", children: ["$", (newTransfer.shippingCost + newTransfer.insuranceValue).toFixed(2)] }), _jsx("div", { className: "text-sm text-slate-600", children: "Total Cost" })] })] })] }))] })] }) }), _jsx(TabsContent, { value: "tracking", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-purple-100 rounded-lg", children: _jsx(QrCode, { className: "w-5 h-5 text-purple-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Tracking & Identification" }), _jsx("p", { className: "text-sm text-slate-600", children: "Batch numbers, serial codes, and tracking information" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-batch", className: "text-sm font-medium text-slate-700", children: "Batch Number" }), _jsx(Input, { id: "transfer-batch", value: newTransfer.batchNumber, onChange: (e) => setNewTransfer({ ...newTransfer, batchNumber: e.target.value }), placeholder: "e.g., BATCH-2024-001", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-serials", className: "text-sm font-medium text-slate-700", children: "Serial Numbers" }), _jsx(Textarea, { id: "transfer-serials", value: newTransfer.serialNumbers, onChange: (e) => setNewTransfer({ ...newTransfer, serialNumbers: e.target.value }), placeholder: "e.g., SN001, SN002, SN003 (comma separated)", rows: 2, className: "resize-none border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-reason", className: "text-sm font-medium text-slate-700", children: "Reason Code" }), _jsxs(Select, { value: newTransfer.reasonCode, onValueChange: (value) => setNewTransfer({ ...newTransfer, reasonCode: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100", children: _jsx(SelectValue, { placeholder: "Select reason for transfer" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "RESTOCK", children: "Restock" }), _jsx(SelectItem, { value: "CUSTOMER_ORDER", children: "Customer Order" }), _jsx(SelectItem, { value: "QUALITY_CONTROL", children: "Quality Control" }), _jsx(SelectItem, { value: "DAMAGE_REPLACEMENT", children: "Damage Replacement" }), _jsx(SelectItem, { value: "SEASONAL_ADJUSTMENT", children: "Seasonal Adjustment" }), _jsx(SelectItem, { value: "EXCESS_INVENTORY", children: "Excess Inventory" }), _jsx(SelectItem, { value: "OTHER", children: "Other" })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-cost-center", className: "text-sm font-medium text-slate-700", children: "Cost Center" }), _jsx(Input, { id: "transfer-cost-center", value: newTransfer.costCenter, onChange: (e) => setNewTransfer({ ...newTransfer, costCenter: e.target.value }), placeholder: "e.g., CC-001", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-requested-by", className: "text-sm font-medium text-slate-700", children: "Requested By" }), _jsx(Input, { id: "transfer-requested-by", value: newTransfer.requestedBy, onChange: (e) => setNewTransfer({ ...newTransfer, requestedBy: e.target.value }), placeholder: "Staff member name", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-approved-by", className: "text-sm font-medium text-slate-700", children: "Approved By" }), _jsx(Input, { id: "transfer-approved-by", value: newTransfer.approvedBy, onChange: (e) => setNewTransfer({ ...newTransfer, approvedBy: e.target.value }), placeholder: "Manager name", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-processed-by", className: "text-sm font-medium text-slate-700", children: "Processed By" }), _jsx(Input, { id: "transfer-processed-by", value: newTransfer.processedBy, onChange: (e) => setNewTransfer({ ...newTransfer, processedBy: e.target.value }), placeholder: "Handler name", className: "py-3 text-base border-slate-300 focus:border-purple-400 focus:ring-1 focus:ring-purple-100 transition-all duration-200" })] })] }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Tracking Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(QrCode, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Batch: ", newTransfer.batchNumber || 'Not set'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), _jsxs("span", { className: "text-slate-600", children: ["Serials: ", newTransfer.serialNumbers ? 'Set' : 'Not set'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(User, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Requested: ", newTransfer.requestedBy || 'Not set'] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "w-4 h-4 text-purple-600" }), _jsxs("span", { className: "text-slate-600", children: ["Reason: ", newTransfer.reasonCode || 'Not specified'] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "workflow", children: _jsxs("div", { className: "bg-white rounded-xl border border-slate-200 shadow-sm p-6", children: [_jsxs("div", { className: "flex items-center gap-3 mb-6", children: [_jsx("div", { className: "p-2 bg-orange-100 rounded-lg", children: _jsx(Settings, { className: "w-5 h-5 text-orange-600" }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-slate-800", children: "Workflow & Approval" }), _jsx("p", { className: "text-sm text-slate-600", children: "Priority settings, approval process, and status management" })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-priority", className: "text-sm font-medium text-slate-700", children: "Priority Level" }), _jsxs(Select, { value: newTransfer.priority, onValueChange: (value) => setNewTransfer({ ...newTransfer, priority: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "LOW", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), _jsx("span", { children: "Low Priority" })] }) }), _jsx(SelectItem, { value: "NORMAL", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), _jsx("span", { children: "Normal Priority" })] }) }), _jsx(SelectItem, { value: "HIGH", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsx("span", { children: "High Priority" })] }) }), _jsx(SelectItem, { value: "URGENT", children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-red-500 rounded-full" }), _jsx("span", { children: "Urgent" })] }) })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-status", className: "text-sm font-medium text-slate-700", children: "Transfer Status" }), _jsxs(Select, { value: newTransfer.status, onValueChange: (value) => setNewTransfer({ ...newTransfer, status: value }), children: [_jsx(SelectTrigger, { className: "py-3 text-base border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "PENDING", children: "Pending" }), _jsx(SelectItem, { value: "APPROVED", children: "Approved" }), _jsx(SelectItem, { value: "IN_TRANSIT", children: "In Transit" }), _jsx(SelectItem, { value: "DELIVERED", children: "Delivered" }), _jsx(SelectItem, { value: "COMPLETED", children: "Completed" }), _jsx(SelectItem, { value: "CANCELLED", children: "Cancelled" })] })] })] })] }), _jsxs("div", { className: "pt-6 border-t border-slate-200", children: [_jsx("h4", { className: "text-sm font-medium text-slate-800 mb-4", children: "Workflow Options" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "transfer-urgent", checked: newTransfer.isUrgent, onChange: (e) => setNewTransfer({ ...newTransfer, isUrgent: e.target.checked }), className: "w-4 h-4 text-red-600 bg-gray-100 border-gray-300 rounded focus:ring-red-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-4 h-4 text-red-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "transfer-urgent", className: "text-sm font-medium cursor-pointer", children: "Urgent Transfer" }), _jsx("p", { className: "text-xs text-slate-500", children: "Mark as urgent for priority processing" })] })] })] }), _jsxs("div", { className: "flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors", children: [_jsx("input", { type: "checkbox", id: "transfer-approval", checked: newTransfer.requiresApproval, onChange: (e) => setNewTransfer({ ...newTransfer, requiresApproval: e.target.checked }), className: "w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-4 h-4 text-orange-600" }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "transfer-approval", className: "text-sm font-medium cursor-pointer", children: "Requires Approval" }), _jsx("p", { className: "text-xs text-slate-500", children: "Transfer needs manager approval" })] })] })] })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx(Label, { htmlFor: "transfer-internal-notes", className: "text-sm font-medium text-slate-700", children: "Internal Notes" }), _jsx(Textarea, { id: "transfer-internal-notes", value: newTransfer.internalNotes, onChange: (e) => setNewTransfer({ ...newTransfer, internalNotes: e.target.value }), placeholder: "Internal notes for staff use only (not visible to external users)", rows: 4, className: "resize-none border-slate-300 focus:border-orange-400 focus:ring-1 focus:ring-orange-100 transition-all duration-200" }), _jsx("p", { className: "text-xs text-slate-500", children: "These notes are for internal use and won't be displayed to external users" })] }), _jsxs("div", { className: "mt-8 p-4 bg-gradient-to-br from-orange-50 to-red-50 rounded-lg border border-orange-200", children: [_jsx("h4", { className: "text-sm font-semibold text-slate-800 mb-3", children: "Workflow Summary" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${newTransfer.priority === 'URGENT' ? 'bg-red-500' : newTransfer.priority === 'HIGH' ? 'bg-orange-500' : 'bg-blue-500'}` }), _jsxs("span", { className: "text-slate-600", children: ["Priority: ", newTransfer.priority] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), _jsxs("span", { className: "text-slate-600", children: ["Status: ", newTransfer.status] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-3 h-3 text-orange-600" }), _jsx("span", { className: "text-slate-600", children: newTransfer.isUrgent ? 'Urgent' : 'Standard' })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-3 h-3 text-orange-600" }), _jsx("span", { className: "text-slate-600", children: newTransfer.requiresApproval ? 'Needs Approval' : 'Auto Process' })] })] })] })] })] }) })] })] }) }), _jsx(DialogFooter, { className: "bg-white rounded-xl shadow-sm border border-slate-200 p-6", children: _jsxs("div", { className: "flex items-center justify-between w-full", children: [_jsxs("div", { className: "text-sm text-slate-600", children: [_jsx("span", { className: "font-medium", children: allProducts.find(p => p.id === newTransfer.productId)?.name || 'No Product Selected' }), newTransfer.transferType && (_jsx("span", { className: "ml-2 px-2 py-1 bg-slate-100 text-slate-600 rounded text-xs", children: newTransfer.transferType.replace('_', ' ') }))] }), _jsxs("div", { className: "flex gap-3", children: [_jsx(Button, { variant: "outline", onClick: () => setShowNewTransferDialog(false), className: "px-6", children: "Cancel" }), _jsx(Button, { onClick: handleCreateTransfer, className: "px-8 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700", children: "Create Transfer" })] })] }) })] }) }), _jsx(Dialog, { open: showViewTransferDialog, onOpenChange: setShowViewTransferDialog, children: _jsxs(DialogContent, { className: "max-w-2xl", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Transfer Details" }) }), selectedTransfer && (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Product" }), _jsx("p", { className: "text-lg font-semibold", children: selectedTransfer.product.name }), _jsx("p", { className: "text-sm text-muted-foreground", children: selectedTransfer.product.sku })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Quantity" }), _jsxs("p", { className: "text-lg font-semibold", children: [selectedTransfer.quantity, " units"] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "From Location" }), _jsx("p", { className: "text-lg font-semibold", children: selectedTransfer.fromLocation ? selectedTransfer.fromLocation.name : 'External' }), selectedTransfer.fromLocation && (_jsx("p", { className: "text-sm text-muted-foreground", children: selectedTransfer.fromLocation.code }))] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "To Location" }), _jsx("p", { className: "text-lg font-semibold", children: selectedTransfer.toLocation.name }), _jsx("p", { className: "text-sm text-muted-foreground", children: selectedTransfer.toLocation.code })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Transfer Date" }), _jsx("p", { className: "text-lg font-semibold", children: new Date(selectedTransfer.transferDate).toLocaleDateString() })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Status" }), _jsx("div", { className: "mt-1", children: getTransferStatusBadge(selectedTransfer.status) })] })] }), selectedTransfer.reference && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Reference" }), _jsx("p", { className: "text-lg font-semibold", children: selectedTransfer.reference })] })), selectedTransfer.notes && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Notes" }), _jsx("p", { className: "text-sm", children: selectedTransfer.notes })] })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Requested By" }), _jsx("p", { className: "text-sm", children: selectedTransfer.requestedBy || 'N/A' })] }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Completed By" }), _jsx("p", { className: "text-sm", children: selectedTransfer.completedBy || 'N/A' })] })] }), selectedTransfer.completedAt && (_jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium", children: "Completed At" }), _jsx("p", { className: "text-sm", children: new Date(selectedTransfer.completedAt).toLocaleString() })] }))] })), _jsx(DialogFooter, { children: _jsx(Button, { variant: "outline", onClick: () => setShowViewTransferDialog(false), children: "Close" }) })] }) }), _jsx(Dialog, { open: showAddCategoryDialog, onOpenChange: setShowAddCategoryDialog, children: _jsxs(DialogContent, { className: "max-w-lg", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Create New Category" }) }), _jsxs("div", { className: "grid gap-4 py-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "category-name", children: "Category Name *" }), _jsx(Input, { id: "category-name", value: newCategory.name, onChange: (e) => setNewCategory({ ...newCategory, name: e.target.value }), placeholder: "Enter category name" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "category-description", children: "Description" }), _jsx(Textarea, { id: "category-description", value: newCategory.description, onChange: (e) => setNewCategory({ ...newCategory, description: e.target.value }), placeholder: "Enter category description (optional)", rows: 3 })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "category-color", children: "Color" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Input, { id: "category-color", type: "color", value: newCategory.color, onChange: (e) => setNewCategory({ ...newCategory, color: e.target.value }), className: "w-12 h-10 p-1" }), _jsx(Input, { value: newCategory.color, onChange: (e) => setNewCategory({ ...newCategory, color: e.target.value }), placeholder: "#2563eb" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "category-icon", children: "Icon" }), _jsxs(Select, { value: newCategory.icon, onValueChange: (value) => setNewCategory({ ...newCategory, icon: value }), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select an icon" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "Package", children: "\uD83D\uDCE6 Package" }), _jsx(SelectItem, { value: "Zap", children: "\u26A1 Electronics" }), _jsx(SelectItem, { value: "Building", children: "\uD83C\uDFE2 Office" }), _jsx(SelectItem, { value: "Wrench", children: "\uD83D\uDD27 Tools" }), _jsx(SelectItem, { value: "Heart", children: "\u2764\uFE0F Health" }), _jsx(SelectItem, { value: "Car", children: "\uD83D\uDE97 Automotive" })] })] })] })] })] }), _jsxs(DialogFooter, { children: [_jsx(Button, { variant: "outline", onClick: () => setShowAddCategoryDialog(false), children: "Cancel" }), _jsx(Button, { onClick: async () => {
                                            try {
                                                if (!newCategory.name) {
                                                    toast({
                                                        title: "Validation Error",
                                                        description: "Category name is required",
                                                        variant: "destructive"
                                                    });
                                                    return;
                                                }
                                                const createdCategory = await categoriesApi.createCategory({
                                                    ...newCategory,
                                                    companyId: companyId
                                                });
                                                toast({
                                                    title: "Success",
                                                    description: "Category created successfully",
                                                });
                                                // Auto-select the newly created category in the product form
                                                setNewProduct({ ...newProduct, categoryId: createdCategory.id });
                                                // Reset form and refresh
                                                setNewCategory({
                                                    name: '',
                                                    description: '',
                                                    color: '#2563eb',
                                                    icon: 'Package'
                                                });
                                                setShowAddCategoryDialog(false);
                                                queryClient.invalidateQueries({ queryKey: ['categories'] });
                                            }
                                            catch (error) {
                                                toast({
                                                    title: "Error",
                                                    description: "Failed to create category. Please try again.",
                                                    variant: "destructive"
                                                });
                                            }
                                        }, children: "Create Category" })] })] }) }), _jsx(Dialog, { open: showViewCategoriesDialog, onOpenChange: setShowViewCategoriesDialog, children: _jsxs(DialogContent, { className: "max-w-4xl", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Manage Categories" }) }), _jsxs("div", { className: "py-4", children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsxs("p", { className: "text-sm text-muted-foreground", children: [categories?.length || 0, " categories found"] }), _jsxs(Button, { onClick: () => setShowAddCategoryDialog(true), children: [_jsx(Plus, { className: "w-4 h-4 mr-2" }), "Add Category"] })] }), _jsx("div", { className: "grid gap-3 max-h-96 overflow-y-auto", children: categories.map((category) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx("div", { className: "w-4 h-4 rounded-full", style: { backgroundColor: category.color } }), _jsxs("div", { children: [_jsx("p", { className: "font-medium", children: category.name }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [category._count?.products || 0, " products"] })] })] }), _jsx("div", { className: "flex items-center gap-2", children: _jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                            setSelectedCategory_(category);
                                                            setNewCategory({
                                                                name: category.name,
                                                                description: category.description || '',
                                                                color: category.color || '#2563eb',
                                                                icon: category.icon || 'Package'
                                                            });
                                                            setShowEditCategoryDialog(true);
                                                        }, children: _jsx(Edit, { className: "w-4 h-4" }) }) })] }, category.id))) })] }), _jsx(DialogFooter, { children: _jsx(Button, { variant: "outline", onClick: () => setShowViewCategoriesDialog(false), children: "Close" }) })] }) })] }) }));
}
